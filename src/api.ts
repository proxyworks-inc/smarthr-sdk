/* tslint:disable */
/* eslint-disable */
/**
 * SmartHR API
 * SmartHR の各種データを操作する API です
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 住所ID
     * @type {string}
     * @memberof Address
     */
    'id': string;
    /**
     * 国コード
     * @type {string}
     * @memberof Address
     */
    'country_number'?: string;
    /**
     * 郵便番号
     * @type {string}
     * @memberof Address
     */
    'zip_code'?: string;
    /**
     * 都道府県
     * @type {string}
     * @memberof Address
     */
    'pref'?: string;
    /**
     * 市区町村
     * @type {string}
     * @memberof Address
     */
    'city': string;
    /**
     * 丁目・番地
     * @type {string}
     * @memberof Address
     */
    'street'?: string;
    /**
     * 建物名・部屋番号
     * @type {string}
     * @memberof Address
     */
    'building'?: string;
    /**
     * ヨミガナ
     * @type {string}
     * @memberof Address
     */
    'literal_yomi'?: string;
}
/**
 * 
 * @export
 * @interface Allowance
 */
export interface Allowance {
    /**
     * 名前
     * @type {string}
     * @memberof Allowance
     */
    'name': string;
    /**
     * 支給金額
     * @type {number}
     * @memberof Allowance
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * ファイル名
     * @type {string}
     * @memberof Attachment
     */
    'file_name'?: string;
    /**
     * URL
     * @type {string}
     * @memberof Attachment
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface AttachmentParams
 */
export interface AttachmentParams {
    /**
     * ファイル名
     * @type {string}
     * @memberof AttachmentParams
     */
    'file_name'?: string;
    /**
     * 登録したいデータを Base64 エンコードした文字列。ファイル（エンコード前）の最大サイズは 10MB で、次の拡張子のファイルを受け付けます: png, jpeg (jpg), pdf, text (txt), csv, conf, log, docx (doc), xlsx (xls), gif
     * @type {string}
     * @memberof AttachmentParams
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface Attendance
 */
export interface Attendance {
    /**
     * 名前
     * @type {string}
     * @memberof Attendance
     */
    'name': string;
    /**
     * 勤怠の日数・時間
     * @type {number}
     * @memberof Attendance
     */
    'amount': number;
    /**
     * 単位
     * @type {string}
     * @memberof Attendance
     */
    'unit_type': AttendanceUnitTypeEnum;
    /**
     * 記数法種別
     * @type {string}
     * @memberof Attendance
     */
    'numeral_system_type'?: AttendanceNumeralSystemTypeEnum;
    /**
     * 区切り種別
     * @type {string}
     * @memberof Attendance
     */
    'delimiter_type'?: AttendanceDelimiterTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AttendanceUnitTypeEnum {
    Hours = 'hours',
    Days = 'days'
}
/**
    * @export
    * @enum {string}
    */
export enum AttendanceNumeralSystemTypeEnum {
    Decimal = 'decimal',
    Sexagesimal = 'sexagesimal'
}
/**
    * @export
    * @enum {string}
    */
export enum AttendanceDelimiterTypeEnum {
    Period = 'period',
    Colon = 'colon'
}

/**
 * 
 * @export
 * @interface BankAccount
 */
export interface BankAccount {
    /**
     * 銀行コード
     * @type {string}
     * @memberof BankAccount
     */
    'bank_code': string;
    /**
     * 支店コード
     * @type {string}
     * @memberof BankAccount
     */
    'bank_branch_code': string;
    /**
     * 預金種別
     * @type {string}
     * @memberof BankAccount
     */
    'account_type': BankAccountAccountTypeEnum;
    /**
     * 口座番号
     * @type {string}
     * @memberof BankAccount
     */
    'account_number': string;
    /**
     * 名義（カタカナ）
     * @type {string}
     * @memberof BankAccount
     */
    'account_holder_name': string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof BankAccount
     */
    'bankbook_image'?: AttachmentParams;
    /**
     * 口座設定ID
     * @type {string}
     * @memberof BankAccount
     */
    'bank_account_setting_id'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BankAccountAccountTypeEnum {
    Saving = 'saving',
    Checking = 'checking',
    Deposit = 'deposit'
}

/**
 * BankAccountSetting model
 * @export
 * @interface BankAccountSetting
 */
export interface BankAccountSetting {
    /**
     * 
     * @type {string}
     * @memberof BankAccountSetting
     */
    'id'?: string;
    /**
     * 口座情報の名称
     * @type {string}
     * @memberof BankAccountSetting
     */
    'name': string;
    /**
     * 口座情報が有効かどうか
     * @type {boolean}
     * @memberof BankAccountSetting
     */
    'enabled': boolean;
    /**
     * 口座情報の順序
     * @type {number}
     * @memberof BankAccountSetting
     */
    'number': number;
    /**
     * 口座情報のプリセットタイプ
     * @type {string}
     * @memberof BankAccountSetting
     */
    'preset_type'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof BankAccountSetting
     */
    'created_at': string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof BankAccountSetting
     */
    'updated_at': string;
}
/**
 * BizEstablishment model
 * @export
 * @interface BizEstablishment
 */
export interface BizEstablishment {
    /**
     * 事業所ID
     * @type {string}
     * @memberof BizEstablishment
     */
    'id': string;
    /**
     * 健康保険組合の種類
     * @type {string}
     * @memberof BizEstablishment
     */
    'hel_ins_type': BizEstablishmentHelInsTypeEnum;
    /**
     * 健康保険組合の名称
     * @type {string}
     * @memberof BizEstablishment
     */
    'hel_ins_name'?: string;
    /**
     * 管理名
     * @type {string}
     * @memberof BizEstablishment
     */
    'name': string;
    /**
     * 社会保険登録名
     * @type {string}
     * @memberof BizEstablishment
     */
    'soc_ins_name': string;
    /**
     * 社会保険代表者ID
     * @type {string}
     * @memberof BizEstablishment
     */
    'soc_ins_owner_id'?: string;
    /**
     * 
     * @type {Crew}
     * @memberof BizEstablishment
     */
    'soc_ins_owner'?: Crew;
    /**
     * 
     * @type {Address}
     * @memberof BizEstablishment
     */
    'soc_ins_address'?: Address;
    /**
     * 電話番号
     * @type {string}
     * @memberof BizEstablishment
     */
    'soc_ins_tel_number'?: string;
    /**
     * 労働保険登録名
     * @type {string}
     * @memberof BizEstablishment
     */
    'lab_ins_name': string;
    /**
     * 労働保険代表者ID
     * @type {string}
     * @memberof BizEstablishment
     */
    'lab_ins_owner_id'?: string;
    /**
     * 
     * @type {Crew}
     * @memberof BizEstablishment
     */
    'lab_ins_owner'?: Crew;
    /**
     * 
     * @type {Address}
     * @memberof BizEstablishment
     */
    'lab_ins_address'?: Address;
    /**
     * 電話番号
     * @type {string}
     * @memberof BizEstablishment
     */
    'lab_ins_tel_number'?: string;
    /**
     * 管轄の税務署
     * @type {string}
     * @memberof BizEstablishment
     */
    'jurisdiction_tax'?: string;
    /**
     * 
     * @type {Address}
     * @memberof BizEstablishment
     */
    'salary_payer_address'?: Address;
    /**
     * 最終更新日
     * @type {string}
     * @memberof BizEstablishment
     */
    'updated_at'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof BizEstablishment
     */
    'created_at'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BizEstablishmentHelInsTypeEnum {
    KyokaiKenpo = 'kyokai_kenpo',
    ItsKenpo = 'its_kenpo',
    TjKenpo = 'tj_kenpo',
    GeneralKenpo = 'general_kenpo'
}

/**
 * Crew model
 * @export
 * @interface Crew
 */
export interface Crew {
    /**
     * 従業員ID
     * @type {string}
     * @memberof Crew
     */
    'id': string;
    /**
     * ユーザーID
     * @type {string}
     * @memberof Crew
     */
    'user_id'?: string;
    /**
     * 事業所ID
     * @type {string}
     * @memberof Crew
     */
    'biz_establishment_id'?: string;
    /**
     * 
     * @type {BizEstablishment}
     * @memberof Crew
     */
    'biz_establishment'?: BizEstablishment;
    /**
     * 社員番号
     * @type {string}
     * @memberof Crew
     */
    'emp_code'?: string;
    /**
     * 雇用形態
     * @type {string}
     * @memberof Crew
     */
    'emp_type'?: CrewEmpTypeEnum;
    /**
     * 
     * @type {EmploymentType}
     * @memberof Crew
     */
    'employment_type'?: EmploymentType;
    /**
     * 在籍状況
     * @type {string}
     * @memberof Crew
     */
    'emp_status': CrewEmpStatusEnum;
    /**
     * 姓
     * @type {string}
     * @memberof Crew
     */
    'last_name': string;
    /**
     * 名
     * @type {string}
     * @memberof Crew
     */
    'first_name': string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof Crew
     */
    'last_name_yomi': string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof Crew
     */
    'first_name_yomi': string;
    /**
     * ビジネスネーム：姓
     * @type {string}
     * @memberof Crew
     */
    'business_last_name'?: string;
    /**
     * ビジネスネーム：名
     * @type {string}
     * @memberof Crew
     */
    'business_first_name'?: string;
    /**
     * ビジネスネーム：姓（カタカナ）
     * @type {string}
     * @memberof Crew
     */
    'business_last_name_yomi'?: string;
    /**
     * ビジネスネーム：名（カタカナ）
     * @type {string}
     * @memberof Crew
     */
    'business_first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof Crew
     */
    'birth_at'?: string;
    /**
     * 戸籍上の性別
     * @type {string}
     * @memberof Crew
     */
    'gender': CrewGenderEnum;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'identity_card_image1'?: Attachment;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'identity_card_image2'?: Attachment;
    /**
     * 電話番号
     * @type {string}
     * @memberof Crew
     */
    'tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof Crew
     */
    'address'?: Address;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'address_image'?: Attachment;
    /**
     * 世帯主
     * @type {string}
     * @memberof Crew
     */
    'address_head_of_family'?: string;
    /**
     * 世帯主の続柄
     * @type {string}
     * @memberof Crew
     */
    'address_relation_name'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof Crew
     */
    'email'?: string;
    /**
     * プロフィール画像
     * @type {Array<Image>}
     * @memberof Crew
     */
    'profile_images'?: Array<Image>;
    /**
     * 緊急連絡先の続柄
     * @type {string}
     * @memberof Crew
     */
    'emergency_relation_name'?: string;
    /**
     * 緊急連絡先の姓
     * @type {string}
     * @memberof Crew
     */
    'emergency_last_name'?: string;
    /**
     * 緊急連絡先の名
     * @type {string}
     * @memberof Crew
     */
    'emergency_first_name'?: string;
    /**
     * 緊急連絡先の姓（カタカナ）
     * @type {string}
     * @memberof Crew
     */
    'emergency_last_name_yomi'?: string;
    /**
     * 緊急連絡先の名（カタカナ）
     * @type {string}
     * @memberof Crew
     */
    'emergency_first_name_yomi'?: string;
    /**
     * 緊急連絡先の電話番号
     * @type {string}
     * @memberof Crew
     */
    'emergency_tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof Crew
     */
    'emergency_address'?: Address;
    /**
     * 
     * @type {Address}
     * @memberof Crew
     */
    'resident_card_address'?: Address;
    /**
     * 住民票住所の世帯主
     * @type {string}
     * @memberof Crew
     */
    'resident_card_address_head_of_family'?: string;
    /**
     * 続柄（住民票住所の世帯主）
     * @type {string}
     * @memberof Crew
     */
    'resident_card_address_relation_name'?: string;
    /**
     * 役職
     * @type {string}
     * @memberof Crew
     */
    'position'?: string;
    /**
     * 業務内容
     * @type {string}
     * @memberof Crew
     */
    'occupation'?: string;
    /**
     * 入社年月日
     * @type {string}
     * @memberof Crew
     */
    'entered_at'?: string;
    /**
     * 退職年月日
     * @type {string}
     * @memberof Crew
     */
    'resigned_at'?: string;
    /**
     * 退職事由
     * @type {string}
     * @memberof Crew
     */
    'resigned_reason'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'resume1'?: Attachment;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'resume2'?: Attachment;
    /**
     * 雇用保険の被保険者番号
     * @type {string}
     * @memberof Crew
     */
    'emp_ins_insured_person_number'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'emp_ins_insured_person_number_image'?: Attachment;
    /**
     * 雇用保険被保険者番号未記載理由
     * @type {string}
     * @memberof Crew
     */
    'emp_ins_insured_person_number_unknown_reason_type'?: CrewEmpInsInsuredPersonNumberUnknownReasonTypeEnum;
    /**
     * 雇用保険の資格取得年月日
     * @type {string}
     * @memberof Crew
     */
    'emp_ins_qualified_at'?: string;
    /**
     * 雇用保険の資格喪失年月日
     * @type {string}
     * @memberof Crew
     */
    'emp_ins_disqualified_at'?: string;
    /**
     * 雇用保険に加入していた会社名
     * @type {string}
     * @memberof Crew
     */
    'previous_workplace'?: string;
    /**
     * 雇用保険に加入していた会社の在籍開始日
     * @type {string}
     * @memberof Crew
     */
    'previous_employment_start_on'?: string;
    /**
     * 雇用保険に加入していた会社の在籍終了日
     * @type {string}
     * @memberof Crew
     */
    'previous_employment_end_on'?: string;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {number}
     * @memberof Crew
     */
    'soc_ins_insured_person_number'?: number;
    /**
     * 健康保険の被保険者整理番号
     * @type {number}
     * @memberof Crew
     */
    'hel_ins_insured_person_number'?: number;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof Crew
     */
    'basic_pension_number'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'basic_pension_number_image'?: Attachment;
    /**
     * 厚生年金初加入フラグ
     * @type {boolean}
     * @memberof Crew
     */
    'first_enrolling_in_emp_pns_ins_flag'?: boolean;
    /**
     * 基礎年金番号未記載理由
     * @type {string}
     * @memberof Crew
     */
    'basic_pension_number_unknown_reason_type'?: CrewBasicPensionNumberUnknownReasonTypeEnum;
    /**
     * 最初に厚生年金へ加入した会社名
     * @type {string}
     * @memberof Crew
     */
    'first_workplace'?: string;
    /**
     * 最初に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof Crew
     */
    'first_workplace_address_text'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof Crew
     */
    'first_employment_start_on'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof Crew
     */
    'first_employment_end_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社名
     * @type {string}
     * @memberof Crew
     */
    'last_workplace'?: string;
    /**
     * 最後に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof Crew
     */
    'last_workplace_address_text'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof Crew
     */
    'last_employment_start_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof Crew
     */
    'last_employment_end_on'?: string;
    /**
     * 社会保険の資格取得年月日
     * @type {string}
     * @memberof Crew
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の資格喪失年月日
     * @type {string}
     * @memberof Crew
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 配偶者の有無
     * @type {boolean}
     * @memberof Crew
     */
    'having_spouse'?: boolean;
    /**
     * 配偶者の年収
     * @type {number}
     * @memberof Crew
     */
    'spouse_yearly_income'?: number;
    /**
     * 報酬月額（通貨）
     * @type {number}
     * @memberof Crew
     */
    'monthly_income_currency'?: number;
    /**
     * 報酬月額（現物）
     * @type {number}
     * @memberof Crew
     */
    'monthly_income_goods'?: number;
    /**
     * 
     * @type {PaymentPeriod}
     * @memberof Crew
     */
    'payment_period'?: PaymentPeriod;
    /**
     * 標準報酬月額の改定年月
     * @type {string}
     * @memberof Crew
     */
    'monthly_standard_income_updated_at'?: string;
    /**
     * 健康保険の標準報酬月額
     * @type {number}
     * @memberof Crew
     */
    'monthly_standard_income_hel'?: number;
    /**
     * 厚生年金の標準報酬月額
     * @type {number}
     * @memberof Crew
     */
    'monthly_standard_income_pns'?: number;
    /**
     * 通勤経路
     * @type {string}
     * @memberof Crew
     */
    'nearest_station_and_line'?: string;
    /**
     * 通勤手当1の定期券代
     * @type {number}
     * @memberof Crew
     */
    'commutation_1_expenses'?: number;
    /**
     * 通勤手当1の期間
     * @type {string}
     * @memberof Crew
     */
    'commutation_1_period'?: CrewCommutation1PeriodEnum;
    /**
     * 通勤手当1の片道運賃
     * @type {number}
     * @memberof Crew
     */
    'commutation_1_single_fare'?: number;
    /**
     * 通勤手当2の定期券代
     * @type {number}
     * @memberof Crew
     */
    'commutation_2_expenses'?: number;
    /**
     * 通勤手当2の期間
     * @type {string}
     * @memberof Crew
     */
    'commutation_2_period'?: CrewCommutation2PeriodEnum;
    /**
     * 通勤手当2の片道運賃
     * @type {number}
     * @memberof Crew
     */
    'commutation_2_single_fare'?: number;
    /**
     * 在留資格情報：姓
     * @type {string}
     * @memberof Crew
     */
    'foreign_resident_last_name'?: string;
    /**
     * 在留資格情報：名
     * @type {string}
     * @memberof Crew
     */
    'foreign_resident_first_name'?: string;
    /**
     * 在留資格情報：ミドルネーム
     * @type {string}
     * @memberof Crew
     */
    'foreign_resident_middle_name'?: string;
    /**
     * 在留カード番号
     * @type {string}
     * @memberof Crew
     */
    'foreign_resident_card_number'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'foreign_resident_card_image1'?: Attachment;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'foreign_resident_card_image2'?: Attachment;
    /**
     * 国籍 / 国籍コード
     * @type {string}
     * @memberof Crew
     */
    'nationality_code'?: string;
    /**
     * 在留資格
     * @type {string}
     * @memberof Crew
     */
    'resident_status_type'?: string;
    /**
     * 在留資格不明理由
     * @type {string}
     * @memberof Crew
     */
    'resident_status_other_reason'?: string;
    /**
     * 在留期日
     * @type {string}
     * @memberof Crew
     */
    'resident_end_at'?: string;
    /**
     * 資格外活動許可の有無
     * @type {string}
     * @memberof Crew
     */
    'having_ex_activity_permission'?: CrewHavingExActivityPermissionEnum;
    /**
     * 派遣・請負就労区分
     * @type {string}
     * @memberof Crew
     */
    'other_be_workable_type'?: CrewOtherBeWorkableTypeEnum;
    /**
     * 給与振込口座
     * @type {Array<BankAccount>}
     * @memberof Crew
     */
    'bank_accounts'?: Array<BankAccount>;
    /**
     * 部署
     * @type {string}
     * @memberof Crew
     */
    'department'?: string;
    /**
     * 部署
     * @type {Array<Department>}
     * @memberof Crew
     */
    'departments'?: Array<Department>;
    /**
     * 契約種別
     * @type {string}
     * @memberof Crew
     */
    'contract_type'?: CrewContractTypeEnum;
    /**
     * 契約開始日
     * @type {string}
     * @memberof Crew
     */
    'contract_start_on'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof Crew
     */
    'contract_end_on'?: string;
    /**
     * 契約更新の有無
     * @type {string}
     * @memberof Crew
     */
    'contract_renewal_type'?: CrewContractRenewalTypeEnum;
    /**
     * 障害者区分
     * @type {string}
     * @memberof Crew
     */
    'handicapped_type'?: CrewHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof Crew
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof Crew
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'handicapped_image'?: Attachment;
    /**
     * 勤労学生フラグ
     * @type {boolean}
     * @memberof Crew
     */
    'working_student_flag'?: boolean;
    /**
     * 勤労学生：学校名
     * @type {string}
     * @memberof Crew
     */
    'school_name'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Crew
     */
    'student_card_image'?: Attachment;
    /**
     * 勤労学生：入学年月日
     * @type {string}
     * @memberof Crew
     */
    'enrolled_at'?: string;
    /**
     * 勤労学生：所得の見積額
     * @type {number}
     * @memberof Crew
     */
    'working_student_income'?: number;
    /**
     * 給与所得フラグ
     * @type {boolean}
     * @memberof Crew
     */
    'employment_income_flag'?: boolean;
    /**
     * 事業所得フラグ
     * @type {boolean}
     * @memberof Crew
     */
    'business_income_flag'?: boolean;
    /**
     * 配当所得フラグ
     * @type {boolean}
     * @memberof Crew
     */
    'devidend_income_flag'?: boolean;
    /**
     * 不動産所得フラグ
     * @type {boolean}
     * @memberof Crew
     */
    'estate_income_flag'?: boolean;
    /**
     * 寡婦・ひとり親
     * @type {string}
     * @memberof Crew
     */
    'widow_type'?: CrewWidowTypeEnum;
    /**
     * 寡婦・ひとり親の理由
     * @type {string}
     * @memberof Crew
     */
    'widow_reason_type'?: CrewWidowReasonTypeEnum;
    /**
     * 寡婦・ひとり親の備考
     * @type {string}
     * @memberof Crew
     */
    'widow_memo'?: string;
    /**
     * カスタム項目
     * @type {Array<CrewCustomField>}
     * @memberof Crew
     */
    'custom_fields'?: Array<CrewCustomField>;
    /**
     * 作成日
     * @type {string}
     * @memberof Crew
     */
    'created_at'?: string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof Crew
     */
    'updated_at'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewEmpTypeEnum {
    BoardMember = 'board_member',
    FullTimer = 'full_timer',
    ContractWorker = 'contract_worker',
    Permatemp = 'permatemp',
    PartTimer = 'part_timer',
    OutsourcingContractor = 'outsourcing_contractor',
    Etc = 'etc'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewEmpStatusEnum {
    Employed = 'employed',
    Absent = 'absent',
    Retired = 'retired'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewEmpInsInsuredPersonNumberUnknownReasonTypeEnum {
    NoWorkExperience = 'no_work_experience',
    NeverJoined = 'never_joined',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewBasicPensionNumberUnknownReasonTypeEnum {
    NonPensionable = 'non_pensionable',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewCommutation1PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewCommutation2PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewHavingExActivityPermissionEnum {
    Permitted = 'permitted',
    None = 'none'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewOtherBeWorkableTypeEnum {
    OtherBeWorkable = 'other_be_workable',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewContractTypeEnum {
    Unlimited = 'unlimited',
    FixedTerm = 'fixed_term'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewContractRenewalTypeEnum {
    Renewal = 'renewal',
    None = 'none',
    AutoRenewal = 'auto_renewal'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewWidowTypeEnum {
    Widow = 'widow',
    SpecialWidow = 'special_widow',
    Widower = 'widower',
    SingleParent = 'single_parent'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewWidowReasonTypeEnum {
    Divorce = 'divorce',
    Bereavement = 'bereavement',
    Missing = 'missing',
    Unmarried = 'unmarried'
}

/**
 * 
 * @export
 * @interface CrewCustomEnumFieldTemplateElement
 */
export interface CrewCustomEnumFieldTemplateElement {
    /**
     * ドロップダウンリスト項目ID
     * @type {string}
     * @memberof CrewCustomEnumFieldTemplateElement
     */
    'id': string;
    /**
     * 名称
     * @type {string}
     * @memberof CrewCustomEnumFieldTemplateElement
     */
    'name': string;
    /**
     * 物理名称
     * @type {string}
     * @memberof CrewCustomEnumFieldTemplateElement
     */
    'physical_name'?: string;
    /**
     * ポジション
     * @type {number}
     * @memberof CrewCustomEnumFieldTemplateElement
     */
    'position': number;
}
/**
 * 
 * @export
 * @interface CrewCustomField
 */
export interface CrewCustomField {
    /**
     * 設定値。テンプレート種別に応じた形式になります。
     * @type {string}
     * @memberof CrewCustomField
     */
    'value'?: string;
    /**
     * 
     * @type {CrewCustomFieldTemplate}
     * @memberof CrewCustomField
     */
    'template'?: CrewCustomFieldTemplate;
}
/**
 * 
 * @export
 * @interface CrewCustomFieldParam
 */
export interface CrewCustomFieldParam {
    /**
     * 設定値。テンプレート種別に応じた形式になります。
     * @type {string}
     * @memberof CrewCustomFieldParam
     */
    'value'?: string;
    /**
     * 設定先のテンプレートID
     * @type {string}
     * @memberof CrewCustomFieldParam
     */
    'template_id': string;
    /**
     * テンプレート種別がファイルの場合の、ファイル名
     * @type {string}
     * @memberof CrewCustomFieldParam
     */
    'file_name'?: string;
}
/**
 * CrewCustomFieldTemplate model
 * @export
 * @interface CrewCustomFieldTemplate
 */
export interface CrewCustomFieldTemplate {
    /**
     * 従業員カスタム項目ID
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'id': string;
    /**
     * 項目名
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'name': string;
    /**
     * 入力タイプ
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'type': CrewCustomFieldTemplateTypeEnum;
    /**
     * ドロップダウン項目
     * @type {Array<CrewCustomEnumFieldTemplateElement>}
     * @memberof CrewCustomFieldTemplate
     */
    'elements'?: Array<CrewCustomEnumFieldTemplateElement>;
    /**
     * 所属する従業員カスタム項目グループのID。group_id か group のいずれかが出力されます。
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'group_id': string;
    /**
     * 
     * @type {CrewCustomFieldTemplateGroup}
     * @memberof CrewCustomFieldTemplate
     */
    'group'?: CrewCustomFieldTemplateGroup;
    /**
     * 入力ヒント
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'hint'?: string;
    /**
     * 数値の場合の有効桁数
     * @type {number}
     * @memberof CrewCustomFieldTemplate
     */
    'scale'?: number;
    /**
     * 入力された数値を3桁ごとにカンマで区切って表示
     * @type {boolean}
     * @memberof CrewCustomFieldTemplate
     */
    'separated_by_commas'?: boolean;
    /**
     * ポジション
     * @type {number}
     * @memberof CrewCustomFieldTemplate
     */
    'position': number;
    /**
     * 最終更新日
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'updated_at': string;
    /**
     * 作成日
     * @type {string}
     * @memberof CrewCustomFieldTemplate
     */
    'created_at': string;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewCustomFieldTemplateTypeEnum {
    Date = 'date',
    Decimal = 'decimal',
    Enum = 'enum',
    File = 'file',
    String = 'string',
    Text = 'text'
}

/**
 * CrewCustomFieldTemplateGroup model
 * @export
 * @interface CrewCustomFieldTemplateGroup
 */
export interface CrewCustomFieldTemplateGroup {
    /**
     * 従業員カスタム項目グループID
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'id'?: string;
    /**
     * カスタム項目グループ名
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'name': string;
    /**
     * ポジション
     * @type {number}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'position'?: number;
    /**
     * アクセス種別
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'access_type'?: CrewCustomFieldTemplateGroupAccessTypeEnum;
    /**
     * 所属している従業員カスタム項目のリスト
     * @type {Array<CrewCustomFieldTemplate>}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'templates'?: Array<CrewCustomFieldTemplate>;
    /**
     * 最終更新日
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'updated_at': string;
    /**
     * 作成日
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroup
     */
    'created_at': string;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewCustomFieldTemplateGroupAccessTypeEnum {
    ReadAndUpdate = 'read_and_update',
    Hidden = 'hidden',
    ReadAndUpdateValues = 'read_and_update_values'
}

/**
 * 
 * @export
 * @interface CrewCustomFieldTemplateGroupParams
 */
export interface CrewCustomFieldTemplateGroupParams {
    /**
     * カスタム項目グループ名
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroupParams
     */
    'name': string;
    /**
     * ポジション
     * @type {number}
     * @memberof CrewCustomFieldTemplateGroupParams
     */
    'position'?: number;
    /**
     * アクセス種別
     * @type {string}
     * @memberof CrewCustomFieldTemplateGroupParams
     */
    'access_type'?: CrewCustomFieldTemplateGroupParamsAccessTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewCustomFieldTemplateGroupParamsAccessTypeEnum {
    ReadAndUpdate = 'read_and_update',
    Hidden = 'hidden',
    ReadAndUpdateValues = 'read_and_update_values'
}

/**
 * 
 * @export
 * @interface CrewCustomFieldTemplateParams
 */
export interface CrewCustomFieldTemplateParams {
    /**
     * 項目名
     * @type {string}
     * @memberof CrewCustomFieldTemplateParams
     */
    'name': string;
    /**
     * 入力タイプ
     * @type {string}
     * @memberof CrewCustomFieldTemplateParams
     */
    'type': CrewCustomFieldTemplateParamsTypeEnum;
    /**
     * ドロップダウン項目
     * @type {Array<CrewCustomEnumFieldTemplateElement>}
     * @memberof CrewCustomFieldTemplateParams
     */
    'elements'?: Array<CrewCustomEnumFieldTemplateElement>;
    /**
     * 所属する従業員カスタム項目グループのID。group_id か group のいずれかが出力されます。
     * @type {string}
     * @memberof CrewCustomFieldTemplateParams
     */
    'group_id': string;
    /**
     * 入力ヒント
     * @type {string}
     * @memberof CrewCustomFieldTemplateParams
     */
    'hint'?: string;
    /**
     * 数値の場合の有効桁数
     * @type {number}
     * @memberof CrewCustomFieldTemplateParams
     */
    'scale'?: number;
    /**
     * 入力された数値を3桁ごとにカンマで区切って表示
     * @type {boolean}
     * @memberof CrewCustomFieldTemplateParams
     */
    'separated_by_commas'?: boolean;
    /**
     * ポジション
     * @type {number}
     * @memberof CrewCustomFieldTemplateParams
     */
    'position': number;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewCustomFieldTemplateParamsTypeEnum {
    Date = 'date',
    Decimal = 'decimal',
    Enum = 'enum',
    File = 'file',
    String = 'string',
    Text = 'text'
}

/**
 * CrewInputForm model
 * @export
 * @interface CrewInputForm
 */
export interface CrewInputForm {
    /**
     * 収集フォームID
     * @type {string}
     * @memberof CrewInputForm
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CrewInputForm
     */
    'preset_type'?: CrewInputFormPresetTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CrewInputForm
     */
    'form_type': CrewInputFormFormTypeEnum;
    /**
     * 名称
     * @type {string}
     * @memberof CrewInputForm
     */
    'name': string;
    /**
     * マイナンバーの提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'with_my_number'?: boolean;
    /**
     * 従業員本人のマイナンバーを提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_my_number_required'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_my_number_required'?: boolean;
    /**
     * 従業員本人の番号確認書類の提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_my_number_card_required'?: boolean;
    /**
     * 従業員本人の身元確認書類の提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_identification_required'?: boolean;
    /**
     * 従業員本人のマイナンバーの利用目的が「健康保険・厚生年金保険関係届出事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_is_for_hel_ins'?: boolean;
    /**
     * 従業員本人のマイナンバーの利用目的が「雇用保険関係届出事務」が該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_is_for_emp_ins'?: boolean;
    /**
     * 従業員本人のマイナンバーの利用目的が「労働者災害補償保険法関係届出事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_is_for_acc_ins'?: boolean;
    /**
     * 従業員本人のマイナンバーの利用目的が「利用目的：源泉徴収に係る事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_is_for_tax_deduction'?: boolean;
    /**
     * 従業員本人のマイナンバーの利用目的が「持株会にかかる金融商品取引に関する法定書類の作成・提供事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'crew_is_for_shareholding'?: boolean;
    /**
     * 被扶養者（配偶者含む）の番号確認書類の提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_my_number_card_required'?: boolean;
    /**
     * 被扶養者（配偶者含む）の身元確認書類の提出を依頼するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_identification_required'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの利用目的が「健康保険・厚生年金保険関係届出事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_is_for_hel_ins'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの利用目的が「雇用保険関係届出事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_is_for_emp_ins'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの利用目的が「労働者災害補償保険法関係届出事務に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_is_for_acc_ins'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの利用目的が「源泉徴収に係る事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_is_for_tax_deduction'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの利用目的が「持株会にかかる金融商品取引に関する法定書類の作成・提供事務」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_is_for_shareholding'?: boolean;
    /**
     * 被扶養者（配偶者含む）のマイナンバーの利用目的が「国民年金第3号被保険者関係届出事務（配偶者がいる場合）」に該当するか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'dependents_is_for_cat3_ins'?: boolean;
    /**
     * 
     * @type {CrewInputFormFieldGroup}
     * @memberof CrewInputForm
     */
    'field_groups'?: CrewInputFormFieldGroup;
    /**
     * 紐づくメールフォーマットのID。mail_format_id か mail_format のいずれかが出力されます。
     * @type {string}
     * @memberof CrewInputForm
     */
    'mail_format_id': string;
    /**
     * 
     * @type {MailFormat}
     * @memberof CrewInputForm
     */
    'mail_format': MailFormat;
    /**
     * 扶養しない家族も登録できるかどうか
     * @type {boolean}
     * @memberof CrewInputForm
     */
    'family_enabled'?: boolean;
    /**
     * 最終更新日
     * @type {string}
     * @memberof CrewInputForm
     */
    'updated_at'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof CrewInputForm
     */
    'created_at'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewInputFormPresetTypeEnum {
    StandardInvitation = 'standard_invitation',
    MinimalInvitation = 'minimal_invitation',
    FamilyWorkflow = 'family_workflow'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewInputFormFormTypeEnum {
    Invitation = 'invitation'
}

/**
 * 
 * @export
 * @interface CrewInputFormField
 */
export interface CrewInputFormField {
    /**
     * 紐づく従業員情報項目の物理名
     * @type {string}
     * @memberof CrewInputFormField
     */
    'attribute_name'?: string;
    /**
     * 項目の表示設定
     * @type {string}
     * @memberof CrewInputFormField
     */
    'display_type'?: CrewInputFormFieldDisplayTypeEnum;
    /**
     * 紐づく従業員カスタム項目テンプレートID
     * @type {string}
     * @memberof CrewInputFormField
     */
    'custom_field_template_id'?: string;
    /**
     * 
     * @type {CrewCustomFieldTemplate}
     * @memberof CrewInputFormField
     */
    'custom_field_template'?: CrewCustomFieldTemplate;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewInputFormFieldDisplayTypeEnum {
    Hidden = 'hidden',
    Optional = 'optional',
    Required = 'required'
}

/**
 * 
 * @export
 * @interface CrewInputFormFieldGroup
 */
export interface CrewInputFormFieldGroup {
    /**
     * 基本項目のグループ種別
     * @type {string}
     * @memberof CrewInputFormFieldGroup
     */
    'basic_field_group_type'?: string;
    /**
     * ヒント
     * @type {string}
     * @memberof CrewInputFormFieldGroup
     */
    'hint'?: string;
    /**
     * ポジション
     * @type {number}
     * @memberof CrewInputFormFieldGroup
     */
    'position'?: number;
    /**
     * 
     * @type {CrewInputFormField}
     * @memberof CrewInputFormFieldGroup
     */
    'fields'?: CrewInputFormField;
    /**
     * 紐づく従業員カスタム項目テンプレートグループID
     * @type {number}
     * @memberof CrewInputFormFieldGroup
     */
    'custom_field_template_group_id'?: number;
    /**
     * 
     * @type {CrewCustomFieldTemplateGroup}
     * @memberof CrewInputFormFieldGroup
     */
    'custom_field_template_group'?: CrewCustomFieldTemplateGroup;
}
/**
 * 
 * @export
 * @interface CrewParams
 */
export interface CrewParams {
    /**
     * ユーザーID
     * @type {string}
     * @memberof CrewParams
     */
    'user_id'?: string;
    /**
     * 事業所ID
     * @type {string}
     * @memberof CrewParams
     */
    'biz_establishment_id'?: string;
    /**
     * 社員番号
     * @type {string}
     * @memberof CrewParams
     */
    'emp_code'?: string;
    /**
     * 雇用形態
     * @type {string}
     * @memberof CrewParams
     */
    'emp_type'?: CrewParamsEmpTypeEnum;
    /**
     * 在籍状況
     * @type {string}
     * @memberof CrewParams
     */
    'emp_status': CrewParamsEmpStatusEnum;
    /**
     * 姓
     * @type {string}
     * @memberof CrewParams
     */
    'last_name': string;
    /**
     * 名
     * @type {string}
     * @memberof CrewParams
     */
    'first_name': string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof CrewParams
     */
    'last_name_yomi': string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof CrewParams
     */
    'first_name_yomi': string;
    /**
     * ビジネスネーム：姓
     * @type {string}
     * @memberof CrewParams
     */
    'business_last_name'?: string;
    /**
     * ビジネスネーム：名
     * @type {string}
     * @memberof CrewParams
     */
    'business_first_name'?: string;
    /**
     * ビジネスネーム：姓（カタカナ）
     * @type {string}
     * @memberof CrewParams
     */
    'business_last_name_yomi'?: string;
    /**
     * ビジネスネーム：名（カタカナ）
     * @type {string}
     * @memberof CrewParams
     */
    'business_first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof CrewParams
     */
    'birth_at'?: string;
    /**
     * 戸籍上の性別
     * @type {string}
     * @memberof CrewParams
     */
    'gender': CrewParamsGenderEnum;
    /**
     * 電話番号
     * @type {string}
     * @memberof CrewParams
     */
    'tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof CrewParams
     */
    'address'?: Address;
    /**
     * 世帯主
     * @type {string}
     * @memberof CrewParams
     */
    'address_head_of_family'?: string;
    /**
     * 世帯主の続柄
     * @type {string}
     * @memberof CrewParams
     */
    'address_relation_name'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CrewParams
     */
    'email'?: string;
    /**
     * 緊急連絡先の続柄
     * @type {string}
     * @memberof CrewParams
     */
    'emergency_relation_name'?: string;
    /**
     * 緊急連絡先の姓
     * @type {string}
     * @memberof CrewParams
     */
    'emergency_last_name'?: string;
    /**
     * 緊急連絡先の名
     * @type {string}
     * @memberof CrewParams
     */
    'emergency_first_name'?: string;
    /**
     * 緊急連絡先の姓（カタカナ）
     * @type {string}
     * @memberof CrewParams
     */
    'emergency_last_name_yomi'?: string;
    /**
     * 緊急連絡先の名（カタカナ）
     * @type {string}
     * @memberof CrewParams
     */
    'emergency_first_name_yomi'?: string;
    /**
     * 緊急連絡先の電話番号
     * @type {string}
     * @memberof CrewParams
     */
    'emergency_tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof CrewParams
     */
    'emergency_address'?: Address;
    /**
     * 
     * @type {Address}
     * @memberof CrewParams
     */
    'resident_card_address'?: Address;
    /**
     * 住民票住所の世帯主
     * @type {string}
     * @memberof CrewParams
     */
    'resident_card_address_head_of_family'?: string;
    /**
     * 続柄（住民票住所の世帯主）
     * @type {string}
     * @memberof CrewParams
     */
    'resident_card_address_relation_name'?: string;
    /**
     * 役職
     * @type {string}
     * @memberof CrewParams
     */
    'position'?: string;
    /**
     * 業務内容
     * @type {string}
     * @memberof CrewParams
     */
    'occupation'?: string;
    /**
     * 入社年月日
     * @type {string}
     * @memberof CrewParams
     */
    'entered_at'?: string;
    /**
     * 退職年月日
     * @type {string}
     * @memberof CrewParams
     */
    'resigned_at'?: string;
    /**
     * 退職事由
     * @type {string}
     * @memberof CrewParams
     */
    'resigned_reason'?: string;
    /**
     * 雇用保険の被保険者番号
     * @type {string}
     * @memberof CrewParams
     */
    'emp_ins_insured_person_number'?: string;
    /**
     * 雇用保険被保険者番号未記載理由
     * @type {string}
     * @memberof CrewParams
     */
    'emp_ins_insured_person_number_unknown_reason_type'?: CrewParamsEmpInsInsuredPersonNumberUnknownReasonTypeEnum;
    /**
     * 雇用保険の資格取得年月日
     * @type {string}
     * @memberof CrewParams
     */
    'emp_ins_qualified_at'?: string;
    /**
     * 雇用保険の資格喪失年月日
     * @type {string}
     * @memberof CrewParams
     */
    'emp_ins_disqualified_at'?: string;
    /**
     * 雇用保険に加入していた会社名
     * @type {string}
     * @memberof CrewParams
     */
    'previous_workplace'?: string;
    /**
     * 雇用保険に加入していた会社の在籍開始日
     * @type {string}
     * @memberof CrewParams
     */
    'previous_employment_start_on'?: string;
    /**
     * 雇用保険に加入していた会社の在籍終了日
     * @type {string}
     * @memberof CrewParams
     */
    'previous_employment_end_on'?: string;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {number}
     * @memberof CrewParams
     */
    'soc_ins_insured_person_number'?: number;
    /**
     * 健康保険の被保険者整理番号
     * @type {number}
     * @memberof CrewParams
     */
    'hel_ins_insured_person_number'?: number;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof CrewParams
     */
    'basic_pension_number'?: string;
    /**
     * 厚生年金初加入フラグ
     * @type {boolean}
     * @memberof CrewParams
     */
    'first_enrolling_in_emp_pns_ins_flag'?: boolean;
    /**
     * 基礎年金番号未記載理由
     * @type {string}
     * @memberof CrewParams
     */
    'basic_pension_number_unknown_reason_type'?: CrewParamsBasicPensionNumberUnknownReasonTypeEnum;
    /**
     * 最初に厚生年金へ加入した会社名
     * @type {string}
     * @memberof CrewParams
     */
    'first_workplace'?: string;
    /**
     * 最初に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof CrewParams
     */
    'first_workplace_address_text'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof CrewParams
     */
    'first_employment_start_on'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof CrewParams
     */
    'first_employment_end_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社名
     * @type {string}
     * @memberof CrewParams
     */
    'last_workplace'?: string;
    /**
     * 最後に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof CrewParams
     */
    'last_workplace_address_text'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof CrewParams
     */
    'last_employment_start_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof CrewParams
     */
    'last_employment_end_on'?: string;
    /**
     * 社会保険の資格取得年月日
     * @type {string}
     * @memberof CrewParams
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の資格喪失年月日
     * @type {string}
     * @memberof CrewParams
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 配偶者の有無
     * @type {boolean}
     * @memberof CrewParams
     */
    'having_spouse'?: boolean;
    /**
     * 配偶者の年収
     * @type {number}
     * @memberof CrewParams
     */
    'spouse_yearly_income'?: number;
    /**
     * 報酬月額（通貨）
     * @type {number}
     * @memberof CrewParams
     */
    'monthly_income_currency'?: number;
    /**
     * 報酬月額（現物）
     * @type {number}
     * @memberof CrewParams
     */
    'monthly_income_goods'?: number;
    /**
     * 標準報酬月額の改定年月
     * @type {string}
     * @memberof CrewParams
     */
    'monthly_standard_income_updated_at'?: string;
    /**
     * 健康保険の標準報酬月額
     * @type {number}
     * @memberof CrewParams
     */
    'monthly_standard_income_hel'?: number;
    /**
     * 厚生年金の標準報酬月額
     * @type {number}
     * @memberof CrewParams
     */
    'monthly_standard_income_pns'?: number;
    /**
     * 通勤経路
     * @type {string}
     * @memberof CrewParams
     */
    'nearest_station_and_line'?: string;
    /**
     * 通勤手当1の定期券代
     * @type {number}
     * @memberof CrewParams
     */
    'commutation_1_expenses'?: number;
    /**
     * 通勤手当1の期間
     * @type {string}
     * @memberof CrewParams
     */
    'commutation_1_period'?: CrewParamsCommutation1PeriodEnum;
    /**
     * 通勤手当1の片道運賃
     * @type {number}
     * @memberof CrewParams
     */
    'commutation_1_single_fare'?: number;
    /**
     * 通勤手当2の定期券代
     * @type {number}
     * @memberof CrewParams
     */
    'commutation_2_expenses'?: number;
    /**
     * 通勤手当2の期間
     * @type {string}
     * @memberof CrewParams
     */
    'commutation_2_period'?: CrewParamsCommutation2PeriodEnum;
    /**
     * 通勤手当2の片道運賃
     * @type {number}
     * @memberof CrewParams
     */
    'commutation_2_single_fare'?: number;
    /**
     * 在留資格情報：姓
     * @type {string}
     * @memberof CrewParams
     */
    'foreign_resident_last_name'?: string;
    /**
     * 在留資格情報：名
     * @type {string}
     * @memberof CrewParams
     */
    'foreign_resident_first_name'?: string;
    /**
     * 在留資格情報：ミドルネーム
     * @type {string}
     * @memberof CrewParams
     */
    'foreign_resident_middle_name'?: string;
    /**
     * 在留カード番号
     * @type {string}
     * @memberof CrewParams
     */
    'foreign_resident_card_number'?: string;
    /**
     * 国籍 / 国籍コード
     * @type {string}
     * @memberof CrewParams
     */
    'nationality_code'?: string;
    /**
     * 在留資格
     * @type {string}
     * @memberof CrewParams
     */
    'resident_status_type'?: string;
    /**
     * 在留資格不明理由
     * @type {string}
     * @memberof CrewParams
     */
    'resident_status_other_reason'?: string;
    /**
     * 在留期日
     * @type {string}
     * @memberof CrewParams
     */
    'resident_end_at'?: string;
    /**
     * 資格外活動許可の有無
     * @type {string}
     * @memberof CrewParams
     */
    'having_ex_activity_permission'?: CrewParamsHavingExActivityPermissionEnum;
    /**
     * 派遣・請負就労区分
     * @type {string}
     * @memberof CrewParams
     */
    'other_be_workable_type'?: CrewParamsOtherBeWorkableTypeEnum;
    /**
     * 部署
     * @type {string}
     * @memberof CrewParams
     */
    'department'?: string;
    /**
     * 契約種別
     * @type {string}
     * @memberof CrewParams
     */
    'contract_type'?: CrewParamsContractTypeEnum;
    /**
     * 契約開始日
     * @type {string}
     * @memberof CrewParams
     */
    'contract_start_on'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof CrewParams
     */
    'contract_end_on'?: string;
    /**
     * 契約更新の有無
     * @type {string}
     * @memberof CrewParams
     */
    'contract_renewal_type'?: CrewParamsContractRenewalTypeEnum;
    /**
     * 障害者区分
     * @type {string}
     * @memberof CrewParams
     */
    'handicapped_type'?: CrewParamsHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof CrewParams
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof CrewParams
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 勤労学生フラグ
     * @type {boolean}
     * @memberof CrewParams
     */
    'working_student_flag'?: boolean;
    /**
     * 勤労学生：学校名
     * @type {string}
     * @memberof CrewParams
     */
    'school_name'?: string;
    /**
     * 勤労学生：入学年月日
     * @type {string}
     * @memberof CrewParams
     */
    'enrolled_at'?: string;
    /**
     * 勤労学生：所得の見積額
     * @type {number}
     * @memberof CrewParams
     */
    'working_student_income'?: number;
    /**
     * 給与所得フラグ
     * @type {boolean}
     * @memberof CrewParams
     */
    'employment_income_flag'?: boolean;
    /**
     * 事業所得フラグ
     * @type {boolean}
     * @memberof CrewParams
     */
    'business_income_flag'?: boolean;
    /**
     * 配当所得フラグ
     * @type {boolean}
     * @memberof CrewParams
     */
    'devidend_income_flag'?: boolean;
    /**
     * 不動産所得フラグ
     * @type {boolean}
     * @memberof CrewParams
     */
    'estate_income_flag'?: boolean;
    /**
     * 寡婦・ひとり親
     * @type {string}
     * @memberof CrewParams
     */
    'widow_type'?: CrewParamsWidowTypeEnum;
    /**
     * 寡婦・ひとり親の理由
     * @type {string}
     * @memberof CrewParams
     */
    'widow_reason_type'?: CrewParamsWidowReasonTypeEnum;
    /**
     * 寡婦・ひとり親の備考
     * @type {string}
     * @memberof CrewParams
     */
    'widow_memo'?: string;
    /**
     * 雇用形態のID
     * @type {string}
     * @memberof CrewParams
     */
    'employment_type_id'?: string;
    /**
     * 所属する部署のID
     * @type {Array<string>}
     * @memberof CrewParams
     */
    'department_ids'?: Array<string>;
    /**
     * 給与支給形態
     * @type {string}
     * @memberof CrewParams
     */
    'payment_period_id'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'profile_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'resume1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'resume2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'identity_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'identity_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'address_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'emp_ins_insured_person_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'basic_pension_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'foreign_resident_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'foreign_resident_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'handicapped_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof CrewParams
     */
    'student_card_image'?: AttachmentParams;
    /**
     * 給与振込口座
     * @type {Array<BankAccount>}
     * @memberof CrewParams
     */
    'bank_accounts'?: Array<BankAccount>;
    /**
     * カスタム項目
     * @type {Array<CrewCustomFieldParam>}
     * @memberof CrewParams
     */
    'custom_fields'?: Array<CrewCustomFieldParam>;
}

/**
    * @export
    * @enum {string}
    */
export enum CrewParamsEmpTypeEnum {
    BoardMember = 'board_member',
    FullTimer = 'full_timer',
    ContractWorker = 'contract_worker',
    Permatemp = 'permatemp',
    PartTimer = 'part_timer',
    OutsourcingContractor = 'outsourcing_contractor',
    Etc = 'etc'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsEmpStatusEnum {
    Employed = 'employed',
    Absent = 'absent',
    Retired = 'retired'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsEmpInsInsuredPersonNumberUnknownReasonTypeEnum {
    NoWorkExperience = 'no_work_experience',
    NeverJoined = 'never_joined',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsBasicPensionNumberUnknownReasonTypeEnum {
    NonPensionable = 'non_pensionable',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsCommutation1PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsCommutation2PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsHavingExActivityPermissionEnum {
    Permitted = 'permitted',
    None = 'none'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsOtherBeWorkableTypeEnum {
    OtherBeWorkable = 'other_be_workable',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsContractTypeEnum {
    Unlimited = 'unlimited',
    FixedTerm = 'fixed_term'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsContractRenewalTypeEnum {
    Renewal = 'renewal',
    None = 'none',
    AutoRenewal = 'auto_renewal'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsWidowTypeEnum {
    Widow = 'widow',
    SpecialWidow = 'special_widow',
    Widower = 'widower',
    SingleParent = 'single_parent'
}
/**
    * @export
    * @enum {string}
    */
export enum CrewParamsWidowReasonTypeEnum {
    Divorce = 'divorce',
    Bereavement = 'bereavement',
    Missing = 'missing',
    Unmarried = 'unmarried'
}

/**
 * 
 * @export
 * @interface Deduction
 */
export interface Deduction {
    /**
     * 名前
     * @type {string}
     * @memberof Deduction
     */
    'name': string;
    /**
     * 控除金額
     * @type {number}
     * @memberof Deduction
     */
    'amount': number;
}
/**
 * Department model
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 部署ID
     * @type {string}
     * @memberof Department
     */
    'id': string;
    /**
     * 名称
     * @type {string}
     * @memberof Department
     */
    'name': string;
    /**
     * ポジション
     * @type {number}
     * @memberof Department
     */
    'position': number;
    /**
     * コード
     * @type {string}
     * @memberof Department
     */
    'code'?: string;
    /**
     * 
     * @type {Department}
     * @memberof Department
     */
    'parent'?: Department;
    /**
     * 子の部署
     * @type {Array<Department>}
     * @memberof Department
     */
    'children'?: Array<Department>;
    /**
     * 最終更新日
     * @type {string}
     * @memberof Department
     */
    'updated_at': string;
    /**
     * 作成日
     * @type {string}
     * @memberof Department
     */
    'created_at': string;
}
/**
 * Dependent model
 * @export
 * @interface Dependent
 */
export interface Dependent {
    /**
     * 家族ID
     * @type {string}
     * @memberof Dependent
     */
    'id': string;
    /**
     * 紐づく従業員のID
     * @type {string}
     * @memberof Dependent
     */
    'crew_id': string;
    /**
     * 続柄名（※ 非推奨項目。後方互換を保つため参照のみ可能）
     * @type {string}
     * @memberof Dependent
     */
    'relation_name'?: string;
    /**
     * 
     * @type {DependentRelation}
     * @memberof Dependent
     */
    'relation'?: DependentRelation;
    /**
     * 配偶者かどうか
     * @type {boolean}
     * @memberof Dependent
     */
    'is_spouse'?: boolean;
    /**
     * 姓
     * @type {string}
     * @memberof Dependent
     */
    'last_name'?: string;
    /**
     * 名
     * @type {string}
     * @memberof Dependent
     */
    'first_name'?: string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof Dependent
     */
    'last_name_yomi'?: string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof Dependent
     */
    'first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof Dependent
     */
    'birth_at'?: string;
    /**
     * 住所変更年月日
     * @type {string}
     * @memberof Dependent
     */
    'moved_at'?: string;
    /**
     * 性別
     * @type {string}
     * @memberof Dependent
     */
    'gender'?: DependentGenderEnum;
    /**
     * 職業
     * @type {string}
     * @memberof Dependent
     */
    'job'?: string;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof Dependent
     */
    'basic_pension_number'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'basic_pension_number_image'?: Attachment;
    /**
     * 同居・別居の別
     * @type {string}
     * @memberof Dependent
     */
    'live_together_type'?: DependentLiveTogetherTypeEnum;
    /**
     * 
     * @type {Address}
     * @memberof Dependent
     */
    'address'?: Address;
    /**
     * 電話番号
     * @type {string}
     * @memberof Dependent
     */
    'tel_number'?: string;
    /**
     * 障害者区分
     * @type {string}
     * @memberof Dependent
     */
    'handicapped_type'?: DependentHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof Dependent
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof Dependent
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'handicapped_image'?: Attachment;
    /**
     * 海外居住時の送金額（単位：円）
     * @type {number}
     * @memberof Dependent
     */
    'remittance_to_relative'?: number;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'remittance_image1'?: Attachment;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'remittance_image2'?: Attachment;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'remittance_image3'?: Attachment;
    /**
     * 社会保険の扶養状況
     * @type {string}
     * @memberof Dependent
     */
    'social_insurance_support_type'?: DependentSocialInsuranceSupportTypeEnum;
    /**
     * 社会保険の年間収入（単位:円）
     * @type {number}
     * @memberof Dependent
     */
    'income'?: number;
    /**
     * 社会保険の月間収入（単位:円）
     * @type {number}
     * @memberof Dependent
     */
    'monthly_income'?: number;
    /**
     * 社会保険の被扶養者になった日
     * @type {string}
     * @memberof Dependent
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の被扶養者になった理由
     * @type {string}
     * @memberof Dependent
     */
    'soc_ins_qualified_reason'?: string;
    /**
     * 社会保険の被扶養者でなくなった日
     * @type {string}
     * @memberof Dependent
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 社会保険の扶養から削除された理由
     * @type {string}
     * @memberof Dependent
     */
    'disqualified_reason_type'?: DependentDisqualifiedReasonTypeEnum;
    /**
     * 社会保険の扶養から削除された理由（その他の場合）
     * @type {string}
     * @memberof Dependent
     */
    'disqualified_reason'?: string;
    /**
     * 税法上の扶養状況
     * @type {string}
     * @memberof Dependent
     */
    'tax_law_support_type'?: DependentTaxLawSupportTypeEnum;
    /**
     * 税法上の年間所得見積額（単位:円）
     * @type {number}
     * @memberof Dependent
     */
    'tax_deduction_income'?: number;
    /**
     * 税法上の被扶養者になった日
     * @type {string}
     * @memberof Dependent
     */
    'tax_deduction_qualified_at'?: string;
    /**
     * 税法上の被扶養者になった理由
     * @type {string}
     * @memberof Dependent
     */
    'tax_deduction_qualified_reason'?: string;
    /**
     * 税法上の被扶養者でなくなった日
     * @type {string}
     * @memberof Dependent
     */
    'tax_deduction_disqualified_at'?: string;
    /**
     * 税法上の扶養から削除された理由
     * @type {string}
     * @memberof Dependent
     */
    'tax_deduction_disqualified_reason_type'?: DependentTaxDeductionDisqualifiedReasonTypeEnum;
    /**
     * 税法上の扶養から削除された理由（その他の場合）
     * @type {string}
     * @memberof Dependent
     */
    'tax_deduction_disqualified_reason'?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'maternity_handbook_image'?: Attachment;
    /**
     * 
     * @type {Attachment}
     * @memberof Dependent
     */
    'kinship_image'?: Attachment;
    /**
     * 作成日
     * @type {string}
     * @memberof Dependent
     */
    'created_at'?: string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof Dependent
     */
    'updated_at'?: string;
    /**
     * 家族コード
     * @type {string}
     * @memberof Dependent
     */
    'code'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DependentGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum DependentLiveTogetherTypeEnum {
    Together = 'living_together',
    Separately = 'living_separately'
}
/**
    * @export
    * @enum {string}
    */
export enum DependentHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped',
    SpecialHandicappedLivingTogether = 'special_handicapped_living_together'
}
/**
    * @export
    * @enum {string}
    */
export enum DependentSocialInsuranceSupportTypeEnum {
    Unsupported = 'unsupported',
    Supported = 'supported',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum DependentDisqualifiedReasonTypeEnum {
    Death = 'death',
    Divorce = 'divorce',
    Employment = 'employment',
    IncomeIncrease = 'income_increase',
    AgingOut75 = 'aging_out_75',
    DisabilityCertificate = 'disability_certificate',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum DependentTaxLawSupportTypeEnum {
    Unsupported = 'unsupported',
    Supported = 'supported',
    SpecialSpousalExemption = 'special_spousal_exemption',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum DependentTaxDeductionDisqualifiedReasonTypeEnum {
    Death = 'death',
    Divorce = 'divorce',
    Employment = 'employment',
    IncomeIncrease = 'income_increase',
    AgingOut75 = 'aging_out_75',
    DisabilityCertificate = 'disability_certificate',
    Others = 'others'
}

/**
 * DependentRelation model
 * @export
 * @interface DependentRelation
 */
export interface DependentRelation {
    /**
     * 続柄ID
     * @type {string}
     * @memberof DependentRelation
     */
    'id'?: string;
    /**
     * 続柄名
     * @type {string}
     * @memberof DependentRelation
     */
    'name'?: string;
    /**
     * プリセット続柄
     * @type {string}
     * @memberof DependentRelation
     */
    'preset_type'?: string;
    /**
     * 子であるかどうか
     * @type {boolean}
     * @memberof DependentRelation
     */
    'is_child'?: boolean;
    /**
     * ポジション
     * @type {number}
     * @memberof DependentRelation
     */
    'position'?: number;
    /**
     * 作成日
     * @type {string}
     * @memberof DependentRelation
     */
    'created_at'?: string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof DependentRelation
     */
    'updated_at'?: string;
}
/**
 * EmploymentType model
 * @export
 * @interface EmploymentType
 */
export interface EmploymentType {
    /**
     * 雇用形態ID
     * @type {string}
     * @memberof EmploymentType
     */
    'id'?: string;
    /**
     * 名称
     * @type {string}
     * @memberof EmploymentType
     */
    'name': string;
    /**
     * プリセット種別
     * @type {string}
     * @memberof EmploymentType
     */
    'preset_type'?: EmploymentTypePresetTypeEnum;
    /**
     * 最終更新日
     * @type {string}
     * @memberof EmploymentType
     */
    'updated_at': string;
    /**
     * 作成日
     * @type {string}
     * @memberof EmploymentType
     */
    'created_at': string;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentTypePresetTypeEnum {
    BoardMember = 'board_member',
    FullTimer = 'full_timer',
    ContractWorker = 'contract_worker',
    Permatemp = 'permatemp',
    PartTimer = 'part_timer',
    OutsourcingContractor = 'outsourcing_contractor',
    Etc = 'etc'
}

/**
 * 
 * @export
 * @interface GeneralSetting
 */
export interface GeneralSetting {
    /**
     * 招待承認時に「電子交付に関する同意」を入力してもらう
     * @type {boolean}
     * @memberof GeneralSetting
     */
    'show_agreement_for_electronic_delivery_in_invitation': boolean;
    /**
     * 多言語化
     * @type {boolean}
     * @memberof GeneralSetting
     */
    'multilingualization': boolean;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * サイズ種別
     * @type {string}
     * @memberof Image
     */
    'size_type'?: ImageSizeTypeEnum;
    /**
     * 高さ
     * @type {number}
     * @memberof Image
     */
    'height'?: number;
    /**
     * 幅
     * @type {number}
     * @memberof Image
     */
    'width'?: number;
    /**
     * URL（有効期限付き）
     * @type {string}
     * @memberof Image
     */
    'url'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ImageSizeTypeEnum {
    Thumb = 'thumb',
    Small = 'small',
    Medium = 'medium',
    Large = 'large',
    Original = 'original'
}

/**
 * JobTitle model
 * @export
 * @interface JobTitle
 */
export interface JobTitle {
    /**
     * 役職ID
     * @type {string}
     * @memberof JobTitle
     */
    'id'?: string;
    /**
     * 役職の名前
     * @type {string}
     * @memberof JobTitle
     */
    'name'?: string;
    /**
     * 役職のランク (1 ~ 99999)
     * @type {number}
     * @memberof JobTitle
     */
    'rank'?: number;
    /**
     * 作成日
     * @type {string}
     * @memberof JobTitle
     */
    'created_at': string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof JobTitle
     */
    'updated_at': string;
}
/**
 * MailFormat model
 * @export
 * @interface MailFormat
 */
export interface MailFormat {
    /**
     * メールフォーマットID
     * @type {string}
     * @memberof MailFormat
     */
    'id': string;
    /**
     * メール種別
     * @type {string}
     * @memberof MailFormat
     */
    'mail_type': MailFormatMailTypeEnum;
    /**
     * 名称
     * @type {string}
     * @memberof MailFormat
     */
    'name': string;
    /**
     * 所属している従業員情報収集フォームのリスト
     * @type {Array<CrewInputForm>}
     * @memberof MailFormat
     */
    'crew_input_forms'?: Array<CrewInputForm>;
    /**
     * 最終更新日
     * @type {string}
     * @memberof MailFormat
     */
    'updated_at'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof MailFormat
     */
    'created_at'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MailFormatMailTypeEnum {
    Invitation = 'invitation'
}

/**
 * 部分更新
 * @export
 * @interface PatchV1CrewCustomFieldTemplates
 */
export interface PatchV1CrewCustomFieldTemplates {
    /**
     * 項目名
     * @type {string}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'name': string;
    /**
     * 入力タイプ
     * @type {string}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'type': PatchV1CrewCustomFieldTemplatesTypeEnum;
    /**
     * ドロップダウン項目
     * @type {Array<CrewCustomEnumFieldTemplateElement>}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'elements'?: Array<CrewCustomEnumFieldTemplateElement>;
    /**
     * 所属する従業員カスタム項目グループのID。group_id か group のいずれかが出力されます。
     * @type {string}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'group_id': string;
    /**
     * 入力ヒント
     * @type {string}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'hint'?: string;
    /**
     * 数値の場合の有効桁数
     * @type {number}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'scale'?: number;
    /**
     * 入力された数値を3桁ごとにカンマで区切って表示
     * @type {boolean}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'separated_by_commas'?: boolean;
    /**
     * ポジション
     * @type {number}
     * @memberof PatchV1CrewCustomFieldTemplates
     */
    'position': number;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewCustomFieldTemplatesTypeEnum {
    Date = 'date',
    Decimal = 'decimal',
    Enum = 'enum',
    File = 'file',
    String = 'string',
    Text = 'text'
}

/**
 * 部分更新
 * @export
 * @interface PatchV1Crews
 */
export interface PatchV1Crews {
    /**
     * ユーザーID
     * @type {string}
     * @memberof PatchV1Crews
     */
    'user_id'?: string;
    /**
     * 事業所ID
     * @type {string}
     * @memberof PatchV1Crews
     */
    'biz_establishment_id'?: string;
    /**
     * 社員番号
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_code'?: string;
    /**
     * 雇用形態
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_type'?: PatchV1CrewsEmpTypeEnum;
    /**
     * 在籍状況
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_status': PatchV1CrewsEmpStatusEnum;
    /**
     * 姓
     * @type {string}
     * @memberof PatchV1Crews
     */
    'last_name': string;
    /**
     * 名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'first_name': string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'last_name_yomi': string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'first_name_yomi': string;
    /**
     * ビジネスネーム：姓
     * @type {string}
     * @memberof PatchV1Crews
     */
    'business_last_name'?: string;
    /**
     * ビジネスネーム：名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'business_first_name'?: string;
    /**
     * ビジネスネーム：姓（カタカナ）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'business_last_name_yomi'?: string;
    /**
     * ビジネスネーム：名（カタカナ）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'business_first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'birth_at'?: string;
    /**
     * 戸籍上の性別
     * @type {string}
     * @memberof PatchV1Crews
     */
    'gender': PatchV1CrewsGenderEnum;
    /**
     * 電話番号
     * @type {string}
     * @memberof PatchV1Crews
     */
    'tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof PatchV1Crews
     */
    'address'?: Address;
    /**
     * 世帯主
     * @type {string}
     * @memberof PatchV1Crews
     */
    'address_head_of_family'?: string;
    /**
     * 世帯主の続柄
     * @type {string}
     * @memberof PatchV1Crews
     */
    'address_relation_name'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof PatchV1Crews
     */
    'email'?: string;
    /**
     * 緊急連絡先の続柄
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emergency_relation_name'?: string;
    /**
     * 緊急連絡先の姓
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emergency_last_name'?: string;
    /**
     * 緊急連絡先の名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emergency_first_name'?: string;
    /**
     * 緊急連絡先の姓（カタカナ）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emergency_last_name_yomi'?: string;
    /**
     * 緊急連絡先の名（カタカナ）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emergency_first_name_yomi'?: string;
    /**
     * 緊急連絡先の電話番号
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emergency_tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof PatchV1Crews
     */
    'emergency_address'?: Address;
    /**
     * 
     * @type {Address}
     * @memberof PatchV1Crews
     */
    'resident_card_address'?: Address;
    /**
     * 住民票住所の世帯主
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resident_card_address_head_of_family'?: string;
    /**
     * 続柄（住民票住所の世帯主）
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resident_card_address_relation_name'?: string;
    /**
     * 役職
     * @type {string}
     * @memberof PatchV1Crews
     */
    'position'?: string;
    /**
     * 業務内容
     * @type {string}
     * @memberof PatchV1Crews
     */
    'occupation'?: string;
    /**
     * 入社年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'entered_at'?: string;
    /**
     * 退職年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resigned_at'?: string;
    /**
     * 退職事由
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resigned_reason'?: string;
    /**
     * 雇用保険の被保険者番号
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_ins_insured_person_number'?: string;
    /**
     * 雇用保険被保険者番号未記載理由
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_ins_insured_person_number_unknown_reason_type'?: PatchV1CrewsEmpInsInsuredPersonNumberUnknownReasonTypeEnum;
    /**
     * 雇用保険の資格取得年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_ins_qualified_at'?: string;
    /**
     * 雇用保険の資格喪失年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'emp_ins_disqualified_at'?: string;
    /**
     * 雇用保険に加入していた会社名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'previous_workplace'?: string;
    /**
     * 雇用保険に加入していた会社の在籍開始日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'previous_employment_start_on'?: string;
    /**
     * 雇用保険に加入していた会社の在籍終了日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'previous_employment_end_on'?: string;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {number}
     * @memberof PatchV1Crews
     */
    'soc_ins_insured_person_number'?: number;
    /**
     * 健康保険の被保険者整理番号
     * @type {number}
     * @memberof PatchV1Crews
     */
    'hel_ins_insured_person_number'?: number;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof PatchV1Crews
     */
    'basic_pension_number'?: string;
    /**
     * 厚生年金初加入フラグ
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'first_enrolling_in_emp_pns_ins_flag'?: boolean;
    /**
     * 基礎年金番号未記載理由
     * @type {string}
     * @memberof PatchV1Crews
     */
    'basic_pension_number_unknown_reason_type'?: PatchV1CrewsBasicPensionNumberUnknownReasonTypeEnum;
    /**
     * 最初に厚生年金へ加入した会社名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'first_workplace'?: string;
    /**
     * 最初に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof PatchV1Crews
     */
    'first_workplace_address_text'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'first_employment_start_on'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'first_employment_end_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'last_workplace'?: string;
    /**
     * 最後に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof PatchV1Crews
     */
    'last_workplace_address_text'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'last_employment_start_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'last_employment_end_on'?: string;
    /**
     * 社会保険の資格取得年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の資格喪失年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 配偶者の有無
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'having_spouse'?: boolean;
    /**
     * 配偶者の年収
     * @type {number}
     * @memberof PatchV1Crews
     */
    'spouse_yearly_income'?: number;
    /**
     * 報酬月額（通貨）
     * @type {number}
     * @memberof PatchV1Crews
     */
    'monthly_income_currency'?: number;
    /**
     * 報酬月額（現物）
     * @type {number}
     * @memberof PatchV1Crews
     */
    'monthly_income_goods'?: number;
    /**
     * 標準報酬月額の改定年月
     * @type {string}
     * @memberof PatchV1Crews
     */
    'monthly_standard_income_updated_at'?: string;
    /**
     * 健康保険の標準報酬月額
     * @type {number}
     * @memberof PatchV1Crews
     */
    'monthly_standard_income_hel'?: number;
    /**
     * 厚生年金の標準報酬月額
     * @type {number}
     * @memberof PatchV1Crews
     */
    'monthly_standard_income_pns'?: number;
    /**
     * 通勤経路
     * @type {string}
     * @memberof PatchV1Crews
     */
    'nearest_station_and_line'?: string;
    /**
     * 通勤手当1の定期券代
     * @type {number}
     * @memberof PatchV1Crews
     */
    'commutation_1_expenses'?: number;
    /**
     * 通勤手当1の期間
     * @type {string}
     * @memberof PatchV1Crews
     */
    'commutation_1_period'?: PatchV1CrewsCommutation1PeriodEnum;
    /**
     * 通勤手当1の片道運賃
     * @type {number}
     * @memberof PatchV1Crews
     */
    'commutation_1_single_fare'?: number;
    /**
     * 通勤手当2の定期券代
     * @type {number}
     * @memberof PatchV1Crews
     */
    'commutation_2_expenses'?: number;
    /**
     * 通勤手当2の期間
     * @type {string}
     * @memberof PatchV1Crews
     */
    'commutation_2_period'?: PatchV1CrewsCommutation2PeriodEnum;
    /**
     * 通勤手当2の片道運賃
     * @type {number}
     * @memberof PatchV1Crews
     */
    'commutation_2_single_fare'?: number;
    /**
     * 在留資格情報：姓
     * @type {string}
     * @memberof PatchV1Crews
     */
    'foreign_resident_last_name'?: string;
    /**
     * 在留資格情報：名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'foreign_resident_first_name'?: string;
    /**
     * 在留資格情報：ミドルネーム
     * @type {string}
     * @memberof PatchV1Crews
     */
    'foreign_resident_middle_name'?: string;
    /**
     * 在留カード番号
     * @type {string}
     * @memberof PatchV1Crews
     */
    'foreign_resident_card_number'?: string;
    /**
     * 国籍 / 国籍コード
     * @type {string}
     * @memberof PatchV1Crews
     */
    'nationality_code'?: string;
    /**
     * 在留資格
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resident_status_type'?: string;
    /**
     * 在留資格不明理由
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resident_status_other_reason'?: string;
    /**
     * 在留期日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'resident_end_at'?: string;
    /**
     * 資格外活動許可の有無
     * @type {string}
     * @memberof PatchV1Crews
     */
    'having_ex_activity_permission'?: PatchV1CrewsHavingExActivityPermissionEnum;
    /**
     * 派遣・請負就労区分
     * @type {string}
     * @memberof PatchV1Crews
     */
    'other_be_workable_type'?: PatchV1CrewsOtherBeWorkableTypeEnum;
    /**
     * 部署
     * @type {string}
     * @memberof PatchV1Crews
     */
    'department'?: string;
    /**
     * 契約種別
     * @type {string}
     * @memberof PatchV1Crews
     */
    'contract_type'?: PatchV1CrewsContractTypeEnum;
    /**
     * 契約開始日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'contract_start_on'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'contract_end_on'?: string;
    /**
     * 契約更新の有無
     * @type {string}
     * @memberof PatchV1Crews
     */
    'contract_renewal_type'?: PatchV1CrewsContractRenewalTypeEnum;
    /**
     * 障害者区分
     * @type {string}
     * @memberof PatchV1Crews
     */
    'handicapped_type'?: PatchV1CrewsHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof PatchV1Crews
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 勤労学生フラグ
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'working_student_flag'?: boolean;
    /**
     * 勤労学生：学校名
     * @type {string}
     * @memberof PatchV1Crews
     */
    'school_name'?: string;
    /**
     * 勤労学生：入学年月日
     * @type {string}
     * @memberof PatchV1Crews
     */
    'enrolled_at'?: string;
    /**
     * 勤労学生：所得の見積額
     * @type {number}
     * @memberof PatchV1Crews
     */
    'working_student_income'?: number;
    /**
     * 給与所得フラグ
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'employment_income_flag'?: boolean;
    /**
     * 事業所得フラグ
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'business_income_flag'?: boolean;
    /**
     * 配当所得フラグ
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'devidend_income_flag'?: boolean;
    /**
     * 不動産所得フラグ
     * @type {boolean}
     * @memberof PatchV1Crews
     */
    'estate_income_flag'?: boolean;
    /**
     * 寡婦・ひとり親
     * @type {string}
     * @memberof PatchV1Crews
     */
    'widow_type'?: PatchV1CrewsWidowTypeEnum;
    /**
     * 寡婦・ひとり親の理由
     * @type {string}
     * @memberof PatchV1Crews
     */
    'widow_reason_type'?: PatchV1CrewsWidowReasonTypeEnum;
    /**
     * 寡婦・ひとり親の備考
     * @type {string}
     * @memberof PatchV1Crews
     */
    'widow_memo'?: string;
    /**
     * 雇用形態のID
     * @type {string}
     * @memberof PatchV1Crews
     */
    'employment_type_id'?: string;
    /**
     * 所属する部署のID
     * @type {Array<string>}
     * @memberof PatchV1Crews
     */
    'department_ids'?: Array<string>;
    /**
     * 給与支給形態
     * @type {string}
     * @memberof PatchV1Crews
     */
    'payment_period_id'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'profile_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'resume1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'resume2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'identity_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'identity_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'address_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'emp_ins_insured_person_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'basic_pension_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'foreign_resident_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'foreign_resident_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'handicapped_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1Crews
     */
    'student_card_image'?: AttachmentParams;
    /**
     * 給与振込口座
     * @type {Array<BankAccount>}
     * @memberof PatchV1Crews
     */
    'bank_accounts'?: Array<BankAccount>;
    /**
     * カスタム項目
     * @type {Array<CrewCustomFieldParam>}
     * @memberof PatchV1Crews
     */
    'custom_fields'?: Array<CrewCustomFieldParam>;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsEmpTypeEnum {
    BoardMember = 'board_member',
    FullTimer = 'full_timer',
    ContractWorker = 'contract_worker',
    Permatemp = 'permatemp',
    PartTimer = 'part_timer',
    OutsourcingContractor = 'outsourcing_contractor',
    Etc = 'etc'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsEmpStatusEnum {
    Employed = 'employed',
    Absent = 'absent',
    Retired = 'retired'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsEmpInsInsuredPersonNumberUnknownReasonTypeEnum {
    NoWorkExperience = 'no_work_experience',
    NeverJoined = 'never_joined',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsBasicPensionNumberUnknownReasonTypeEnum {
    NonPensionable = 'non_pensionable',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCommutation1PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCommutation2PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsHavingExActivityPermissionEnum {
    Permitted = 'permitted',
    None = 'none'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsOtherBeWorkableTypeEnum {
    OtherBeWorkable = 'other_be_workable',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsContractTypeEnum {
    Unlimited = 'unlimited',
    FixedTerm = 'fixed_term'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsContractRenewalTypeEnum {
    Renewal = 'renewal',
    None = 'none',
    AutoRenewal = 'auto_renewal'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsWidowTypeEnum {
    Widow = 'widow',
    SpecialWidow = 'special_widow',
    Widower = 'widower',
    SingleParent = 'single_parent'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsWidowReasonTypeEnum {
    Divorce = 'divorce',
    Bereavement = 'bereavement',
    Missing = 'missing',
    Unmarried = 'unmarried'
}

/**
 * 部分更新
 * @export
 * @interface PatchV1CrewsCrewIdDependents
 */
export interface PatchV1CrewsCrewIdDependents {
    /**
     * 配偶者かどうか
     * @type {boolean}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'is_spouse'?: boolean;
    /**
     * 姓
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'last_name'?: string;
    /**
     * 名
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'first_name'?: string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'last_name_yomi'?: string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'birth_at'?: string;
    /**
     * 住所変更年月日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'moved_at'?: string;
    /**
     * 性別
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'gender'?: PatchV1CrewsCrewIdDependentsGenderEnum;
    /**
     * 職業
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'job'?: string;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'basic_pension_number'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'basic_pension_number_image'?: AttachmentParams;
    /**
     * 同居・別居の別
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'live_together_type'?: PatchV1CrewsCrewIdDependentsLiveTogetherTypeEnum;
    /**
     * 
     * @type {Address}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'address'?: Address;
    /**
     * 電話番号
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tel_number'?: string;
    /**
     * 障害者区分
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'handicapped_type'?: PatchV1CrewsCrewIdDependentsHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'handicapped_image'?: AttachmentParams;
    /**
     * 海外居住時の送金額（単位：円）
     * @type {number}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'remittance_to_relative'?: number;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'remittance_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'remittance_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'remittance_image3'?: AttachmentParams;
    /**
     * 社会保険の扶養状況
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'social_insurance_support_type'?: PatchV1CrewsCrewIdDependentsSocialInsuranceSupportTypeEnum;
    /**
     * 社会保険の年間収入（単位:円）
     * @type {number}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'income'?: number;
    /**
     * 社会保険の月間収入（単位:円）
     * @type {number}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'monthly_income'?: number;
    /**
     * 社会保険の被扶養者になった日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の被扶養者になった理由
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'soc_ins_qualified_reason'?: string;
    /**
     * 社会保険の被扶養者でなくなった日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 社会保険の扶養から削除された理由
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'disqualified_reason_type'?: PatchV1CrewsCrewIdDependentsDisqualifiedReasonTypeEnum;
    /**
     * 社会保険の扶養から削除された理由（その他の場合）
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'disqualified_reason'?: string;
    /**
     * 税法上の扶養状況
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_law_support_type'?: PatchV1CrewsCrewIdDependentsTaxLawSupportTypeEnum;
    /**
     * 税法上の年間所得見積額（単位:円）
     * @type {number}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_deduction_income'?: number;
    /**
     * 税法上の被扶養者になった日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_deduction_qualified_at'?: string;
    /**
     * 税法上の被扶養者になった理由
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_deduction_qualified_reason'?: string;
    /**
     * 税法上の被扶養者でなくなった日
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_deduction_disqualified_at'?: string;
    /**
     * 税法上の扶養から削除された理由
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_deduction_disqualified_reason_type'?: PatchV1CrewsCrewIdDependentsTaxDeductionDisqualifiedReasonTypeEnum;
    /**
     * 税法上の扶養から削除された理由（その他の場合）
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'tax_deduction_disqualified_reason'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'maternity_handbook_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'kinship_image'?: AttachmentParams;
    /**
     * 続柄ID
     * @type {string}
     * @memberof PatchV1CrewsCrewIdDependents
     */
    'relation_id'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsLiveTogetherTypeEnum {
    Together = 'living_together',
    Separately = 'living_separately'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped',
    SpecialHandicappedLivingTogether = 'special_handicapped_living_together'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsSocialInsuranceSupportTypeEnum {
    Unsupported = 'unsupported',
    Supported = 'supported',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsDisqualifiedReasonTypeEnum {
    Death = 'death',
    Divorce = 'divorce',
    Employment = 'employment',
    IncomeIncrease = 'income_increase',
    AgingOut75 = 'aging_out_75',
    DisabilityCertificate = 'disability_certificate',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsTaxLawSupportTypeEnum {
    Unsupported = 'unsupported',
    Supported = 'supported',
    SpecialSpousalExemption = 'special_spousal_exemption',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PatchV1CrewsCrewIdDependentsTaxDeductionDisqualifiedReasonTypeEnum {
    Death = 'death',
    Divorce = 'divorce',
    Employment = 'employment',
    IncomeIncrease = 'income_increase',
    AgingOut75 = 'aging_out_75',
    DisabilityCertificate = 'disability_certificate',
    Others = 'others'
}

/**
 * 部分更新
 * @export
 * @interface PatchV1Departments
 */
export interface PatchV1Departments {
    /**
     * 名称
     * @type {string}
     * @memberof PatchV1Departments
     */
    'name': string;
    /**
     * ポジション
     * @type {number}
     * @memberof PatchV1Departments
     */
    'position'?: number;
    /**
     * コード
     * @type {string}
     * @memberof PatchV1Departments
     */
    'code'?: string;
    /**
     * 親の部署ID
     * @type {string}
     * @memberof PatchV1Departments
     */
    'parent_id'?: string;
}
/**
 * PaymentPeriod model
 * @export
 * @interface PaymentPeriod
 */
export interface PaymentPeriod {
    /**
     * 給与支給形態ID
     * @type {string}
     * @memberof PaymentPeriod
     */
    'id': string;
    /**
     * 名称
     * @type {string}
     * @memberof PaymentPeriod
     */
    'name'?: string;
    /**
     * 支払い期間種別
     * @type {string}
     * @memberof PaymentPeriod
     */
    'period_type'?: PaymentPeriodPeriodTypeEnum;
    /**
     * 最終更新日
     * @type {string}
     * @memberof PaymentPeriod
     */
    'updated_at': string;
    /**
     * 作成日
     * @type {string}
     * @memberof PaymentPeriod
     */
    'created_at': string;
}

/**
    * @export
    * @enum {string}
    */
export enum PaymentPeriodPeriodTypeEnum {
    Monthly = 'monthly',
    Weekly = 'weekly',
    Daily = 'daily',
    Hourly = 'hourly',
    Etc = 'etc'
}

/**
 * Payroll model
 * @export
 * @interface Payroll
 */
export interface Payroll {
    /**
     * 給与ID
     * @type {string}
     * @memberof Payroll
     */
    'id': string;
    /**
     * 支給タイプ
     * @type {string}
     * @memberof Payroll
     */
    'payment_type': PayrollPaymentTypeEnum;
    /**
     * 支給日
     * @type {string}
     * @memberof Payroll
     */
    'paid_at': string;
    /**
     * 対象期間（From）
     * @type {string}
     * @memberof Payroll
     */
    'period_start_at': string;
    /**
     * 対象期間（To）
     * @type {string}
     * @memberof Payroll
     */
    'period_end_at': string;
    /**
     * データの取り込み方法
     * @type {string}
     * @memberof Payroll
     */
    'source_type': PayrollSourceTypeEnum;
    /**
     * ステータス
     * @type {string}
     * @memberof Payroll
     */
    'status': PayrollStatusEnum;
    /**
     * 公開時刻
     * @type {string}
     * @memberof Payroll
     */
    'published_at'?: string;
    /**
     * 公開と同時に通知を行なう
     * @type {boolean}
     * @memberof Payroll
     */
    'notify_with_publish': boolean;
    /**
     * 記数法
     * @type {string}
     * @memberof Payroll
     */
    'numeral_system_handle_type': PayrollNumeralSystemHandleTypeEnum;
    /**
     * 給与明細の名前（管理者向け）
     * @type {string}
     * @memberof Payroll
     */
    'name_for_admin': string;
    /**
     * 給与明細の名前（従業員向け）
     * @type {string}
     * @memberof Payroll
     */
    'name_for_crew': string;
}

/**
    * @export
    * @enum {string}
    */
export enum PayrollPaymentTypeEnum {
    Salary = 'salary',
    Bonus = 'bonus'
}
/**
    * @export
    * @enum {string}
    */
export enum PayrollSourceTypeEnum {
    Api = 'api'
}
/**
    * @export
    * @enum {string}
    */
export enum PayrollStatusEnum {
    Wip = 'wip',
    Fixed = 'fixed',
    Failed = 'failed',
    Importing = 'importing'
}
/**
    * @export
    * @enum {string}
    */
export enum PayrollNumeralSystemHandleTypeEnum {
    AsIs = 'as_is',
    ForceSexagesimal = 'force_sexagesimal',
    ForceDecimal = 'force_decimal'
}

/**
 * 
 * @export
 * @interface PayrollAggregate
 */
export interface PayrollAggregate {
    /**
     * 名前
     * @type {string}
     * @memberof PayrollAggregate
     */
    'name': string;
    /**
     * 集計種別
     * @type {string}
     * @memberof PayrollAggregate
     */
    'aggregate_type': PayrollAggregateAggregateTypeEnum;
    /**
     * その他の金額
     * @type {number}
     * @memberof PayrollAggregate
     */
    'amount'?: number;
    /**
     * その他の値
     * @type {string}
     * @memberof PayrollAggregate
     */
    'value'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PayrollAggregateAggregateTypeEnum {
    NetPayment = 'net_payment',
    TotalPayment = 'total_payment',
    Deduction = 'deduction',
    Others = 'others'
}

/**
 * Payslip model
 * @export
 * @interface Payslip
 */
export interface Payslip {
    /**
     * 給与明細ID
     * @type {string}
     * @memberof Payslip
     */
    'id': string;
    /**
     * 従業員ID
     * @type {string}
     * @memberof Payslip
     */
    'crew_id': string;
    /**
     * 給与ID
     * @type {string}
     * @memberof Payslip
     */
    'payroll_id': string;
    /**
     * 備考
     * @type {string}
     * @memberof Payslip
     */
    'memo'?: string;
    /**
     * 項目合計金額の不整合フラグ
     * @type {boolean}
     * @memberof Payslip
     */
    'mismatch'?: boolean;
    /**
     * 通知日時
     * @type {string}
     * @memberof Payslip
     */
    'last_notified_at'?: string;
    /**
     * 支給
     * @type {Array<Allowance>}
     * @memberof Payslip
     */
    'allowances'?: Array<Allowance>;
    /**
     * 控除
     * @type {Array<Deduction>}
     * @memberof Payslip
     */
    'deductions'?: Array<Deduction>;
    /**
     * 勤怠
     * @type {Array<Attendance>}
     * @memberof Payslip
     */
    'attendances'?: Array<Attendance>;
    /**
     * 合計
     * @type {Array<PayrollAggregate>}
     * @memberof Payslip
     */
    'payroll_aggregates'?: Array<PayrollAggregate>;
}
/**
 * 登録
 * @export
 * @interface PostV1CrewCustomFieldTemplates
 */
export interface PostV1CrewCustomFieldTemplates {
    /**
     * 項目名
     * @type {string}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'name': string;
    /**
     * 入力タイプ
     * @type {string}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'type': PostV1CrewCustomFieldTemplatesTypeEnum;
    /**
     * ドロップダウン項目
     * @type {Array<CrewCustomEnumFieldTemplateElement>}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'elements'?: Array<CrewCustomEnumFieldTemplateElement>;
    /**
     * 所属する従業員カスタム項目グループのID。group_id か group のいずれかが出力されます。
     * @type {string}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'group_id': string;
    /**
     * 入力ヒント
     * @type {string}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'hint'?: string;
    /**
     * 数値の場合の有効桁数
     * @type {number}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'scale'?: number;
    /**
     * 入力された数値を3桁ごとにカンマで区切って表示
     * @type {boolean}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'separated_by_commas'?: boolean;
    /**
     * ポジション
     * @type {number}
     * @memberof PostV1CrewCustomFieldTemplates
     */
    'position': number;
}

/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewCustomFieldTemplatesTypeEnum {
    Date = 'date',
    Decimal = 'decimal',
    Enum = 'enum',
    File = 'file',
    String = 'string',
    Text = 'text'
}

/**
 * 登録
 * @export
 * @interface PostV1Crews
 */
export interface PostV1Crews {
    /**
     * ユーザーID
     * @type {string}
     * @memberof PostV1Crews
     */
    'user_id'?: string;
    /**
     * 事業所ID
     * @type {string}
     * @memberof PostV1Crews
     */
    'biz_establishment_id'?: string;
    /**
     * 社員番号
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_code'?: string;
    /**
     * 雇用形態
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_type'?: PostV1CrewsEmpTypeEnum;
    /**
     * 在籍状況
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_status': PostV1CrewsEmpStatusEnum;
    /**
     * 姓
     * @type {string}
     * @memberof PostV1Crews
     */
    'last_name': string;
    /**
     * 名
     * @type {string}
     * @memberof PostV1Crews
     */
    'first_name': string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof PostV1Crews
     */
    'last_name_yomi': string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof PostV1Crews
     */
    'first_name_yomi': string;
    /**
     * ビジネスネーム：姓
     * @type {string}
     * @memberof PostV1Crews
     */
    'business_last_name'?: string;
    /**
     * ビジネスネーム：名
     * @type {string}
     * @memberof PostV1Crews
     */
    'business_first_name'?: string;
    /**
     * ビジネスネーム：姓（カタカナ）
     * @type {string}
     * @memberof PostV1Crews
     */
    'business_last_name_yomi'?: string;
    /**
     * ビジネスネーム：名（カタカナ）
     * @type {string}
     * @memberof PostV1Crews
     */
    'business_first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'birth_at'?: string;
    /**
     * 戸籍上の性別
     * @type {string}
     * @memberof PostV1Crews
     */
    'gender': PostV1CrewsGenderEnum;
    /**
     * 電話番号
     * @type {string}
     * @memberof PostV1Crews
     */
    'tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof PostV1Crews
     */
    'address'?: Address;
    /**
     * 世帯主
     * @type {string}
     * @memberof PostV1Crews
     */
    'address_head_of_family'?: string;
    /**
     * 世帯主の続柄
     * @type {string}
     * @memberof PostV1Crews
     */
    'address_relation_name'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostV1Crews
     */
    'email'?: string;
    /**
     * 緊急連絡先の続柄
     * @type {string}
     * @memberof PostV1Crews
     */
    'emergency_relation_name'?: string;
    /**
     * 緊急連絡先の姓
     * @type {string}
     * @memberof PostV1Crews
     */
    'emergency_last_name'?: string;
    /**
     * 緊急連絡先の名
     * @type {string}
     * @memberof PostV1Crews
     */
    'emergency_first_name'?: string;
    /**
     * 緊急連絡先の姓（カタカナ）
     * @type {string}
     * @memberof PostV1Crews
     */
    'emergency_last_name_yomi'?: string;
    /**
     * 緊急連絡先の名（カタカナ）
     * @type {string}
     * @memberof PostV1Crews
     */
    'emergency_first_name_yomi'?: string;
    /**
     * 緊急連絡先の電話番号
     * @type {string}
     * @memberof PostV1Crews
     */
    'emergency_tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof PostV1Crews
     */
    'emergency_address'?: Address;
    /**
     * 
     * @type {Address}
     * @memberof PostV1Crews
     */
    'resident_card_address'?: Address;
    /**
     * 住民票住所の世帯主
     * @type {string}
     * @memberof PostV1Crews
     */
    'resident_card_address_head_of_family'?: string;
    /**
     * 続柄（住民票住所の世帯主）
     * @type {string}
     * @memberof PostV1Crews
     */
    'resident_card_address_relation_name'?: string;
    /**
     * 役職
     * @type {string}
     * @memberof PostV1Crews
     */
    'position'?: string;
    /**
     * 業務内容
     * @type {string}
     * @memberof PostV1Crews
     */
    'occupation'?: string;
    /**
     * 入社年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'entered_at'?: string;
    /**
     * 退職年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'resigned_at'?: string;
    /**
     * 退職事由
     * @type {string}
     * @memberof PostV1Crews
     */
    'resigned_reason'?: string;
    /**
     * 雇用保険の被保険者番号
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_ins_insured_person_number'?: string;
    /**
     * 雇用保険被保険者番号未記載理由
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_ins_insured_person_number_unknown_reason_type'?: PostV1CrewsEmpInsInsuredPersonNumberUnknownReasonTypeEnum;
    /**
     * 雇用保険の資格取得年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_ins_qualified_at'?: string;
    /**
     * 雇用保険の資格喪失年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'emp_ins_disqualified_at'?: string;
    /**
     * 雇用保険に加入していた会社名
     * @type {string}
     * @memberof PostV1Crews
     */
    'previous_workplace'?: string;
    /**
     * 雇用保険に加入していた会社の在籍開始日
     * @type {string}
     * @memberof PostV1Crews
     */
    'previous_employment_start_on'?: string;
    /**
     * 雇用保険に加入していた会社の在籍終了日
     * @type {string}
     * @memberof PostV1Crews
     */
    'previous_employment_end_on'?: string;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {number}
     * @memberof PostV1Crews
     */
    'soc_ins_insured_person_number'?: number;
    /**
     * 健康保険の被保険者整理番号
     * @type {number}
     * @memberof PostV1Crews
     */
    'hel_ins_insured_person_number'?: number;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof PostV1Crews
     */
    'basic_pension_number'?: string;
    /**
     * 厚生年金初加入フラグ
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'first_enrolling_in_emp_pns_ins_flag'?: boolean;
    /**
     * 基礎年金番号未記載理由
     * @type {string}
     * @memberof PostV1Crews
     */
    'basic_pension_number_unknown_reason_type'?: PostV1CrewsBasicPensionNumberUnknownReasonTypeEnum;
    /**
     * 最初に厚生年金へ加入した会社名
     * @type {string}
     * @memberof PostV1Crews
     */
    'first_workplace'?: string;
    /**
     * 最初に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof PostV1Crews
     */
    'first_workplace_address_text'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof PostV1Crews
     */
    'first_employment_start_on'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof PostV1Crews
     */
    'first_employment_end_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社名
     * @type {string}
     * @memberof PostV1Crews
     */
    'last_workplace'?: string;
    /**
     * 最後に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof PostV1Crews
     */
    'last_workplace_address_text'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof PostV1Crews
     */
    'last_employment_start_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof PostV1Crews
     */
    'last_employment_end_on'?: string;
    /**
     * 社会保険の資格取得年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の資格喪失年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 配偶者の有無
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'having_spouse'?: boolean;
    /**
     * 配偶者の年収
     * @type {number}
     * @memberof PostV1Crews
     */
    'spouse_yearly_income'?: number;
    /**
     * 報酬月額（通貨）
     * @type {number}
     * @memberof PostV1Crews
     */
    'monthly_income_currency'?: number;
    /**
     * 報酬月額（現物）
     * @type {number}
     * @memberof PostV1Crews
     */
    'monthly_income_goods'?: number;
    /**
     * 標準報酬月額の改定年月
     * @type {string}
     * @memberof PostV1Crews
     */
    'monthly_standard_income_updated_at'?: string;
    /**
     * 健康保険の標準報酬月額
     * @type {number}
     * @memberof PostV1Crews
     */
    'monthly_standard_income_hel'?: number;
    /**
     * 厚生年金の標準報酬月額
     * @type {number}
     * @memberof PostV1Crews
     */
    'monthly_standard_income_pns'?: number;
    /**
     * 通勤経路
     * @type {string}
     * @memberof PostV1Crews
     */
    'nearest_station_and_line'?: string;
    /**
     * 通勤手当1の定期券代
     * @type {number}
     * @memberof PostV1Crews
     */
    'commutation_1_expenses'?: number;
    /**
     * 通勤手当1の期間
     * @type {string}
     * @memberof PostV1Crews
     */
    'commutation_1_period'?: PostV1CrewsCommutation1PeriodEnum;
    /**
     * 通勤手当1の片道運賃
     * @type {number}
     * @memberof PostV1Crews
     */
    'commutation_1_single_fare'?: number;
    /**
     * 通勤手当2の定期券代
     * @type {number}
     * @memberof PostV1Crews
     */
    'commutation_2_expenses'?: number;
    /**
     * 通勤手当2の期間
     * @type {string}
     * @memberof PostV1Crews
     */
    'commutation_2_period'?: PostV1CrewsCommutation2PeriodEnum;
    /**
     * 通勤手当2の片道運賃
     * @type {number}
     * @memberof PostV1Crews
     */
    'commutation_2_single_fare'?: number;
    /**
     * 在留資格情報：姓
     * @type {string}
     * @memberof PostV1Crews
     */
    'foreign_resident_last_name'?: string;
    /**
     * 在留資格情報：名
     * @type {string}
     * @memberof PostV1Crews
     */
    'foreign_resident_first_name'?: string;
    /**
     * 在留資格情報：ミドルネーム
     * @type {string}
     * @memberof PostV1Crews
     */
    'foreign_resident_middle_name'?: string;
    /**
     * 在留カード番号
     * @type {string}
     * @memberof PostV1Crews
     */
    'foreign_resident_card_number'?: string;
    /**
     * 国籍 / 国籍コード
     * @type {string}
     * @memberof PostV1Crews
     */
    'nationality_code'?: string;
    /**
     * 在留資格
     * @type {string}
     * @memberof PostV1Crews
     */
    'resident_status_type'?: string;
    /**
     * 在留資格不明理由
     * @type {string}
     * @memberof PostV1Crews
     */
    'resident_status_other_reason'?: string;
    /**
     * 在留期日
     * @type {string}
     * @memberof PostV1Crews
     */
    'resident_end_at'?: string;
    /**
     * 資格外活動許可の有無
     * @type {string}
     * @memberof PostV1Crews
     */
    'having_ex_activity_permission'?: PostV1CrewsHavingExActivityPermissionEnum;
    /**
     * 派遣・請負就労区分
     * @type {string}
     * @memberof PostV1Crews
     */
    'other_be_workable_type'?: PostV1CrewsOtherBeWorkableTypeEnum;
    /**
     * 部署
     * @type {string}
     * @memberof PostV1Crews
     */
    'department'?: string;
    /**
     * 契約種別
     * @type {string}
     * @memberof PostV1Crews
     */
    'contract_type'?: PostV1CrewsContractTypeEnum;
    /**
     * 契約開始日
     * @type {string}
     * @memberof PostV1Crews
     */
    'contract_start_on'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof PostV1Crews
     */
    'contract_end_on'?: string;
    /**
     * 契約更新の有無
     * @type {string}
     * @memberof PostV1Crews
     */
    'contract_renewal_type'?: PostV1CrewsContractRenewalTypeEnum;
    /**
     * 障害者区分
     * @type {string}
     * @memberof PostV1Crews
     */
    'handicapped_type'?: PostV1CrewsHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof PostV1Crews
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 勤労学生フラグ
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'working_student_flag'?: boolean;
    /**
     * 勤労学生：学校名
     * @type {string}
     * @memberof PostV1Crews
     */
    'school_name'?: string;
    /**
     * 勤労学生：入学年月日
     * @type {string}
     * @memberof PostV1Crews
     */
    'enrolled_at'?: string;
    /**
     * 勤労学生：所得の見積額
     * @type {number}
     * @memberof PostV1Crews
     */
    'working_student_income'?: number;
    /**
     * 給与所得フラグ
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'employment_income_flag'?: boolean;
    /**
     * 事業所得フラグ
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'business_income_flag'?: boolean;
    /**
     * 配当所得フラグ
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'devidend_income_flag'?: boolean;
    /**
     * 不動産所得フラグ
     * @type {boolean}
     * @memberof PostV1Crews
     */
    'estate_income_flag'?: boolean;
    /**
     * 寡婦・ひとり親
     * @type {string}
     * @memberof PostV1Crews
     */
    'widow_type'?: PostV1CrewsWidowTypeEnum;
    /**
     * 寡婦・ひとり親の理由
     * @type {string}
     * @memberof PostV1Crews
     */
    'widow_reason_type'?: PostV1CrewsWidowReasonTypeEnum;
    /**
     * 寡婦・ひとり親の備考
     * @type {string}
     * @memberof PostV1Crews
     */
    'widow_memo'?: string;
    /**
     * 雇用形態のID
     * @type {string}
     * @memberof PostV1Crews
     */
    'employment_type_id'?: string;
    /**
     * 所属する部署のID
     * @type {Array<string>}
     * @memberof PostV1Crews
     */
    'department_ids'?: Array<string>;
    /**
     * 給与支給形態
     * @type {string}
     * @memberof PostV1Crews
     */
    'payment_period_id'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'profile_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'resume1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'resume2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'identity_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'identity_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'address_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'emp_ins_insured_person_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'basic_pension_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'foreign_resident_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'foreign_resident_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'handicapped_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1Crews
     */
    'student_card_image'?: AttachmentParams;
    /**
     * 給与振込口座
     * @type {Array<BankAccount>}
     * @memberof PostV1Crews
     */
    'bank_accounts'?: Array<BankAccount>;
    /**
     * カスタム項目
     * @type {Array<CrewCustomFieldParam>}
     * @memberof PostV1Crews
     */
    'custom_fields'?: Array<CrewCustomFieldParam>;
}

/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsEmpTypeEnum {
    BoardMember = 'board_member',
    FullTimer = 'full_timer',
    ContractWorker = 'contract_worker',
    Permatemp = 'permatemp',
    PartTimer = 'part_timer',
    OutsourcingContractor = 'outsourcing_contractor',
    Etc = 'etc'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsEmpStatusEnum {
    Employed = 'employed',
    Absent = 'absent',
    Retired = 'retired'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsEmpInsInsuredPersonNumberUnknownReasonTypeEnum {
    NoWorkExperience = 'no_work_experience',
    NeverJoined = 'never_joined',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsBasicPensionNumberUnknownReasonTypeEnum {
    NonPensionable = 'non_pensionable',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCommutation1PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCommutation2PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsHavingExActivityPermissionEnum {
    Permitted = 'permitted',
    None = 'none'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsOtherBeWorkableTypeEnum {
    OtherBeWorkable = 'other_be_workable',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsContractTypeEnum {
    Unlimited = 'unlimited',
    FixedTerm = 'fixed_term'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsContractRenewalTypeEnum {
    Renewal = 'renewal',
    None = 'none',
    AutoRenewal = 'auto_renewal'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsWidowTypeEnum {
    Widow = 'widow',
    SpecialWidow = 'special_widow',
    Widower = 'widower',
    SingleParent = 'single_parent'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsWidowReasonTypeEnum {
    Divorce = 'divorce',
    Bereavement = 'bereavement',
    Missing = 'missing',
    Unmarried = 'unmarried'
}

/**
 * 登録
 * @export
 * @interface PostV1CrewsCrewIdDependents
 */
export interface PostV1CrewsCrewIdDependents {
    /**
     * 配偶者かどうか
     * @type {boolean}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'is_spouse'?: boolean;
    /**
     * 姓
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'last_name'?: string;
    /**
     * 名
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'first_name'?: string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'last_name_yomi'?: string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'birth_at'?: string;
    /**
     * 住所変更年月日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'moved_at'?: string;
    /**
     * 性別
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'gender'?: PostV1CrewsCrewIdDependentsGenderEnum;
    /**
     * 職業
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'job'?: string;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'basic_pension_number'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'basic_pension_number_image'?: AttachmentParams;
    /**
     * 同居・別居の別
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'live_together_type'?: PostV1CrewsCrewIdDependentsLiveTogetherTypeEnum;
    /**
     * 
     * @type {Address}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'address'?: Address;
    /**
     * 電話番号
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tel_number'?: string;
    /**
     * 障害者区分
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'handicapped_type'?: PostV1CrewsCrewIdDependentsHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'handicapped_image'?: AttachmentParams;
    /**
     * 海外居住時の送金額（単位：円）
     * @type {number}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'remittance_to_relative'?: number;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'remittance_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'remittance_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'remittance_image3'?: AttachmentParams;
    /**
     * 社会保険の扶養状況
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'social_insurance_support_type'?: PostV1CrewsCrewIdDependentsSocialInsuranceSupportTypeEnum;
    /**
     * 社会保険の年間収入（単位:円）
     * @type {number}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'income'?: number;
    /**
     * 社会保険の月間収入（単位:円）
     * @type {number}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'monthly_income'?: number;
    /**
     * 社会保険の被扶養者になった日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の被扶養者になった理由
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'soc_ins_qualified_reason'?: string;
    /**
     * 社会保険の被扶養者でなくなった日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 社会保険の扶養から削除された理由
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'disqualified_reason_type'?: PostV1CrewsCrewIdDependentsDisqualifiedReasonTypeEnum;
    /**
     * 社会保険の扶養から削除された理由（その他の場合）
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'disqualified_reason'?: string;
    /**
     * 税法上の扶養状況
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_law_support_type'?: PostV1CrewsCrewIdDependentsTaxLawSupportTypeEnum;
    /**
     * 税法上の年間所得見積額（単位:円）
     * @type {number}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_deduction_income'?: number;
    /**
     * 税法上の被扶養者になった日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_deduction_qualified_at'?: string;
    /**
     * 税法上の被扶養者になった理由
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_deduction_qualified_reason'?: string;
    /**
     * 税法上の被扶養者でなくなった日
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_deduction_disqualified_at'?: string;
    /**
     * 税法上の扶養から削除された理由
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_deduction_disqualified_reason_type'?: PostV1CrewsCrewIdDependentsTaxDeductionDisqualifiedReasonTypeEnum;
    /**
     * 税法上の扶養から削除された理由（その他の場合）
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'tax_deduction_disqualified_reason'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'maternity_handbook_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'kinship_image'?: AttachmentParams;
    /**
     * 続柄ID
     * @type {string}
     * @memberof PostV1CrewsCrewIdDependents
     */
    'relation_id'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsLiveTogetherTypeEnum {
    Together = 'living_together',
    Separately = 'living_separately'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped',
    SpecialHandicappedLivingTogether = 'special_handicapped_living_together'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsSocialInsuranceSupportTypeEnum {
    Unsupported = 'unsupported',
    Supported = 'supported',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsDisqualifiedReasonTypeEnum {
    Death = 'death',
    Divorce = 'divorce',
    Employment = 'employment',
    IncomeIncrease = 'income_increase',
    AgingOut75 = 'aging_out_75',
    DisabilityCertificate = 'disability_certificate',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsTaxLawSupportTypeEnum {
    Unsupported = 'unsupported',
    Supported = 'supported',
    SpecialSpousalExemption = 'special_spousal_exemption',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PostV1CrewsCrewIdDependentsTaxDeductionDisqualifiedReasonTypeEnum {
    Death = 'death',
    Divorce = 'divorce',
    Employment = 'employment',
    IncomeIncrease = 'income_increase',
    AgingOut75 = 'aging_out_75',
    DisabilityCertificate = 'disability_certificate',
    Others = 'others'
}

/**
 * 登録
 * @export
 * @interface PostV1Departments
 */
export interface PostV1Departments {
    /**
     * 名称
     * @type {string}
     * @memberof PostV1Departments
     */
    'name': string;
    /**
     * ポジション
     * @type {number}
     * @memberof PostV1Departments
     */
    'position'?: number;
    /**
     * コード
     * @type {string}
     * @memberof PostV1Departments
     */
    'code'?: string;
    /**
     * 親の部署ID
     * @type {string}
     * @memberof PostV1Departments
     */
    'parent_id'?: string;
}
/**
 * 登録
 * @export
 * @interface PostV1PayrollsPayrollIdPayslips
 */
export interface PostV1PayrollsPayrollIdPayslips {
    /**
     * 従業員ID
     * @type {string}
     * @memberof PostV1PayrollsPayrollIdPayslips
     */
    'crew_id': string;
    /**
     * 備考
     * @type {string}
     * @memberof PostV1PayrollsPayrollIdPayslips
     */
    'memo'?: string;
    /**
     * 給与明細情報
     * @type {Array<string>}
     * @memberof PostV1PayrollsPayrollIdPayslips
     */
    'values': Array<string>;
}
/**
 * 更新
 * @export
 * @interface PutV1CrewCustomFieldTemplates
 */
export interface PutV1CrewCustomFieldTemplates {
    /**
     * 項目名
     * @type {string}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'name': string;
    /**
     * 入力タイプ
     * @type {string}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'type': PutV1CrewCustomFieldTemplatesTypeEnum;
    /**
     * ドロップダウン項目
     * @type {Array<CrewCustomEnumFieldTemplateElement>}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'elements'?: Array<CrewCustomEnumFieldTemplateElement>;
    /**
     * 所属する従業員カスタム項目グループのID。group_id か group のいずれかが出力されます。
     * @type {string}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'group_id': string;
    /**
     * 入力ヒント
     * @type {string}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'hint'?: string;
    /**
     * 数値の場合の有効桁数
     * @type {number}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'scale'?: number;
    /**
     * 入力された数値を3桁ごとにカンマで区切って表示
     * @type {boolean}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'separated_by_commas'?: boolean;
    /**
     * ポジション
     * @type {number}
     * @memberof PutV1CrewCustomFieldTemplates
     */
    'position': number;
}

/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewCustomFieldTemplatesTypeEnum {
    Date = 'date',
    Decimal = 'decimal',
    Enum = 'enum',
    File = 'file',
    String = 'string',
    Text = 'text'
}

/**
 * 更新
 * @export
 * @interface PutV1Crews
 */
export interface PutV1Crews {
    /**
     * ユーザーID
     * @type {string}
     * @memberof PutV1Crews
     */
    'user_id'?: string;
    /**
     * 事業所ID
     * @type {string}
     * @memberof PutV1Crews
     */
    'biz_establishment_id'?: string;
    /**
     * 社員番号
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_code'?: string;
    /**
     * 雇用形態
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_type'?: PutV1CrewsEmpTypeEnum;
    /**
     * 在籍状況
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_status': PutV1CrewsEmpStatusEnum;
    /**
     * 姓
     * @type {string}
     * @memberof PutV1Crews
     */
    'last_name': string;
    /**
     * 名
     * @type {string}
     * @memberof PutV1Crews
     */
    'first_name': string;
    /**
     * 姓（カタカナ）
     * @type {string}
     * @memberof PutV1Crews
     */
    'last_name_yomi': string;
    /**
     * 名（カタカナ）
     * @type {string}
     * @memberof PutV1Crews
     */
    'first_name_yomi': string;
    /**
     * ビジネスネーム：姓
     * @type {string}
     * @memberof PutV1Crews
     */
    'business_last_name'?: string;
    /**
     * ビジネスネーム：名
     * @type {string}
     * @memberof PutV1Crews
     */
    'business_first_name'?: string;
    /**
     * ビジネスネーム：姓（カタカナ）
     * @type {string}
     * @memberof PutV1Crews
     */
    'business_last_name_yomi'?: string;
    /**
     * ビジネスネーム：名（カタカナ）
     * @type {string}
     * @memberof PutV1Crews
     */
    'business_first_name_yomi'?: string;
    /**
     * 生年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'birth_at'?: string;
    /**
     * 戸籍上の性別
     * @type {string}
     * @memberof PutV1Crews
     */
    'gender': PutV1CrewsGenderEnum;
    /**
     * 電話番号
     * @type {string}
     * @memberof PutV1Crews
     */
    'tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof PutV1Crews
     */
    'address'?: Address;
    /**
     * 世帯主
     * @type {string}
     * @memberof PutV1Crews
     */
    'address_head_of_family'?: string;
    /**
     * 世帯主の続柄
     * @type {string}
     * @memberof PutV1Crews
     */
    'address_relation_name'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof PutV1Crews
     */
    'email'?: string;
    /**
     * 緊急連絡先の続柄
     * @type {string}
     * @memberof PutV1Crews
     */
    'emergency_relation_name'?: string;
    /**
     * 緊急連絡先の姓
     * @type {string}
     * @memberof PutV1Crews
     */
    'emergency_last_name'?: string;
    /**
     * 緊急連絡先の名
     * @type {string}
     * @memberof PutV1Crews
     */
    'emergency_first_name'?: string;
    /**
     * 緊急連絡先の姓（カタカナ）
     * @type {string}
     * @memberof PutV1Crews
     */
    'emergency_last_name_yomi'?: string;
    /**
     * 緊急連絡先の名（カタカナ）
     * @type {string}
     * @memberof PutV1Crews
     */
    'emergency_first_name_yomi'?: string;
    /**
     * 緊急連絡先の電話番号
     * @type {string}
     * @memberof PutV1Crews
     */
    'emergency_tel_number'?: string;
    /**
     * 
     * @type {Address}
     * @memberof PutV1Crews
     */
    'emergency_address'?: Address;
    /**
     * 
     * @type {Address}
     * @memberof PutV1Crews
     */
    'resident_card_address'?: Address;
    /**
     * 住民票住所の世帯主
     * @type {string}
     * @memberof PutV1Crews
     */
    'resident_card_address_head_of_family'?: string;
    /**
     * 続柄（住民票住所の世帯主）
     * @type {string}
     * @memberof PutV1Crews
     */
    'resident_card_address_relation_name'?: string;
    /**
     * 役職
     * @type {string}
     * @memberof PutV1Crews
     */
    'position'?: string;
    /**
     * 業務内容
     * @type {string}
     * @memberof PutV1Crews
     */
    'occupation'?: string;
    /**
     * 入社年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'entered_at'?: string;
    /**
     * 退職年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'resigned_at'?: string;
    /**
     * 退職事由
     * @type {string}
     * @memberof PutV1Crews
     */
    'resigned_reason'?: string;
    /**
     * 雇用保険の被保険者番号
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_ins_insured_person_number'?: string;
    /**
     * 雇用保険被保険者番号未記載理由
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_ins_insured_person_number_unknown_reason_type'?: PutV1CrewsEmpInsInsuredPersonNumberUnknownReasonTypeEnum;
    /**
     * 雇用保険の資格取得年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_ins_qualified_at'?: string;
    /**
     * 雇用保険の資格喪失年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'emp_ins_disqualified_at'?: string;
    /**
     * 雇用保険に加入していた会社名
     * @type {string}
     * @memberof PutV1Crews
     */
    'previous_workplace'?: string;
    /**
     * 雇用保険に加入していた会社の在籍開始日
     * @type {string}
     * @memberof PutV1Crews
     */
    'previous_employment_start_on'?: string;
    /**
     * 雇用保険に加入していた会社の在籍終了日
     * @type {string}
     * @memberof PutV1Crews
     */
    'previous_employment_end_on'?: string;
    /**
     * 厚生年金保険の被保険者整理番号
     * @type {number}
     * @memberof PutV1Crews
     */
    'soc_ins_insured_person_number'?: number;
    /**
     * 健康保険の被保険者整理番号
     * @type {number}
     * @memberof PutV1Crews
     */
    'hel_ins_insured_person_number'?: number;
    /**
     * 基礎年金番号
     * @type {string}
     * @memberof PutV1Crews
     */
    'basic_pension_number'?: string;
    /**
     * 厚生年金初加入フラグ
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'first_enrolling_in_emp_pns_ins_flag'?: boolean;
    /**
     * 基礎年金番号未記載理由
     * @type {string}
     * @memberof PutV1Crews
     */
    'basic_pension_number_unknown_reason_type'?: PutV1CrewsBasicPensionNumberUnknownReasonTypeEnum;
    /**
     * 最初に厚生年金へ加入した会社名
     * @type {string}
     * @memberof PutV1Crews
     */
    'first_workplace'?: string;
    /**
     * 最初に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof PutV1Crews
     */
    'first_workplace_address_text'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof PutV1Crews
     */
    'first_employment_start_on'?: string;
    /**
     * 最初に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof PutV1Crews
     */
    'first_employment_end_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社名
     * @type {string}
     * @memberof PutV1Crews
     */
    'last_workplace'?: string;
    /**
     * 最後に厚生年金へ加入した会社の住所文字列
     * @type {string}
     * @memberof PutV1Crews
     */
    'last_workplace_address_text'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍開始日
     * @type {string}
     * @memberof PutV1Crews
     */
    'last_employment_start_on'?: string;
    /**
     * 最後に厚生年金へ加入した会社の在籍終了日
     * @type {string}
     * @memberof PutV1Crews
     */
    'last_employment_end_on'?: string;
    /**
     * 社会保険の資格取得年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'soc_ins_qualified_at'?: string;
    /**
     * 社会保険の資格喪失年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'soc_ins_disqualified_at'?: string;
    /**
     * 配偶者の有無
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'having_spouse'?: boolean;
    /**
     * 配偶者の年収
     * @type {number}
     * @memberof PutV1Crews
     */
    'spouse_yearly_income'?: number;
    /**
     * 報酬月額（通貨）
     * @type {number}
     * @memberof PutV1Crews
     */
    'monthly_income_currency'?: number;
    /**
     * 報酬月額（現物）
     * @type {number}
     * @memberof PutV1Crews
     */
    'monthly_income_goods'?: number;
    /**
     * 標準報酬月額の改定年月
     * @type {string}
     * @memberof PutV1Crews
     */
    'monthly_standard_income_updated_at'?: string;
    /**
     * 健康保険の標準報酬月額
     * @type {number}
     * @memberof PutV1Crews
     */
    'monthly_standard_income_hel'?: number;
    /**
     * 厚生年金の標準報酬月額
     * @type {number}
     * @memberof PutV1Crews
     */
    'monthly_standard_income_pns'?: number;
    /**
     * 通勤経路
     * @type {string}
     * @memberof PutV1Crews
     */
    'nearest_station_and_line'?: string;
    /**
     * 通勤手当1の定期券代
     * @type {number}
     * @memberof PutV1Crews
     */
    'commutation_1_expenses'?: number;
    /**
     * 通勤手当1の期間
     * @type {string}
     * @memberof PutV1Crews
     */
    'commutation_1_period'?: PutV1CrewsCommutation1PeriodEnum;
    /**
     * 通勤手当1の片道運賃
     * @type {number}
     * @memberof PutV1Crews
     */
    'commutation_1_single_fare'?: number;
    /**
     * 通勤手当2の定期券代
     * @type {number}
     * @memberof PutV1Crews
     */
    'commutation_2_expenses'?: number;
    /**
     * 通勤手当2の期間
     * @type {string}
     * @memberof PutV1Crews
     */
    'commutation_2_period'?: PutV1CrewsCommutation2PeriodEnum;
    /**
     * 通勤手当2の片道運賃
     * @type {number}
     * @memberof PutV1Crews
     */
    'commutation_2_single_fare'?: number;
    /**
     * 在留資格情報：姓
     * @type {string}
     * @memberof PutV1Crews
     */
    'foreign_resident_last_name'?: string;
    /**
     * 在留資格情報：名
     * @type {string}
     * @memberof PutV1Crews
     */
    'foreign_resident_first_name'?: string;
    /**
     * 在留資格情報：ミドルネーム
     * @type {string}
     * @memberof PutV1Crews
     */
    'foreign_resident_middle_name'?: string;
    /**
     * 在留カード番号
     * @type {string}
     * @memberof PutV1Crews
     */
    'foreign_resident_card_number'?: string;
    /**
     * 国籍 / 国籍コード
     * @type {string}
     * @memberof PutV1Crews
     */
    'nationality_code'?: string;
    /**
     * 在留資格
     * @type {string}
     * @memberof PutV1Crews
     */
    'resident_status_type'?: string;
    /**
     * 在留資格不明理由
     * @type {string}
     * @memberof PutV1Crews
     */
    'resident_status_other_reason'?: string;
    /**
     * 在留期日
     * @type {string}
     * @memberof PutV1Crews
     */
    'resident_end_at'?: string;
    /**
     * 資格外活動許可の有無
     * @type {string}
     * @memberof PutV1Crews
     */
    'having_ex_activity_permission'?: PutV1CrewsHavingExActivityPermissionEnum;
    /**
     * 派遣・請負就労区分
     * @type {string}
     * @memberof PutV1Crews
     */
    'other_be_workable_type'?: PutV1CrewsOtherBeWorkableTypeEnum;
    /**
     * 部署
     * @type {string}
     * @memberof PutV1Crews
     */
    'department'?: string;
    /**
     * 契約種別
     * @type {string}
     * @memberof PutV1Crews
     */
    'contract_type'?: PutV1CrewsContractTypeEnum;
    /**
     * 契約開始日
     * @type {string}
     * @memberof PutV1Crews
     */
    'contract_start_on'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof PutV1Crews
     */
    'contract_end_on'?: string;
    /**
     * 契約更新の有無
     * @type {string}
     * @memberof PutV1Crews
     */
    'contract_renewal_type'?: PutV1CrewsContractRenewalTypeEnum;
    /**
     * 障害者区分
     * @type {string}
     * @memberof PutV1Crews
     */
    'handicapped_type'?: PutV1CrewsHandicappedTypeEnum;
    /**
     * 障害者手帳の種類
     * @type {string}
     * @memberof PutV1Crews
     */
    'handicapped_note_type'?: string;
    /**
     * 障害者手帳の交付年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'handicapped_note_delivery_at'?: string;
    /**
     * 勤労学生フラグ
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'working_student_flag'?: boolean;
    /**
     * 勤労学生：学校名
     * @type {string}
     * @memberof PutV1Crews
     */
    'school_name'?: string;
    /**
     * 勤労学生：入学年月日
     * @type {string}
     * @memberof PutV1Crews
     */
    'enrolled_at'?: string;
    /**
     * 勤労学生：所得の見積額
     * @type {number}
     * @memberof PutV1Crews
     */
    'working_student_income'?: number;
    /**
     * 給与所得フラグ
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'employment_income_flag'?: boolean;
    /**
     * 事業所得フラグ
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'business_income_flag'?: boolean;
    /**
     * 配当所得フラグ
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'devidend_income_flag'?: boolean;
    /**
     * 不動産所得フラグ
     * @type {boolean}
     * @memberof PutV1Crews
     */
    'estate_income_flag'?: boolean;
    /**
     * 寡婦・ひとり親
     * @type {string}
     * @memberof PutV1Crews
     */
    'widow_type'?: PutV1CrewsWidowTypeEnum;
    /**
     * 寡婦・ひとり親の理由
     * @type {string}
     * @memberof PutV1Crews
     */
    'widow_reason_type'?: PutV1CrewsWidowReasonTypeEnum;
    /**
     * 寡婦・ひとり親の備考
     * @type {string}
     * @memberof PutV1Crews
     */
    'widow_memo'?: string;
    /**
     * 雇用形態のID
     * @type {string}
     * @memberof PutV1Crews
     */
    'employment_type_id'?: string;
    /**
     * 所属する部署のID
     * @type {Array<string>}
     * @memberof PutV1Crews
     */
    'department_ids'?: Array<string>;
    /**
     * 給与支給形態
     * @type {string}
     * @memberof PutV1Crews
     */
    'payment_period_id'?: string;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'profile_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'resume1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'resume2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'identity_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'identity_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'address_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'emp_ins_insured_person_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'basic_pension_number_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'foreign_resident_card_image1'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'foreign_resident_card_image2'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'handicapped_image'?: AttachmentParams;
    /**
     * 
     * @type {AttachmentParams}
     * @memberof PutV1Crews
     */
    'student_card_image'?: AttachmentParams;
    /**
     * 給与振込口座
     * @type {Array<BankAccount>}
     * @memberof PutV1Crews
     */
    'bank_accounts'?: Array<BankAccount>;
    /**
     * カスタム項目
     * @type {Array<CrewCustomFieldParam>}
     * @memberof PutV1Crews
     */
    'custom_fields'?: Array<CrewCustomFieldParam>;
}

/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsEmpTypeEnum {
    BoardMember = 'board_member',
    FullTimer = 'full_timer',
    ContractWorker = 'contract_worker',
    Permatemp = 'permatemp',
    PartTimer = 'part_timer',
    OutsourcingContractor = 'outsourcing_contractor',
    Etc = 'etc'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsEmpStatusEnum {
    Employed = 'employed',
    Absent = 'absent',
    Retired = 'retired'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsGenderEnum {
    Male = 'male',
    Female = 'female'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsEmpInsInsuredPersonNumberUnknownReasonTypeEnum {
    NoWorkExperience = 'no_work_experience',
    NeverJoined = 'never_joined',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsBasicPensionNumberUnknownReasonTypeEnum {
    NonPensionable = 'non_pensionable',
    Unknown = 'unknown'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsCommutation1PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsCommutation2PeriodEnum {
    _1Month = 'commutation_period_1_month',
    _3Month = 'commutation_period_3_month',
    _6Month = 'commutation_period_6_month'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsHavingExActivityPermissionEnum {
    Permitted = 'permitted',
    None = 'none'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsOtherBeWorkableTypeEnum {
    OtherBeWorkable = 'other_be_workable',
    Others = 'others'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsContractTypeEnum {
    Unlimited = 'unlimited',
    FixedTerm = 'fixed_term'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsContractRenewalTypeEnum {
    Renewal = 'renewal',
    None = 'none',
    AutoRenewal = 'auto_renewal'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsHandicappedTypeEnum {
    OrdinaryHandicapped = 'ordinary_handicapped',
    SpecialHandicapped = 'special_handicapped'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsWidowTypeEnum {
    Widow = 'widow',
    SpecialWidow = 'special_widow',
    Widower = 'widower',
    SingleParent = 'single_parent'
}
/**
    * @export
    * @enum {string}
    */
export enum PutV1CrewsWidowReasonTypeEnum {
    Divorce = 'divorce',
    Bereavement = 'bereavement',
    Missing = 'missing',
    Unmarried = 'unmarried'
}

/**
 * 更新
 * @export
 * @interface PutV1Departments
 */
export interface PutV1Departments {
    /**
     * 名称
     * @type {string}
     * @memberof PutV1Departments
     */
    'name': string;
    /**
     * ポジション
     * @type {number}
     * @memberof PutV1Departments
     */
    'position'?: number;
    /**
     * コード
     * @type {string}
     * @memberof PutV1Departments
     */
    'code'?: string;
    /**
     * 親の部署ID
     * @type {string}
     * @memberof PutV1Departments
     */
    'parent_id'?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 権限ID
     * @type {string}
     * @memberof Role
     */
    'id': string;
    /**
     * 名称
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * 説明
     * @type {string}
     * @memberof Role
     */
    'description'?: string;
    /**
     * 従業員の参照可能範囲
     * @type {string}
     * @memberof Role
     */
    'crews_scope': RoleCrewsScopeEnum;
    /**
     * 従業員の参照可能範囲の条件
     * @type {object}
     * @memberof Role
     */
    'crews_scope_query'?: object;
    /**
     * セッション有効期限(分)
     * @type {number}
     * @memberof Role
     */
    'session_timeout_in'?: number;
    /**
     * プリセット種別
     * @type {string}
     * @memberof Role
     */
    'preset_type'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum RoleCrewsScopeEnum {
    All = 'crews_scope_all',
    Own = 'crews_scope_own',
    Department = 'crews_scope_department',
    DepartmentSubtree = 'crews_scope_department_subtree',
    DepartmentDescendant = 'crews_scope_department_descendant',
    Condition = 'crews_scope_condition'
}

/**
 * 
 * @export
 * @interface Subdomain
 */
export interface Subdomain {
    /**
     * サブドメイン
     * @type {string}
     * @memberof Subdomain
     */
    'name': string;
    /**
     * アクティブフラグ
     * @type {boolean}
     * @memberof Subdomain
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface SubscribedPlan
 */
export interface SubscribedPlan {
    /**
     * 契約プラン名
     * @type {string}
     * @memberof SubscribedPlan
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SuppressedEmailLog
 */
export interface SuppressedEmailLog {
    /**
     * メール配信状況ID
     * @type {string}
     * @memberof SuppressedEmailLog
     */
    'id': string;
    /**
     * 種別
     * @type {number}
     * @memberof SuppressedEmailLog
     */
    'suppression_type'?: number;
    /**
     * 理由
     * @type {string}
     * @memberof SuppressedEmailLog
     */
    'reason'?: string;
    /**
     * 配信日
     * @type {string}
     * @memberof SuppressedEmailLog
     */
    'suppressed_at'?: string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof SuppressedEmailLog
     */
    'updated_at'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof SuppressedEmailLog
     */
    'created_at'?: string;
}
/**
 * TaxWithholding model
 * @export
 * @interface TaxWithholding
 */
export interface TaxWithholding {
    /**
     * 源泉徴収票ID
     * @type {string}
     * @memberof TaxWithholding
     */
    'id': string;
    /**
     * 名前
     * @type {string}
     * @memberof TaxWithholding
     */
    'name': string;
    /**
     * ステータス
     * @type {string}
     * @memberof TaxWithholding
     */
    'status': TaxWithholdingStatusEnum;
    /**
     * 源泉徴収票に印字される年
     * @type {string}
     * @memberof TaxWithholding
     */
    'year': TaxWithholdingYearEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxWithholdingStatusEnum {
    Wip = 'wip',
    Fixed = 'fixed'
}
/**
    * @export
    * @enum {string}
    */
export enum TaxWithholdingYearEnum {
    H23 = 'H23',
    H24 = 'H24',
    H25 = 'H25',
    H26 = 'H26',
    H27 = 'H27',
    H28 = 'H28',
    H29 = 'H29',
    H30 = 'H30',
    H31 = 'H31',
    R01 = 'R01',
    R02 = 'R02',
    R03 = 'R03',
    R04 = 'R04'
}

/**
 * TaxWithholdingSlip model
 * @export
 * @interface TaxWithholdingSlip
 */
export interface TaxWithholdingSlip {
    /**
     * 源泉徴収票ID
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'id': string;
    /**
     * 従業員ID
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_id': string;
    /**
     * 源泉徴収ID
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'tax_withholding_id': string;
    /**
     * 
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'file'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'file_content_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'file_file_size'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'file_updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'last_notified_at'?: string;
    /**
     * 対象年度
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'ref_date': string;
    /**
     * 住所
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_address_literal': string;
    /**
     * 受給者番号（社員番号）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_emp_code'?: string;
    /**
     * 役職名
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_position'?: string;
    /**
     * 氏名のフリガナ
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_full_name_yomi': string;
    /**
     * 氏名
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_full_name': string;
    /**
     * 種別
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'slip_type': string;
    /**
     * 支払金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'payment_amount': number;
    /**
     * 支払金額（内）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'payment_amount_unpaid'?: number;
    /**
     * 給与所得控除後の金額（調整控除後）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'payment_after_emp_income_deduction_amount'?: number;
    /**
     * 所得控除の額の合計額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'payment_after_income_deduction_amount'?: number;
    /**
     * 源泉徴収税額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'withholding_tax_amount': number;
    /**
     * 源泉徴収税額（内）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'withholding_tax_amount_unpaid'?: number;
    /**
     * 控除対象配偶者（有）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'spouse_deduction'?: string;
    /**
     * 控除対象配偶者（従有）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'spouse_deduction_sub'?: string;
    /**
     * 控除対象配偶者（老人）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'spouse_deduction_elderly'?: string;
    /**
     * 配偶者特別控除の額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'spouse_special_deduction_amount'?: number;
    /**
     * 控除対象扶養（特定：人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'specific_dependent_count'?: number;
    /**
     * 控除対象扶養（特定：従人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'specific_dependent_sub_count'?: number;
    /**
     * 控除対象扶養（老人：内）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'elderly_dependent_live_together_count'?: number;
    /**
     * 控除対象扶養（老人：人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'elderly_dependent_count'?: number;
    /**
     * 控除対象扶養（老人：従人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'elderly_dependent_sub_count'?: number;
    /**
     * 控除対象扶養（その他：人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'other_dependent_count'?: number;
    /**
     * 控除対象扶養（その他：従人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'other_dependent_sub_count'?: number;
    /**
     * 16歳未満扶養親族の数
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'under_16_years_dependent_count'?: number;
    /**
     * 障害者の数（特別：内）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'special_handicapped_dependent_live_together_count'?: number;
    /**
     * 障害者の数（特別：人）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'special_handicapped_dependent_count'?: number;
    /**
     * 障害者の数（その他）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'other_handicapped_dependent_count'?: number;
    /**
     * 非居住者である親族の数
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'non_resident_relative_count'?: number;
    /**
     * 社会保険料などの金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'soc_ins_payment_amount'?: number;
    /**
     * 社会保険料などの金額（内）
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'soc_ins_payment_amount_unpaid'?: number;
    /**
     * 生命保険料の控除額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'life_ins_deduction_amount'?: number;
    /**
     * 地震保険料の控除額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'earthquake_ins_deduction_amount'?: number;
    /**
     * 住宅借入金等特別控除の額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_deduction_amount'?: number;
    /**
     * 摘要
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'memo'?: string;
    /**
     * 新生保保険料の金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'new_life_ins_payment_amount'?: number;
    /**
     * 旧生保保険料の金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'old_life_ins_payment_amount'?: number;
    /**
     * 介護医療保険の金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'care_health_payment_amount'?: number;
    /**
     * 新個人年金の金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'new_personal_pension_ins_payment_amount'?: number;
    /**
     * 旧個人年金の金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'old_personal_pension_ins_payment_amount'?: number;
    /**
     * 住宅借入等適用数
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_deduction_count'?: number;
    /**
     * 住宅借入金等特別控除可能額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_special_deduction_amount'?: number;
    /**
     * 居住開始年月日(1回目)
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_1_started_at'?: string;
    /**
     * 住宅借入金特別控除区分(1回目)
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_1_deduction_type'?: string;
    /**
     * 住宅借入金等年末残高(1回目)
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_1_deduction_balance_amount'?: number;
    /**
     * 居住開始年月日(2回目)
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_2_started_at'?: string;
    /**
     * 住宅借入金特別控除区分(2回目)
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_2_deduction_type'?: string;
    /**
     * 住宅借入金等年末残高(2回目)
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'housing_loan_2_deduction_balance_amount'?: number;
    /**
     * 国民年金保険料などの金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'national_pension_payment_amount'?: number;
    /**
     * 旧長期損害保険料の金額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'old_long_term_property_ins_payment_amount'?: number;
    /**
     * 控除対象配偶者（フリガナ）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'spouse_full_name_yomi'?: string;
    /**
     * 控除対象配偶者（氏名）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'spouse_full_name'?: string;
    /**
     * 控除対象配偶者（区分）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'spouse_non_resident'?: string;
    /**
     * 配偶者の合計所得
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'spouse_total_income'?: number;
    /**
     * 控除対象扶養親族（フリガナ）1
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_1_full_name_yomi'?: string;
    /**
     * 控除対象扶養親族（氏名）1
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_1_full_name'?: string;
    /**
     * 控除対象扶養親族（区分）1
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_1_non_resident'?: string;
    /**
     * 16歳未満の扶養親族（フリガナ）1
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_1_full_name_yomi'?: string;
    /**
     * 16歳未満の扶養親族（氏名）1
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_1_full_name'?: string;
    /**
     * 16歳未満の扶養親族（区分）1
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_1_non_resident'?: string;
    /**
     * 控除対象扶養親族（フリガナ）2
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_2_full_name_yomi'?: string;
    /**
     * 控除対象扶養親族（氏名）2
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_2_full_name'?: string;
    /**
     * 控除対象扶養親族（区分）2
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_2_non_resident'?: string;
    /**
     * 16歳未満の扶養親族（フリガナ）2
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_2_full_name_yomi'?: string;
    /**
     * 16歳未満の扶養親族（氏名）2
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_2_full_name'?: string;
    /**
     * 16歳未満の扶養親族（区分）2
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_2_non_resident'?: string;
    /**
     * 控除対象扶養親族（フリガナ）3
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_3_full_name_yomi'?: string;
    /**
     * 控除対象扶養親族（氏名）3
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_3_full_name'?: string;
    /**
     * 控除対象扶養親族（区分）3
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_3_non_resident'?: string;
    /**
     * 16歳未満の扶養親族（フリガナ）3
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_3_full_name_yomi'?: string;
    /**
     * 16歳未満の扶養親族（氏名）3
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_3_full_name'?: string;
    /**
     * 16歳未満の扶養親族（区分）3
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_3_non_resident'?: string;
    /**
     * 控除対象扶養親族（フリガナ）4
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_4_full_name_yomi'?: string;
    /**
     * 控除対象扶養親族（氏名）4
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_4_full_name'?: string;
    /**
     * 控除対象扶養親族（区分）4
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_4_non_resident'?: string;
    /**
     * 16歳未満の扶養親族（フリガナ）4
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_4_full_name_yomi'?: string;
    /**
     * 16歳未満の扶養親族（氏名）4
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_4_full_name'?: string;
    /**
     * 16歳未満の扶養親族（区分）4
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'dependent_under_16_years_4_non_resident'?: string;
    /**
     * 未成年者
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'underage'?: string;
    /**
     * 外国人
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'foreigner'?: string;
    /**
     * 死亡退職
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'resigned_by_death'?: string;
    /**
     * 災害者
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'disaster_victim'?: string;
    /**
     * 乙欄
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'column_b'?: string;
    /**
     * 本人が障害者（特別）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'special_handicapped'?: string;
    /**
     * 本人が障害者（その他）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'other_handicapped'?: string;
    /**
     * ひとり親
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'single_parent'?: string;
    /**
     * 寡婦
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'widow'?: string;
    /**
     * 寡婦（特別）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'special_widow'?: string;
    /**
     * 寡夫
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'widower'?: string;
    /**
     * 勤労学生
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'working_student'?: string;
    /**
     * 中途就職・退職（就職）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'mid_term_entered'?: string;
    /**
     * 中途就職・退職（退職）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'mid_term_resigned'?: string;
    /**
     * 中途就職・退職日
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'mid_term_entered_or_resigned_at'?: string;
    /**
     * 退職日
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'resigned_at'?: string;
    /**
     * 受給者生年月日
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'crew_birth_at': string;
    /**
     * 支払者（住所）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'biz_establishment_address_literal': string;
    /**
     * 支払者（氏名）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'owner_full_name': string;
    /**
     * 支払者（電話番号）
     * @type {string}
     * @memberof TaxWithholdingSlip
     */
    'biz_establishment_tel_number': string;
    /**
     * 基礎控除の額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'basic_deduction_amount'?: number;
    /**
     * 所得金額調整控除額
     * @type {number}
     * @memberof TaxWithholdingSlip
     */
    'income_adjustment_deduction_amount'?: number;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * tenant_id
     * @type {string}
     * @memberof Tenant
     */
    'id': string;
    /**
     * 名前
     * @type {string}
     * @memberof Tenant
     */
    'name'?: string;
    /**
     * 利用しているサブドメインの一覧
     * @type {Array<Subdomain>}
     * @memberof Tenant
     */
    'subdomains': Array<Subdomain>;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'customer_id'?: string;
    /**
     * トライアル開始日
     * @type {string}
     * @memberof Tenant
     */
    'trial_start_at'?: string;
    /**
     * トライアル終了日
     * @type {string}
     * @memberof Tenant
     */
    'trial_end_at'?: string;
    /**
     * アドオンへの課金ができるかどうか
     * @type {boolean}
     * @memberof Tenant
     */
    'addon_subscribable'?: boolean;
    /**
     * 
     * @type {SubscribedPlan}
     * @memberof Tenant
     */
    'subscribed_plan'?: SubscribedPlan;
    /**
     * 
     * @type {GeneralSetting}
     * @memberof Tenant
     */
    'general_setting'?: GeneralSetting;
    /**
     * 最終更新日
     * @type {string}
     * @memberof Tenant
     */
    'updated_at'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof Tenant
     */
    'created_at'?: string;
}
/**
 * User model
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * ログインメールアドレス
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 管理者フラグ
     * @type {boolean}
     * @memberof User
     */
    'admin': boolean;
    /**
     * 
     * @type {Role}
     * @memberof User
     */
    'role'?: Role;
    /**
     * 「給与所得等明細書の電子交付に関する同意」に同意済みか否か
     * @type {boolean}
     * @memberof User
     */
    'agreement_for_electronic_delivery'?: boolean;
    /**
     * 紐づく従業員のID。crew_id か crew のいずれかが出力されます。
     * @type {string}
     * @memberof User
     */
    'crew_id'?: string;
    /**
     * 
     * @type {Crew}
     * @memberof User
     */
    'crew'?: Crew;
    /**
     * 企業アカウント
     * @type {Array<Tenant>}
     * @memberof User
     */
    'tenants'?: Array<Tenant>;
    /**
     * 招待日時
     * @type {string}
     * @memberof User
     */
    'invitation_created_at'?: string;
    /**
     * 招待開封日時
     * @type {string}
     * @memberof User
     */
    'invitation_opened_at'?: string;
    /**
     * 招待承認日時
     * @type {string}
     * @memberof User
     */
    'invitation_accepted_at'?: string;
    /**
     * 招待回答日時
     * @type {string}
     * @memberof User
     */
    'invitation_answered_at'?: string;
    /**
     * メール配信状況
     * @type {Array<SuppressedEmailLog>}
     * @memberof User
     */
    'suppressed_email_logs'?: Array<SuppressedEmailLog>;
    /**
     * パスワードが設定されているかどうか
     * @type {boolean}
     * @memberof User
     */
    'has_password'?: boolean;
    /**
     * 最終更新日
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
    /**
     * 作成日
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
}
/**
 * Webhook model
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     * Webhook ID
     * @type {string}
     * @memberof Webhook
     */
    'id'?: string;
    /**
     * 通知先URL
     * @type {string}
     * @memberof Webhook
     */
    'url'?: string;
    /**
     * 説明
     * @type {string}
     * @memberof Webhook
     */
    'description'?: string;
    /**
     * 通知に付与される Secret Token
     * @type {string}
     * @memberof Webhook
     */
    'secret_token'?: string;
    /**
     * 従業員情報が作成されたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'crew_created': boolean;
    /**
     * 従業員情報が更新されたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'crew_updated': boolean;
    /**
     * 従業員情報が削除されたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'crew_deleted': boolean;
    /**
     * 従業員情報がインポートされたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'crew_imported': boolean;
    /**
     * 家族情報が作成されたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'dependent_created': boolean;
    /**
     * 家族情報が更新されたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'dependent_updated': boolean;
    /**
     * 家族情報が削除されたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'dependent_deleted': boolean;
    /**
     * 家族情報がインポートされたときに通知するかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    'dependent_imported': boolean;
    /**
     * 無効化された日時
     * @type {string}
     * @memberof Webhook
     */
    'disabled_at'?: string;
    /**
     * 最終更新日
     * @type {string}
     * @memberof Webhook
     */
    'updated_at': string;
    /**
     * 作成日
     * @type {string}
     * @memberof Webhook
     */
    'created_at': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定した ID の従業員カスタム項目グループ情報を削除します。  **グループに属するカスタム項目テンプレート、及びそれらのテンプレートに対して設定されている値がすべて削除されます。** 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewCustomFieldTemplateGroupsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1CrewCustomFieldTemplateGroupsId', 'id', id)
            const localVarPath = `/v1/crew_custom_field_template_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目情報を削除します。  **テンプレートに対して設定されている値がすべて削除されます。** 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewCustomFieldTemplatesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1CrewCustomFieldTemplatesId', 'id', id)
            const localVarPath = `/v1/crew_custom_field_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員の部署情報を削除します。 
         * @summary 部署情報の削除
         * @param {string} crewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewsCrewIdDepartments: async (crewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('deleteV1CrewsCrewIdDepartments', 'crewId', crewId)
            const localVarPath = `/v1/crews/{crew_id}/departments`
                .replace(`{${"crew_id"}}`, encodeURIComponent(String(crewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の家族情報を削除します。 
         * @summary 削除
         * @param {string} crewId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewsCrewIdDependentsId: async (crewId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('deleteV1CrewsCrewIdDependentsId', 'crewId', crewId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1CrewsCrewIdDependentsId', 'id', id)
            const localVarPath = `/v1/crews/{crew_id}/dependents/{id}`
                .replace(`{${"crew_id"}}`, encodeURIComponent(String(crewId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1CrewsId', 'id', id)
            const localVarPath = `/v1/crews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の部署情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1DepartmentsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1DepartmentsId', 'id', id)
            const localVarPath = `/v1/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の雇用形態情報を削除します。  なお、従業員と紐付いている雇用形態の削除はできません。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1EmploymentTypesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1EmploymentTypesId', 'id', id)
            const localVarPath = `/v1/employment_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の役職情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1JobTitlesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1JobTitlesId', 'id', id)
            const localVarPath = `/v1/job_titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PayrollsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1PayrollsId', 'id', id)
            const localVarPath = `/v1/payrolls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与明細情報を削除します。 
         * @summary 削除
         * @param {string} payrollId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PayrollsPayrollIdPayslipsId: async (payrollId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('deleteV1PayrollsPayrollIdPayslipsId', 'payrollId', payrollId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1PayrollsPayrollIdPayslipsId', 'id', id)
            const localVarPath = `/v1/payrolls/{payroll_id}/payslips/{id}`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1TaxWithholdingsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1TaxWithholdingsId', 'id', id)
            const localVarPath = `/v1/tax_withholdings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収票情報を削除します。 
         * @summary 削除
         * @param {string} taxWithholdingId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId: async (taxWithholdingId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxWithholdingId' is not null or undefined
            assertParamExists('deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'taxWithholdingId', taxWithholdingId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'id', id)
            const localVarPath = `/v1/tax_withholdings/{tax_withholding_id}/tax_withholding_slips/{id}`
                .replace(`{${"tax_withholding_id"}}`, encodeURIComponent(String(taxWithholdingId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 口座情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1BankAccountSettings: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/bank_account_settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 事業所情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'soc_ins_owner' | 'lab_ins_owner'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1BizEstablishments: async (page?: number, perPage?: number, embed?: 'soc_ins_owner' | 'lab_ins_owner', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/biz_establishments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 従業員カスタム項目グループをリストで取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
         * @summary リスト取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'templates'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplateGroups: async (page?: number, perPage?: number, embed?: 'templates', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/crew_custom_field_template_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
         * @summary 取得
         * @param {string} id 従業員カスタム項目グループID
         * @param {'templates'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplateGroupsId: async (id: string, embed?: 'templates', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CrewCustomFieldTemplateGroupsId', 'id', id)
            const localVarPath = `/v1/crew_custom_field_template_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 従業員カスタム項目をリストで取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'group'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplates: async (page?: number, perPage?: number, embed?: 'group', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/crew_custom_field_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目情報を取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
         * @summary 取得
         * @param {string} id 従業員カスタム項目ID
         * @param {'group'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplatesId: async (id: string, embed?: 'group', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CrewCustomFieldTemplatesId', 'id', id)
            const localVarPath = `/v1/crew_custom_field_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 従業員情報収集フォーム情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'mail_format'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewInputForms: async (page?: number, perPage?: number, embed?: 'mail_format', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/crew_input_forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員情報収集フォーム情報を取得します。 
         * @summary 取得
         * @param {string} id 従業員情報収集フォームID
         * @param {string} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewInputFormsId: async (id: string, embed?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CrewInputFormsId', 'id', id)
            const localVarPath = `/v1/crew_input_forms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した条件に合致する従業員をリストで取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン項目の ID（String 型）     - ドロップダウン項目に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
         * @summary リストの取得
         * @param {string} [empCode] 社員番号
         * @param {'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc'} [empType] 雇用形態
         * @param {'employed' | 'absent' | 'retired'} [empStatus] 在籍状況
         * @param {'male' | 'female'} [gender] 戸籍上の性別
         * @param {string} [sort] 並び順
         * @param {string} [enteredAtFrom] 指定した日以降に入社した従業員に絞り込みます
         * @param {string} [enteredAtTo] 指定した日以前に入社した従業員に絞り込みます
         * @param {string} [q] 氏名・ビジネスネーム・部署名・役職名でフリーワード検索をします
         * @param {string} [fields] 取得する項目名（カンマ区切り）
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Crews: async (empCode?: string, empType?: 'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc', empStatus?: 'employed' | 'absent' | 'retired', gender?: 'male' | 'female', sort?: string, enteredAtFrom?: string, enteredAtTo?: string, q?: string, fields?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/crews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (empCode !== undefined) {
                localVarQueryParameter['emp_code'] = empCode;
            }

            if (empType !== undefined) {
                localVarQueryParameter['emp_type'] = empType;
            }

            if (empStatus !== undefined) {
                localVarQueryParameter['emp_status'] = empStatus;
            }

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (enteredAtFrom !== undefined) {
                localVarQueryParameter['entered_at_from'] = (enteredAtFrom as any instanceof Date) ?
                    (enteredAtFrom as any).toISOString().substr(0,10) :
                    enteredAtFrom;
            }

            if (enteredAtTo !== undefined) {
                localVarQueryParameter['entered_at_to'] = (enteredAtTo as any instanceof Date) ?
                    (enteredAtTo as any).toISOString().substr(0,10) :
                    enteredAtTo;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した従業員に紐づく家族情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} crewId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewsCrewIdDependents: async (crewId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('getV1CrewsCrewIdDependents', 'crewId', crewId)
            const localVarPath = `/v1/crews/{crew_id}/dependents`
                .replace(`{${"crew_id"}}`, encodeURIComponent(String(crewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の家族情報を取得します。 
         * @summary 取得
         * @param {string} id 家族ID
         * @param {string} crewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewsCrewIdDependentsId: async (id: string, crewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CrewsCrewIdDependentsId', 'id', id)
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('getV1CrewsCrewIdDependentsId', 'crewId', crewId)
            const localVarPath = `/v1/crews/{crew_id}/dependents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"crew_id"}}`, encodeURIComponent(String(crewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員情報を取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン要素の ID（String 型）     - ドロップダウン要素に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
         * @summary 取得
         * @param {string} id 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1CrewsId', 'id', id)
            const localVarPath = `/v1/crews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 部署をリストで取得します。 
         * @summary リストの取得
         * @param {string} [code] コード
         * @param {string} [sort] 並び順
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Departments: async (code?: string, sort?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の部署情報を取得します。 
         * @summary 取得
         * @param {string} id 部署ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1DepartmentsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1DepartmentsId', 'id', id)
            const localVarPath = `/v1/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 続柄のリストを取得します。 
         * @summary リストの取得
         * @param {'spouse'} [filter] フィルター条件
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1DependentRelations: async (filter?: 'spouse', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/dependent_relations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 雇用形態をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1EmploymentTypes: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/employment_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の雇用形態情報を取得します。 
         * @summary 取得
         * @param {string} id 雇用形態ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1EmploymentTypesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1EmploymentTypesId', 'id', id)
            const localVarPath = `/v1/employment_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 役職情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1JobTitles: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/job_titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の役職情報を取得します。 
         * @summary 取得
         * @param {string} id 役職ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1JobTitlesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1JobTitlesId', 'id', id)
            const localVarPath = `/v1/job_titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールフォーマット情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MailFormats: async (page?: number, perPage?: number, embed?: 'crew_input_forms', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/mail_formats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID のメールフォーマット情報を取得します。 
         * @summary 取得
         * @param {string} id メールフォーマットID
         * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MailFormatsId: async (id: string, embed?: 'crew_input_forms', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1MailFormatsId', 'id', id)
            const localVarPath = `/v1/mail_formats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与支給形態をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PaymentPeriods: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/payment_periods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与支給形態情報を取得します。 
         * @summary 取得
         * @param {string} id 給与支給形態のID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PaymentPeriodsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1PaymentPeriodsId', 'id', id)
            const localVarPath = `/v1/payment_periods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Payrolls: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/payrolls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与情報を取得します。 
         * @summary 取得
         * @param {string} id 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PayrollsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1PayrollsId', 'id', id)
            const localVarPath = `/v1/payrolls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与明細情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} payrollId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PayrollsPayrollIdPayslips: async (payrollId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('getV1PayrollsPayrollIdPayslips', 'payrollId', payrollId)
            const localVarPath = `/v1/payrolls/{payroll_id}/payslips`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与明細情報を取得します。 
         * @summary 取得
         * @param {string} id 給与明細ID
         * @param {string} payrollId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PayrollsPayrollIdPayslipsId: async (id: string, payrollId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1PayrollsPayrollIdPayslipsId', 'id', id)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('getV1PayrollsPayrollIdPayslipsId', 'payrollId', payrollId)
            const localVarPath = `/v1/payrolls/{payroll_id}/payslips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 源泉徴収情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdings: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/tax_withholdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収情報を取得します。 
         * @summary 取得
         * @param {string} id 源泉徴収ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdingsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1TaxWithholdingsId', 'id', id)
            const localVarPath = `/v1/tax_withholdings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 源泉徴収票情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} taxWithholdingId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips: async (taxWithholdingId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxWithholdingId' is not null or undefined
            assertParamExists('getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips', 'taxWithholdingId', taxWithholdingId)
            const localVarPath = `/v1/tax_withholdings/{tax_withholding_id}/tax_withholding_slips`
                .replace(`{${"tax_withholding_id"}}`, encodeURIComponent(String(taxWithholdingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収票情報を取得します。 
         * @summary 取得
         * @param {string} id 源泉徴収票ID
         * @param {string} taxWithholdingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId: async (id: string, taxWithholdingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'id', id)
            // verify required parameter 'taxWithholdingId' is not null or undefined
            assertParamExists('getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'taxWithholdingId', taxWithholdingId)
            const localVarPath = `/v1/tax_withholdings/{tax_withholding_id}/tax_withholding_slips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"tax_withholding_id"}}`, encodeURIComponent(String(taxWithholdingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザ情報をリストで取得します。  **招待のステータスについて**  ユーザに送信した招待は項目の値によって以下のように判定できます。  - 従業員登録済み     - `invitation_answered_at` に値が入っている - ユーザ登録済み     - `invitation_created_at` が `null` である - 招待メール開封済み     - `invitation_opened_at` に値が入っている - 招待メール送信済み     - `invitation_created_at` に値が入っている  **招待メールの送信エラーについて**  メールフィルタやアドレス不備によって送信されない場合は `suppressed_email_logs` にエラー内容が記載されます。  詳しくは [メールが届かない場合の原因は？](https://knowledge.smarthr.jp/hc/ha/articles/360026264593) をご確認ください。  - bounced     - バウンス - spam_reported     - スパムレポート - blocked     - ブロック - malformed     - 無効なメール 
         * @summary リストの取得
         * @param {string} [sort] 並び順
         * @param {'crew'} [embed] 埋め込むオブジェクト
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Users: async (sort?: string, embed?: 'crew', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID のユーザ情報を取得します。 
         * @summary 取得
         * @param {string} id ユーザーID
         * @param {'crew'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1UsersId: async (id: string, embed?: 'crew', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1UsersId', 'id', id)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewCustomFieldTemplateGroupsId: async (id: string, name: string, position?: number, accessType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1CrewCustomFieldTemplateGroupsId', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchV1CrewCustomFieldTemplateGroupsId', 'name', name)
            const localVarPath = `/v1/crew_custom_field_template_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (position !== undefined) { 
                localVarFormParams.set('position', position as any);
            }
    
            if (accessType !== undefined) { 
                localVarFormParams.set('access_type', accessType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewCustomFieldTemplatesId: async (id: string, v1CrewCustomFieldTemplates: PatchV1CrewCustomFieldTemplates, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1CrewCustomFieldTemplatesId', 'id', id)
            // verify required parameter 'v1CrewCustomFieldTemplates' is not null or undefined
            assertParamExists('patchV1CrewCustomFieldTemplatesId', 'v1CrewCustomFieldTemplates', v1CrewCustomFieldTemplates)
            const localVarPath = `/v1/crew_custom_field_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1CrewCustomFieldTemplates, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の家族情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"五朗\" } ``` 
         * @summary 部分更新
         * @param {string} crewId 
         * @param {string} id 
         * @param {PatchV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewsCrewIdDependentsId: async (crewId: string, id: string, v1CrewsCrewIdDependents: PatchV1CrewsCrewIdDependents, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('patchV1CrewsCrewIdDependentsId', 'crewId', crewId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1CrewsCrewIdDependentsId', 'id', id)
            // verify required parameter 'v1CrewsCrewIdDependents' is not null or undefined
            assertParamExists('patchV1CrewsCrewIdDependentsId', 'v1CrewsCrewIdDependents', v1CrewsCrewIdDependents)
            const localVarPath = `/v1/crews/{crew_id}/dependents/{id}`
                .replace(`{${"crew_id"}}`, encodeURIComponent(String(crewId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1CrewsCrewIdDependents, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  以下の項目が入力済みの従業員に対して、**これらのいずれかを欠けさせる**更新はできません。 - last_name - first_name - last_name_yomi - first_name_yomi - gender - birth_at - address   **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります - 従業員にプリセット雇用形態以外が設定されている場合、`emp_type` パラメータではそれを null にできません  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します - 指定した `template_id` の値がすでにある場合は、それを更新します 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewsId: async (id: string, v1Crews: PatchV1Crews, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1CrewsId', 'id', id)
            // verify required parameter 'v1Crews' is not null or undefined
            assertParamExists('patchV1CrewsId', 'v1Crews', v1Crews)
            const localVarPath = `/v1/crews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1Crews, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の部署情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1DepartmentsId: async (id: string, v1Departments: PatchV1Departments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1DepartmentsId', 'id', id)
            // verify required parameter 'v1Departments' is not null or undefined
            assertParamExists('patchV1DepartmentsId', 'v1Departments', v1Departments)
            const localVarPath = `/v1/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1Departments, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の雇用形態情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1EmploymentTypesId: async (id: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1EmploymentTypesId', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchV1EmploymentTypesId', 'name', name)
            const localVarPath = `/v1/employment_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の役職情報を部分更新します。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1JobTitlesId: async (id: string, name?: string, rank?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1JobTitlesId', 'id', id)
            const localVarPath = `/v1/job_titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (rank !== undefined) { 
                localVarFormParams.set('rank', rank as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与情報を部分更新します。 更新できるのは  給与明細の名前（管理者向け）(name_for_admin), 給与明細の名前（従業員向け）(name_for_crew) です。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsId: async (id: string, nameForAdmin: string, nameForCrew: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1PayrollsId', 'id', id)
            // verify required parameter 'nameForAdmin' is not null or undefined
            assertParamExists('patchV1PayrollsId', 'nameForAdmin', nameForAdmin)
            // verify required parameter 'nameForCrew' is not null or undefined
            assertParamExists('patchV1PayrollsId', 'nameForCrew', nameForCrew)
            const localVarPath = `/v1/payrolls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (nameForAdmin !== undefined) { 
                localVarFormParams.set('name_for_admin', nameForAdmin as any);
            }
    
            if (nameForCrew !== undefined) { 
                localVarFormParams.set('name_for_crew', nameForCrew as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与情報を確定処理します。 
         * @summary 確定処理
         * @param {string} id 
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} status ステータス
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsIdFix: async (id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'id', id)
            // verify required parameter 'paymentType' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'paymentType', paymentType)
            // verify required parameter 'paidAt' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'paidAt', paidAt)
            // verify required parameter 'periodStartAt' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'periodStartAt', periodStartAt)
            // verify required parameter 'periodEndAt' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'periodEndAt', periodEndAt)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'status', status)
            // verify required parameter 'notifyWithPublish' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'notifyWithPublish', notifyWithPublish)
            // verify required parameter 'numeralSystemHandleType' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'numeralSystemHandleType', numeralSystemHandleType)
            // verify required parameter 'nameForAdmin' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'nameForAdmin', nameForAdmin)
            // verify required parameter 'nameForCrew' is not null or undefined
            assertParamExists('patchV1PayrollsIdFix', 'nameForCrew', nameForCrew)
            const localVarPath = `/v1/payrolls/{id}/fix`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (paymentType !== undefined) { 
                localVarFormParams.set('payment_type', paymentType as any);
            }
    
            if (paidAt !== undefined) { 
                localVarFormParams.set('paid_at', paidAt as any);
            }
    
            if (periodStartAt !== undefined) { 
                localVarFormParams.set('period_start_at', periodStartAt as any);
            }
    
            if (periodEndAt !== undefined) { 
                localVarFormParams.set('period_end_at', periodEndAt as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (publishedAt !== undefined) { 
                localVarFormParams.set('published_at', publishedAt as any);
            }
    
            if (notifyWithPublish !== undefined) { 
                localVarFormParams.set('notify_with_publish', notifyWithPublish as any);
            }
    
            if (numeralSystemHandleType !== undefined) { 
                localVarFormParams.set('numeral_system_handle_type', numeralSystemHandleType as any);
            }
    
            if (nameForAdmin !== undefined) { 
                localVarFormParams.set('name_for_admin', nameForAdmin as any);
            }
    
            if (nameForCrew !== undefined) { 
                localVarFormParams.set('name_for_crew', nameForCrew as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与情報を公開処理します。 公開時刻(published_at) と 公開と同時に通知を行う(notify_with_publish)が未設定の場合は、即時公開、通知なしで公開されます。 公開時刻に過去の日時は登録できません。 公開時刻の予約可能な期間は、1ヶ月以内です。 未来の公開時刻が設定されている場合は、更新可能です。 
         * @summary 公開処理
         * @param {string} id 
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsIdPublish: async (id: string, notifyWithPublish: boolean, publishedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1PayrollsIdPublish', 'id', id)
            // verify required parameter 'notifyWithPublish' is not null or undefined
            assertParamExists('patchV1PayrollsIdPublish', 'notifyWithPublish', notifyWithPublish)
            const localVarPath = `/v1/payrolls/{id}/publish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (publishedAt !== undefined) { 
                localVarFormParams.set('published_at', publishedAt as any);
            }
    
            if (notifyWithPublish !== undefined) { 
                localVarFormParams.set('notify_with_publish', notifyWithPublish as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の給与情報を未確定処理します。 公開済みの場合は、未公開になります。 
         * @summary 確定解除処理
         * @param {string} id 
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} status ステータス
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsIdUnfix: async (id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'id', id)
            // verify required parameter 'paymentType' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'paymentType', paymentType)
            // verify required parameter 'paidAt' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'paidAt', paidAt)
            // verify required parameter 'periodStartAt' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'periodStartAt', periodStartAt)
            // verify required parameter 'periodEndAt' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'periodEndAt', periodEndAt)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'status', status)
            // verify required parameter 'notifyWithPublish' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'notifyWithPublish', notifyWithPublish)
            // verify required parameter 'numeralSystemHandleType' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'numeralSystemHandleType', numeralSystemHandleType)
            // verify required parameter 'nameForAdmin' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'nameForAdmin', nameForAdmin)
            // verify required parameter 'nameForCrew' is not null or undefined
            assertParamExists('patchV1PayrollsIdUnfix', 'nameForCrew', nameForCrew)
            const localVarPath = `/v1/payrolls/{id}/unfix`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (paymentType !== undefined) { 
                localVarFormParams.set('payment_type', paymentType as any);
            }
    
            if (paidAt !== undefined) { 
                localVarFormParams.set('paid_at', paidAt as any);
            }
    
            if (periodStartAt !== undefined) { 
                localVarFormParams.set('period_start_at', periodStartAt as any);
            }
    
            if (periodEndAt !== undefined) { 
                localVarFormParams.set('period_end_at', periodEndAt as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (publishedAt !== undefined) { 
                localVarFormParams.set('published_at', publishedAt as any);
            }
    
            if (notifyWithPublish !== undefined) { 
                localVarFormParams.set('notify_with_publish', notifyWithPublish as any);
            }
    
            if (numeralSystemHandleType !== undefined) { 
                localVarFormParams.set('numeral_system_handle_type', numeralSystemHandleType as any);
            }
    
            if (nameForAdmin !== undefined) { 
                localVarFormParams.set('name_for_admin', nameForAdmin as any);
            }
    
            if (nameForCrew !== undefined) { 
                localVarFormParams.set('name_for_crew', nameForCrew as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収情報を部分更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 (必要な項目だけにすることで部分更新が可能です）  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name 名前
         * @param {string} status ステータス
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1TaxWithholdingsId: async (id: string, name: string, status: string, year: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsId', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsId', 'name', name)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsId', 'status', status)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsId', 'year', year)
            const localVarPath = `/v1/tax_withholdings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (year !== undefined) { 
                localVarFormParams.set('year', year as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収票情報を部分更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
         * @summary 部分更新
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} id 
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId: async (taxWithholdingId: string, id: string, crewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxWithholdingId' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'taxWithholdingId', taxWithholdingId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'id', id)
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'crewId', crewId)
            const localVarPath = `/v1/tax_withholdings/{tax_withholding_id}/tax_withholding_slips/{id}`
                .replace(`{${"tax_withholding_id"}}`, encodeURIComponent(String(taxWithholdingId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (crewId !== undefined) { 
                localVarFormParams.set('crew_id', crewId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 従業員カスタム項目グループを新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 登録
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1CrewCustomFieldTemplateGroups: async (name: string, position?: number, accessType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('postV1CrewCustomFieldTemplateGroups', 'name', name)
            const localVarPath = `/v1/crew_custom_field_template_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (position !== undefined) { 
                localVarFormParams.set('position', position as any);
            }
    
            if (accessType !== undefined) { 
                localVarFormParams.set('access_type', accessType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 従業員カスタム項目を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"name\": \"A型\", \"position\": 1 },     { \"name\": \"B型\", \"position\": 2 },     ...   ] } ``` 
         * @summary 登録
         * @param {PostV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1CrewCustomFieldTemplates: async (v1CrewCustomFieldTemplates: PostV1CrewCustomFieldTemplates, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1CrewCustomFieldTemplates' is not null or undefined
            assertParamExists('postV1CrewCustomFieldTemplates', 'v1CrewCustomFieldTemplates', v1CrewCustomFieldTemplates)
            const localVarPath = `/v1/crew_custom_field_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1CrewCustomFieldTemplates, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 従業員情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  新規登録に際して、特に必須項目はありません。  レスポンスヘッダの `Location` には **SmartHR 上でのエンドポイント URL** が含まれます。  **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します 
         * @summary 登録
         * @param {PostV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Crews: async (v1Crews: PostV1Crews, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1Crews' is not null or undefined
            assertParamExists('postV1Crews', 'v1Crews', v1Crews)
            const localVarPath = `/v1/crews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1Crews, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 家族情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"relation_id\": \"xxxx\",   \"gender\": \"male\",   \"birth_at\": \"1960-01-01\",   \"live_together_type\": \"living_together\" } ``` 
         * @summary 登録
         * @param {string} crewId 
         * @param {PostV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1CrewsCrewIdDependents: async (crewId: string, v1CrewsCrewIdDependents: PostV1CrewsCrewIdDependents, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('postV1CrewsCrewIdDependents', 'crewId', crewId)
            // verify required parameter 'v1CrewsCrewIdDependents' is not null or undefined
            assertParamExists('postV1CrewsCrewIdDependents', 'v1CrewsCrewIdDependents', v1CrewsCrewIdDependents)
            const localVarPath = `/v1/crews/{crew_id}/dependents`
                .replace(`{${"crew_id"}}`, encodeURIComponent(String(crewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1CrewsCrewIdDependents, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 部署情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  - `name` には `/` を含められません - `position` を指定しなかった場合は、自動で採番されます。 
         * @summary 登録
         * @param {PostV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Departments: async (v1Departments: PostV1Departments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1Departments' is not null or undefined
            assertParamExists('postV1Departments', 'v1Departments', v1Departments)
            const localVarPath = `/v1/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1Departments, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 雇用形態情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ``` 
         * @summary 登録
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1EmploymentTypes: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('postV1EmploymentTypes', 'name', name)
            const localVarPath = `/v1/employment_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 役職情報を新規登録します。 
         * @summary 作成
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1JobTitles: async (name?: string, rank?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/job_titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (rank !== undefined) { 
                localVarFormParams.set('rank', rank as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与情報を新規登録します。 
         * @summary 登録
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Payrolls: async (paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentType' is not null or undefined
            assertParamExists('postV1Payrolls', 'paymentType', paymentType)
            // verify required parameter 'paidAt' is not null or undefined
            assertParamExists('postV1Payrolls', 'paidAt', paidAt)
            // verify required parameter 'periodStartAt' is not null or undefined
            assertParamExists('postV1Payrolls', 'periodStartAt', periodStartAt)
            // verify required parameter 'periodEndAt' is not null or undefined
            assertParamExists('postV1Payrolls', 'periodEndAt', periodEndAt)
            // verify required parameter 'numeralSystemHandleType' is not null or undefined
            assertParamExists('postV1Payrolls', 'numeralSystemHandleType', numeralSystemHandleType)
            // verify required parameter 'nameForAdmin' is not null or undefined
            assertParamExists('postV1Payrolls', 'nameForAdmin', nameForAdmin)
            // verify required parameter 'nameForCrew' is not null or undefined
            assertParamExists('postV1Payrolls', 'nameForCrew', nameForCrew)
            const localVarPath = `/v1/payrolls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (paymentType !== undefined) { 
                localVarFormParams.set('payment_type', paymentType as any);
            }
    
            if (paidAt !== undefined) { 
                localVarFormParams.set('paid_at', paidAt as any);
            }
    
            if (periodStartAt !== undefined) { 
                localVarFormParams.set('period_start_at', periodStartAt as any);
            }
    
            if (periodEndAt !== undefined) { 
                localVarFormParams.set('period_end_at', periodEndAt as any);
            }
    
            if (numeralSystemHandleType !== undefined) { 
                localVarFormParams.set('numeral_system_handle_type', numeralSystemHandleType as any);
            }
    
            if (nameForAdmin !== undefined) { 
                localVarFormParams.set('name_for_admin', nameForAdmin as any);
            }
    
            if (nameForCrew !== undefined) { 
                localVarFormParams.set('name_for_crew', nameForCrew as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与明細情報を登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 values の配列に給与明細項目の値を設定してください。 ``` {    \"crew_id\": \"従業員ID\",    \"memo\": \"string\",    \"values\": [      { \"key\": \"支給項目1\", \"value\": \"10000\" },      { \"key\": \"支給項目2\", \"value\": \"100000\" },      { \"key\": \"支給項目3\", \"value\": \"200000\" },      { \"key\": \"控除項目1\", \"value\": \"3000\" },      { \"key\": \"控除項目2\", \"value\": \"30000\" },      { \"key\": \"控除項目3\", \"value\": \"4000\" },      { \"key\": \"勤怠項目1\", \"value\": \"160\" },      { \"key\": \"勤怠項目2\", \"value\": \"20\" },      { \"key\": \"勤怠項目3\", \"value\": \"10\" },      { \"key\": \"合計項目1\", \"value\": \"9000000\" },      { \"key\": \"合計項目2\", \"value\": \"5000000\" },      { \"key\": \"合計項目3\", \"value\": \"4000000\" }    ] } ``` 
         * @summary 登録
         * @param {string} payrollId 給与ID
         * @param {PostV1PayrollsPayrollIdPayslips} v1PayrollsPayrollIdPayslips 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1PayrollsPayrollIdPayslips: async (payrollId: string, v1PayrollsPayrollIdPayslips: PostV1PayrollsPayrollIdPayslips, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('postV1PayrollsPayrollIdPayslips', 'payrollId', payrollId)
            // verify required parameter 'v1PayrollsPayrollIdPayslips' is not null or undefined
            assertParamExists('postV1PayrollsPayrollIdPayslips', 'v1PayrollsPayrollIdPayslips', v1PayrollsPayrollIdPayslips)
            const localVarPath = `/v1/payrolls/{payroll_id}/payslips`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1PayrollsPayrollIdPayslips, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 給与明細情報を一括登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 paysplipsのkeyに配列で従業員ごとの給与明細情報を設定してください。 最大100件まで一括登録可能です。 ``` {   \"payslips\": [     {        \"crew_id\": \"従業員ID_1\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     },     {        \"crew_id\": \"従業員ID_2\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     }   ] } ``` 
         * @summary 一括登録
         * @param {string} payrollId 給与ID
         * @param {Array<string>} payslips 従業員ごとの給与明細情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1PayrollsPayrollIdPayslipsBulk: async (payrollId: string, payslips: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('postV1PayrollsPayrollIdPayslipsBulk', 'payrollId', payrollId)
            // verify required parameter 'payslips' is not null or undefined
            assertParamExists('postV1PayrollsPayrollIdPayslipsBulk', 'payslips', payslips)
            const localVarPath = `/v1/payrolls/{payroll_id}/payslips/bulk`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payslips, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 源泉徴収情報を新規登録します。 ステータスは未確定で登録されます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\" } ``` 
         * @summary 登録
         * @param {string} name 名前
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1TaxWithholdings: async (name: string, year: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('postV1TaxWithholdings', 'name', name)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('postV1TaxWithholdings', 'year', year)
            const localVarPath = `/v1/tax_withholdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (year !== undefined) { 
                localVarFormParams.set('year', year as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 源泉徴収票情報を新規登録します。 ファイルを登録もしくは、源泉徴収票の項目を登録できます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを登録する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を登録する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ```  
         * @summary 登録
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips: async (taxWithholdingId: string, crewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxWithholdingId' is not null or undefined
            assertParamExists('postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips', 'taxWithholdingId', taxWithholdingId)
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips', 'crewId', crewId)
            const localVarPath = `/v1/tax_withholdings/{tax_withholding_id}/tax_withholding_slips`
                .replace(`{${"tax_withholding_id"}}`, encodeURIComponent(String(taxWithholdingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (crewId !== undefined) { 
                localVarFormParams.set('crew_id', crewId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1CrewCustomFieldTemplateGroupsId: async (id: string, name: string, position?: number, accessType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1CrewCustomFieldTemplateGroupsId', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putV1CrewCustomFieldTemplateGroupsId', 'name', name)
            const localVarPath = `/v1/crew_custom_field_template_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (position !== undefined) { 
                localVarFormParams.set('position', position as any);
            }
    
            if (accessType !== undefined) { 
                localVarFormParams.set('access_type', accessType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員カスタム項目情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。この時、指定されなかった既存の要素はすべて削除されます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1CrewCustomFieldTemplatesId: async (id: string, v1CrewCustomFieldTemplates: PutV1CrewCustomFieldTemplates, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1CrewCustomFieldTemplatesId', 'id', id)
            // verify required parameter 'v1CrewCustomFieldTemplates' is not null or undefined
            assertParamExists('putV1CrewCustomFieldTemplatesId', 'v1CrewCustomFieldTemplates', v1CrewCustomFieldTemplates)
            const localVarPath = `/v1/crew_custom_field_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1CrewCustomFieldTemplates, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **このエンドポイントは利用非推奨です**  2020年12月16日より、従業員の更新は「部分更新（PATCH ）」のみの提供となりました。 このエンドポイント自体は利用可能ですが、挙動は部分更新と同等になります。 リクエスト元の制限で PATCH メソッドが使用できないような場合に、エイリアスとしてご利用ください。 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putV1CrewsId: async (id: string, v1Crews: PutV1Crews, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1CrewsId', 'id', id)
            // verify required parameter 'v1Crews' is not null or undefined
            assertParamExists('putV1CrewsId', 'v1Crews', v1Crews)
            const localVarPath = `/v1/crews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1Crews, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の従業員に設定されているメールアドレスでユーザを招待します。  - 指定した従業員情報収集フォームに紐づくメールフォーマットで招待メールが送信されます - 一度招待した従業員に対する2回目以降の招待リクエストは、再招待扱いになります     - 従業員のメールアドレスが変わっていた場合は、招待中ユーザのメールアドレスが更新されます     - 招待を承認済みの従業員に対しての再招待はできません - 招待者のユーザには管理者権限を持つユーザを指定してください 
         * @summary 招待
         * @param {string} id 従業員ID
         * @param {string} inviterUserId 招待者のユーザーID
         * @param {string} [crewInputFormId] 従業員情報収集フォームID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1CrewsIdInvite: async (id: string, inviterUserId: string, crewInputFormId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1CrewsIdInvite', 'id', id)
            // verify required parameter 'inviterUserId' is not null or undefined
            assertParamExists('putV1CrewsIdInvite', 'inviterUserId', inviterUserId)
            const localVarPath = `/v1/crews/{id}/invite`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (inviterUserId !== undefined) { 
                localVarFormParams.set('inviter_user_id', inviterUserId as any);
            }
    
            if (crewInputFormId !== undefined) { 
                localVarFormParams.set('crew_input_form_id', crewInputFormId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の部署情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1DepartmentsId: async (id: string, v1Departments: PutV1Departments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1DepartmentsId', 'id', id)
            // verify required parameter 'v1Departments' is not null or undefined
            assertParamExists('putV1DepartmentsId', 'v1Departments', v1Departments)
            const localVarPath = `/v1/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1Departments, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の雇用形態情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
         * @summary 更新
         * @param {string} id 
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1EmploymentTypesId: async (id: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1EmploymentTypesId', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putV1EmploymentTypesId', 'name', name)
            const localVarPath = `/v1/employment_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の役職情報を更新します。 
         * @summary 更新
         * @param {string} id 
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1JobTitlesId: async (id: string, name?: string, rank?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1JobTitlesId', 'id', id)
            const localVarPath = `/v1/job_titles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (rank !== undefined) { 
                localVarFormParams.set('rank', rank as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収情報を更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {string} name 名前
         * @param {string} status ステータス
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1TaxWithholdingsId: async (id: string, name: string, status: string, year: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1TaxWithholdingsId', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putV1TaxWithholdingsId', 'name', name)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('putV1TaxWithholdingsId', 'status', status)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('putV1TaxWithholdingsId', 'year', year)
            const localVarPath = `/v1/tax_withholdings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.set('name', name as any);
            }
    
            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (year !== undefined) { 
                localVarFormParams.set('year', year as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の源泉徴収票情報を更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
         * @summary 更新
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} id 
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId: async (taxWithholdingId: string, id: string, crewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxWithholdingId' is not null or undefined
            assertParamExists('putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'taxWithholdingId', taxWithholdingId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'id', id)
            // verify required parameter 'crewId' is not null or undefined
            assertParamExists('putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId', 'crewId', crewId)
            const localVarPath = `/v1/tax_withholdings/{tax_withholding_id}/tax_withholding_slips/{id}`
                .replace(`{${"tax_withholding_id"}}`, encodeURIComponent(String(taxWithholdingId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (crewId !== undefined) { 
                localVarFormParams.set('crew_id', crewId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定した ID の従業員カスタム項目グループ情報を削除します。  **グループに属するカスタム項目テンプレート、及びそれらのテンプレートに対して設定されている値がすべて削除されます。** 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1CrewCustomFieldTemplateGroupsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplateGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1CrewCustomFieldTemplateGroupsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目情報を削除します。  **テンプレートに対して設定されている値がすべて削除されます。** 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1CrewCustomFieldTemplatesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1CrewCustomFieldTemplatesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員の部署情報を削除します。 
         * @summary 部署情報の削除
         * @param {string} crewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1CrewsCrewIdDepartments(crewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1CrewsCrewIdDepartments(crewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の家族情報を削除します。 
         * @summary 削除
         * @param {string} crewId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1CrewsCrewIdDependentsId(crewId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1CrewsCrewIdDependentsId(crewId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1CrewsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1CrewsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の部署情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1DepartmentsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1DepartmentsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の雇用形態情報を削除します。  なお、従業員と紐付いている雇用形態の削除はできません。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1EmploymentTypesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1EmploymentTypesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の役職情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1JobTitlesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1JobTitlesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1PayrollsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1PayrollsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与明細情報を削除します。 
         * @summary 削除
         * @param {string} payrollId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1PayrollsPayrollIdPayslipsId(payrollId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1PayrollsPayrollIdPayslipsId(payrollId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1TaxWithholdingsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1TaxWithholdingsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収票情報を削除します。 
         * @summary 削除
         * @param {string} taxWithholdingId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 口座情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1BankAccountSettings(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountSetting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1BankAccountSettings(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 事業所情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'soc_ins_owner' | 'lab_ins_owner'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1BizEstablishments(page?: number, perPage?: number, embed?: 'soc_ins_owner' | 'lab_ins_owner', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BizEstablishment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1BizEstablishments(page, perPage, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 従業員カスタム項目グループをリストで取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
         * @summary リスト取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'templates'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewCustomFieldTemplateGroups(page?: number, perPage?: number, embed?: 'templates', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CrewCustomFieldTemplateGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewCustomFieldTemplateGroups(page, perPage, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
         * @summary 取得
         * @param {string} id 従業員カスタム項目グループID
         * @param {'templates'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewCustomFieldTemplateGroupsId(id: string, embed?: 'templates', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplateGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewCustomFieldTemplateGroupsId(id, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 従業員カスタム項目をリストで取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'group'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewCustomFieldTemplates(page?: number, perPage?: number, embed?: 'group', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CrewCustomFieldTemplate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewCustomFieldTemplates(page, perPage, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目情報を取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
         * @summary 取得
         * @param {string} id 従業員カスタム項目ID
         * @param {'group'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewCustomFieldTemplatesId(id: string, embed?: 'group', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewCustomFieldTemplatesId(id, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 従業員情報収集フォーム情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'mail_format'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewInputForms(page?: number, perPage?: number, embed?: 'mail_format', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CrewInputForm>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewInputForms(page, perPage, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員情報収集フォーム情報を取得します。 
         * @summary 取得
         * @param {string} id 従業員情報収集フォームID
         * @param {string} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewInputFormsId(id: string, embed?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewInputForm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewInputFormsId(id, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した条件に合致する従業員をリストで取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン項目の ID（String 型）     - ドロップダウン項目に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
         * @summary リストの取得
         * @param {string} [empCode] 社員番号
         * @param {'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc'} [empType] 雇用形態
         * @param {'employed' | 'absent' | 'retired'} [empStatus] 在籍状況
         * @param {'male' | 'female'} [gender] 戸籍上の性別
         * @param {string} [sort] 並び順
         * @param {string} [enteredAtFrom] 指定した日以降に入社した従業員に絞り込みます
         * @param {string} [enteredAtTo] 指定した日以前に入社した従業員に絞り込みます
         * @param {string} [q] 氏名・ビジネスネーム・部署名・役職名でフリーワード検索をします
         * @param {string} [fields] 取得する項目名（カンマ区切り）
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Crews(empCode?: string, empType?: 'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc', empStatus?: 'employed' | 'absent' | 'retired', gender?: 'male' | 'female', sort?: string, enteredAtFrom?: string, enteredAtTo?: string, q?: string, fields?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Crew>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Crews(empCode, empType, empStatus, gender, sort, enteredAtFrom, enteredAtTo, q, fields, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した従業員に紐づく家族情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} crewId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewsCrewIdDependents(crewId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dependent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewsCrewIdDependents(crewId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の家族情報を取得します。 
         * @summary 取得
         * @param {string} id 家族ID
         * @param {string} crewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewsCrewIdDependentsId(id: string, crewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dependent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewsCrewIdDependentsId(id, crewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員情報を取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン要素の ID（String 型）     - ドロップダウン要素に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
         * @summary 取得
         * @param {string} id 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1CrewsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crew>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1CrewsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 部署をリストで取得します。 
         * @summary リストの取得
         * @param {string} [code] コード
         * @param {string} [sort] 並び順
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Departments(code?: string, sort?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Departments(code, sort, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の部署情報を取得します。 
         * @summary 取得
         * @param {string} id 部署ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1DepartmentsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1DepartmentsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 続柄のリストを取得します。 
         * @summary リストの取得
         * @param {'spouse'} [filter] フィルター条件
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1DependentRelations(filter?: 'spouse', page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DependentRelation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1DependentRelations(filter, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 雇用形態をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1EmploymentTypes(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmploymentType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1EmploymentTypes(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の雇用形態情報を取得します。 
         * @summary 取得
         * @param {string} id 雇用形態ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1EmploymentTypesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1EmploymentTypesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 役職情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1JobTitles(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobTitle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1JobTitles(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の役職情報を取得します。 
         * @summary 取得
         * @param {string} id 役職ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1JobTitlesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1JobTitlesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールフォーマット情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1MailFormats(page?: number, perPage?: number, embed?: 'crew_input_forms', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MailFormat>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1MailFormats(page, perPage, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID のメールフォーマット情報を取得します。 
         * @summary 取得
         * @param {string} id メールフォーマットID
         * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1MailFormatsId(id: string, embed?: 'crew_input_forms', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailFormat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1MailFormatsId(id, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 給与支給形態をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PaymentPeriods(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentPeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PaymentPeriods(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与支給形態情報を取得します。 
         * @summary 取得
         * @param {string} id 給与支給形態のID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PaymentPeriodsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PaymentPeriodsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 給与情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Payrolls(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payroll>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Payrolls(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与情報を取得します。 
         * @summary 取得
         * @param {string} id 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PayrollsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PayrollsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 給与明細情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} payrollId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PayrollsPayrollIdPayslips(payrollId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payslip>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PayrollsPayrollIdPayslips(payrollId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与明細情報を取得します。 
         * @summary 取得
         * @param {string} id 給与明細ID
         * @param {string} payrollId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1PayrollsPayrollIdPayslipsId(id: string, payrollId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payslip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1PayrollsPayrollIdPayslipsId(id, payrollId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 源泉徴収情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1TaxWithholdings(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxWithholding>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1TaxWithholdings(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収情報を取得します。 
         * @summary 取得
         * @param {string} id 源泉徴収ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1TaxWithholdingsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1TaxWithholdingsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 源泉徴収票情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} taxWithholdingId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxWithholdingSlip>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収票情報を取得します。 
         * @summary 取得
         * @param {string} id 源泉徴収票ID
         * @param {string} taxWithholdingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(id: string, taxWithholdingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholdingSlip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(id, taxWithholdingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザ情報をリストで取得します。  **招待のステータスについて**  ユーザに送信した招待は項目の値によって以下のように判定できます。  - 従業員登録済み     - `invitation_answered_at` に値が入っている - ユーザ登録済み     - `invitation_created_at` が `null` である - 招待メール開封済み     - `invitation_opened_at` に値が入っている - 招待メール送信済み     - `invitation_created_at` に値が入っている  **招待メールの送信エラーについて**  メールフィルタやアドレス不備によって送信されない場合は `suppressed_email_logs` にエラー内容が記載されます。  詳しくは [メールが届かない場合の原因は？](https://knowledge.smarthr.jp/hc/ha/articles/360026264593) をご確認ください。  - bounced     - バウンス - spam_reported     - スパムレポート - blocked     - ブロック - malformed     - 無効なメール 
         * @summary リストの取得
         * @param {string} [sort] 並び順
         * @param {'crew'} [embed] 埋め込むオブジェクト
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Users(sort?: string, embed?: 'crew', page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Users(sort, embed, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID のユーザ情報を取得します。 
         * @summary 取得
         * @param {string} id ユーザーID
         * @param {'crew'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1UsersId(id: string, embed?: 'crew', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1UsersId(id, embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1CrewCustomFieldTemplateGroupsId(id: string, name: string, position?: number, accessType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplateGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1CrewCustomFieldTemplateGroupsId(id, name, position, accessType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1CrewCustomFieldTemplatesId(id: string, v1CrewCustomFieldTemplates: PatchV1CrewCustomFieldTemplates, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1CrewCustomFieldTemplatesId(id, v1CrewCustomFieldTemplates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の家族情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"五朗\" } ``` 
         * @summary 部分更新
         * @param {string} crewId 
         * @param {string} id 
         * @param {PatchV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1CrewsCrewIdDependentsId(crewId: string, id: string, v1CrewsCrewIdDependents: PatchV1CrewsCrewIdDependents, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dependent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1CrewsCrewIdDependentsId(crewId, id, v1CrewsCrewIdDependents, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  以下の項目が入力済みの従業員に対して、**これらのいずれかを欠けさせる**更新はできません。 - last_name - first_name - last_name_yomi - first_name_yomi - gender - birth_at - address   **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります - 従業員にプリセット雇用形態以外が設定されている場合、`emp_type` パラメータではそれを null にできません  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します - 指定した `template_id` の値がすでにある場合は、それを更新します 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1CrewsId(id: string, v1Crews: PatchV1Crews, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crew>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1CrewsId(id, v1Crews, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の部署情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1DepartmentsId(id: string, v1Departments: PatchV1Departments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1DepartmentsId(id, v1Departments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の雇用形態情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1EmploymentTypesId(id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1EmploymentTypesId(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の役職情報を部分更新します。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1JobTitlesId(id: string, name?: string, rank?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1JobTitlesId(id, name, rank, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与情報を部分更新します。 更新できるのは  給与明細の名前（管理者向け）(name_for_admin), 給与明細の名前（従業員向け）(name_for_crew) です。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1PayrollsId(id: string, nameForAdmin: string, nameForCrew: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1PayrollsId(id, nameForAdmin, nameForCrew, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与情報を確定処理します。 
         * @summary 確定処理
         * @param {string} id 
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} status ステータス
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1PayrollsIdFix(id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1PayrollsIdFix(id, paymentType, paidAt, periodStartAt, periodEndAt, status, notifyWithPublish, numeralSystemHandleType, nameForAdmin, nameForCrew, publishedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与情報を公開処理します。 公開時刻(published_at) と 公開と同時に通知を行う(notify_with_publish)が未設定の場合は、即時公開、通知なしで公開されます。 公開時刻に過去の日時は登録できません。 公開時刻の予約可能な期間は、1ヶ月以内です。 未来の公開時刻が設定されている場合は、更新可能です。 
         * @summary 公開処理
         * @param {string} id 
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1PayrollsIdPublish(id: string, notifyWithPublish: boolean, publishedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1PayrollsIdPublish(id, notifyWithPublish, publishedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の給与情報を未確定処理します。 公開済みの場合は、未公開になります。 
         * @summary 確定解除処理
         * @param {string} id 
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} status ステータス
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1PayrollsIdUnfix(id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1PayrollsIdUnfix(id, paymentType, paidAt, periodStartAt, periodEndAt, status, notifyWithPublish, numeralSystemHandleType, nameForAdmin, nameForCrew, publishedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収情報を部分更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 (必要な項目だけにすることで部分更新が可能です）  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name 名前
         * @param {string} status ステータス
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1TaxWithholdingsId(id: string, name: string, status: string, year: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1TaxWithholdingsId(id, name, status, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収票情報を部分更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
         * @summary 部分更新
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} id 
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, crewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholdingSlip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, crewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 従業員カスタム項目グループを新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 登録
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1CrewCustomFieldTemplateGroups(name: string, position?: number, accessType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplateGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1CrewCustomFieldTemplateGroups(name, position, accessType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 従業員カスタム項目を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"name\": \"A型\", \"position\": 1 },     { \"name\": \"B型\", \"position\": 2 },     ...   ] } ``` 
         * @summary 登録
         * @param {PostV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1CrewCustomFieldTemplates(v1CrewCustomFieldTemplates: PostV1CrewCustomFieldTemplates, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1CrewCustomFieldTemplates(v1CrewCustomFieldTemplates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 従業員情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  新規登録に際して、特に必須項目はありません。  レスポンスヘッダの `Location` には **SmartHR 上でのエンドポイント URL** が含まれます。  **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します 
         * @summary 登録
         * @param {PostV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1Crews(v1Crews: PostV1Crews, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crew>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1Crews(v1Crews, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 家族情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"relation_id\": \"xxxx\",   \"gender\": \"male\",   \"birth_at\": \"1960-01-01\",   \"live_together_type\": \"living_together\" } ``` 
         * @summary 登録
         * @param {string} crewId 
         * @param {PostV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1CrewsCrewIdDependents(crewId: string, v1CrewsCrewIdDependents: PostV1CrewsCrewIdDependents, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dependent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1CrewsCrewIdDependents(crewId, v1CrewsCrewIdDependents, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 部署情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  - `name` には `/` を含められません - `position` を指定しなかった場合は、自動で採番されます。 
         * @summary 登録
         * @param {PostV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1Departments(v1Departments: PostV1Departments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1Departments(v1Departments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 雇用形態情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ``` 
         * @summary 登録
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1EmploymentTypes(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1EmploymentTypes(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 役職情報を新規登録します。 
         * @summary 作成
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1JobTitles(name?: string, rank?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1JobTitles(name, rank, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 給与情報を新規登録します。 
         * @summary 登録
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1Payrolls(paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1Payrolls(paymentType, paidAt, periodStartAt, periodEndAt, numeralSystemHandleType, nameForAdmin, nameForCrew, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 給与明細情報を登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 values の配列に給与明細項目の値を設定してください。 ``` {    \"crew_id\": \"従業員ID\",    \"memo\": \"string\",    \"values\": [      { \"key\": \"支給項目1\", \"value\": \"10000\" },      { \"key\": \"支給項目2\", \"value\": \"100000\" },      { \"key\": \"支給項目3\", \"value\": \"200000\" },      { \"key\": \"控除項目1\", \"value\": \"3000\" },      { \"key\": \"控除項目2\", \"value\": \"30000\" },      { \"key\": \"控除項目3\", \"value\": \"4000\" },      { \"key\": \"勤怠項目1\", \"value\": \"160\" },      { \"key\": \"勤怠項目2\", \"value\": \"20\" },      { \"key\": \"勤怠項目3\", \"value\": \"10\" },      { \"key\": \"合計項目1\", \"value\": \"9000000\" },      { \"key\": \"合計項目2\", \"value\": \"5000000\" },      { \"key\": \"合計項目3\", \"value\": \"4000000\" }    ] } ``` 
         * @summary 登録
         * @param {string} payrollId 給与ID
         * @param {PostV1PayrollsPayrollIdPayslips} v1PayrollsPayrollIdPayslips 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1PayrollsPayrollIdPayslips(payrollId: string, v1PayrollsPayrollIdPayslips: PostV1PayrollsPayrollIdPayslips, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payslip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1PayrollsPayrollIdPayslips(payrollId, v1PayrollsPayrollIdPayslips, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 給与明細情報を一括登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 paysplipsのkeyに配列で従業員ごとの給与明細情報を設定してください。 最大100件まで一括登録可能です。 ``` {   \"payslips\": [     {        \"crew_id\": \"従業員ID_1\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     },     {        \"crew_id\": \"従業員ID_2\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     }   ] } ``` 
         * @summary 一括登録
         * @param {string} payrollId 給与ID
         * @param {Array<string>} payslips 従業員ごとの給与明細情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1PayrollsPayrollIdPayslipsBulk(payrollId: string, payslips: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payslip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1PayrollsPayrollIdPayslipsBulk(payrollId, payslips, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 源泉徴収情報を新規登録します。 ステータスは未確定で登録されます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\" } ``` 
         * @summary 登録
         * @param {string} name 名前
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1TaxWithholdings(name: string, year: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1TaxWithholdings(name, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 源泉徴収票情報を新規登録します。 ファイルを登録もしくは、源泉徴収票の項目を登録できます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを登録する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を登録する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ```  
         * @summary 登録
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId: string, crewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholdingSlip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId, crewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1CrewCustomFieldTemplateGroupsId(id: string, name: string, position?: number, accessType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplateGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1CrewCustomFieldTemplateGroupsId(id, name, position, accessType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員カスタム項目情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。この時、指定されなかった既存の要素はすべて削除されます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1CrewCustomFieldTemplatesId(id: string, v1CrewCustomFieldTemplates: PutV1CrewCustomFieldTemplates, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CrewCustomFieldTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1CrewCustomFieldTemplatesId(id, v1CrewCustomFieldTemplates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **このエンドポイントは利用非推奨です**  2020年12月16日より、従業員の更新は「部分更新（PATCH ）」のみの提供となりました。 このエンドポイント自体は利用可能ですが、挙動は部分更新と同等になります。 リクエスト元の制限で PATCH メソッドが使用できないような場合に、エイリアスとしてご利用ください。 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async putV1CrewsId(id: string, v1Crews: PutV1Crews, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Crew>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1CrewsId(id, v1Crews, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の従業員に設定されているメールアドレスでユーザを招待します。  - 指定した従業員情報収集フォームに紐づくメールフォーマットで招待メールが送信されます - 一度招待した従業員に対する2回目以降の招待リクエストは、再招待扱いになります     - 従業員のメールアドレスが変わっていた場合は、招待中ユーザのメールアドレスが更新されます     - 招待を承認済みの従業員に対しての再招待はできません - 招待者のユーザには管理者権限を持つユーザを指定してください 
         * @summary 招待
         * @param {string} id 従業員ID
         * @param {string} inviterUserId 招待者のユーザーID
         * @param {string} [crewInputFormId] 従業員情報収集フォームID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1CrewsIdInvite(id: string, inviterUserId: string, crewInputFormId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1CrewsIdInvite(id, inviterUserId, crewInputFormId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の部署情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1DepartmentsId(id: string, v1Departments: PutV1Departments, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1DepartmentsId(id, v1Departments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の雇用形態情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
         * @summary 更新
         * @param {string} id 
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1EmploymentTypesId(id: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1EmploymentTypesId(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の役職情報を更新します。 
         * @summary 更新
         * @param {string} id 
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1JobTitlesId(id: string, name?: string, rank?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1JobTitlesId(id, name, rank, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収情報を更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {string} name 名前
         * @param {string} status ステータス
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1TaxWithholdingsId(id: string, name: string, status: string, year: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1TaxWithholdingsId(id, name, status, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の源泉徴収票情報を更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
         * @summary 更新
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} id 
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, crewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxWithholdingSlip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, crewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 指定した ID の従業員カスタム項目グループ情報を削除します。  **グループに属するカスタム項目テンプレート、及びそれらのテンプレートに対して設定されている値がすべて削除されます。** 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewCustomFieldTemplateGroupsId(id: string, options?: any): AxiosPromise<CrewCustomFieldTemplateGroup> {
            return localVarFp.deleteV1CrewCustomFieldTemplateGroupsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目情報を削除します。  **テンプレートに対して設定されている値がすべて削除されます。** 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewCustomFieldTemplatesId(id: string, options?: any): AxiosPromise<CrewCustomFieldTemplate> {
            return localVarFp.deleteV1CrewCustomFieldTemplatesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員の部署情報を削除します。 
         * @summary 部署情報の削除
         * @param {string} crewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewsCrewIdDepartments(crewId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1CrewsCrewIdDepartments(crewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の家族情報を削除します。 
         * @summary 削除
         * @param {string} crewId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewsCrewIdDependentsId(crewId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1CrewsCrewIdDependentsId(crewId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1CrewsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1CrewsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の部署情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1DepartmentsId(id: string, options?: any): AxiosPromise<Department> {
            return localVarFp.deleteV1DepartmentsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の雇用形態情報を削除します。  なお、従業員と紐付いている雇用形態の削除はできません。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1EmploymentTypesId(id: string, options?: any): AxiosPromise<EmploymentType> {
            return localVarFp.deleteV1EmploymentTypesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の役職情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1JobTitlesId(id: string, options?: any): AxiosPromise<JobTitle> {
            return localVarFp.deleteV1JobTitlesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PayrollsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1PayrollsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与明細情報を削除します。 
         * @summary 削除
         * @param {string} payrollId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1PayrollsPayrollIdPayslipsId(payrollId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1PayrollsPayrollIdPayslipsId(payrollId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1TaxWithholdingsId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1TaxWithholdingsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収票情報を削除します。 
         * @summary 削除
         * @param {string} taxWithholdingId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 口座情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1BankAccountSettings(page?: number, perPage?: number, options?: any): AxiosPromise<Array<BankAccountSetting>> {
            return localVarFp.getV1BankAccountSettings(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 事業所情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'soc_ins_owner' | 'lab_ins_owner'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1BizEstablishments(page?: number, perPage?: number, embed?: 'soc_ins_owner' | 'lab_ins_owner', options?: any): AxiosPromise<Array<BizEstablishment>> {
            return localVarFp.getV1BizEstablishments(page, perPage, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 従業員カスタム項目グループをリストで取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
         * @summary リスト取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'templates'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplateGroups(page?: number, perPage?: number, embed?: 'templates', options?: any): AxiosPromise<Array<CrewCustomFieldTemplateGroup>> {
            return localVarFp.getV1CrewCustomFieldTemplateGroups(page, perPage, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
         * @summary 取得
         * @param {string} id 従業員カスタム項目グループID
         * @param {'templates'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplateGroupsId(id: string, embed?: 'templates', options?: any): AxiosPromise<CrewCustomFieldTemplateGroup> {
            return localVarFp.getV1CrewCustomFieldTemplateGroupsId(id, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 従業員カスタム項目をリストで取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'group'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplates(page?: number, perPage?: number, embed?: 'group', options?: any): AxiosPromise<Array<CrewCustomFieldTemplate>> {
            return localVarFp.getV1CrewCustomFieldTemplates(page, perPage, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目情報を取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
         * @summary 取得
         * @param {string} id 従業員カスタム項目ID
         * @param {'group'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewCustomFieldTemplatesId(id: string, embed?: 'group', options?: any): AxiosPromise<CrewCustomFieldTemplate> {
            return localVarFp.getV1CrewCustomFieldTemplatesId(id, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 従業員情報収集フォーム情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'mail_format'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewInputForms(page?: number, perPage?: number, embed?: 'mail_format', options?: any): AxiosPromise<Array<CrewInputForm>> {
            return localVarFp.getV1CrewInputForms(page, perPage, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員情報収集フォーム情報を取得します。 
         * @summary 取得
         * @param {string} id 従業員情報収集フォームID
         * @param {string} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewInputFormsId(id: string, embed?: string, options?: any): AxiosPromise<CrewInputForm> {
            return localVarFp.getV1CrewInputFormsId(id, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した条件に合致する従業員をリストで取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン項目の ID（String 型）     - ドロップダウン項目に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
         * @summary リストの取得
         * @param {string} [empCode] 社員番号
         * @param {'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc'} [empType] 雇用形態
         * @param {'employed' | 'absent' | 'retired'} [empStatus] 在籍状況
         * @param {'male' | 'female'} [gender] 戸籍上の性別
         * @param {string} [sort] 並び順
         * @param {string} [enteredAtFrom] 指定した日以降に入社した従業員に絞り込みます
         * @param {string} [enteredAtTo] 指定した日以前に入社した従業員に絞り込みます
         * @param {string} [q] 氏名・ビジネスネーム・部署名・役職名でフリーワード検索をします
         * @param {string} [fields] 取得する項目名（カンマ区切り）
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Crews(empCode?: string, empType?: 'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc', empStatus?: 'employed' | 'absent' | 'retired', gender?: 'male' | 'female', sort?: string, enteredAtFrom?: string, enteredAtTo?: string, q?: string, fields?: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<Crew>> {
            return localVarFp.getV1Crews(empCode, empType, empStatus, gender, sort, enteredAtFrom, enteredAtTo, q, fields, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した従業員に紐づく家族情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} crewId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewsCrewIdDependents(crewId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<Dependent>> {
            return localVarFp.getV1CrewsCrewIdDependents(crewId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の家族情報を取得します。 
         * @summary 取得
         * @param {string} id 家族ID
         * @param {string} crewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewsCrewIdDependentsId(id: string, crewId: string, options?: any): AxiosPromise<Dependent> {
            return localVarFp.getV1CrewsCrewIdDependentsId(id, crewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員情報を取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン要素の ID（String 型）     - ドロップダウン要素に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
         * @summary 取得
         * @param {string} id 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1CrewsId(id: string, options?: any): AxiosPromise<Crew> {
            return localVarFp.getV1CrewsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 部署をリストで取得します。 
         * @summary リストの取得
         * @param {string} [code] コード
         * @param {string} [sort] 並び順
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Departments(code?: string, sort?: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<Department>> {
            return localVarFp.getV1Departments(code, sort, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の部署情報を取得します。 
         * @summary 取得
         * @param {string} id 部署ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1DepartmentsId(id: string, options?: any): AxiosPromise<Department> {
            return localVarFp.getV1DepartmentsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 続柄のリストを取得します。 
         * @summary リストの取得
         * @param {'spouse'} [filter] フィルター条件
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1DependentRelations(filter?: 'spouse', page?: number, perPage?: number, options?: any): AxiosPromise<Array<DependentRelation>> {
            return localVarFp.getV1DependentRelations(filter, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 雇用形態をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1EmploymentTypes(page?: number, perPage?: number, options?: any): AxiosPromise<Array<EmploymentType>> {
            return localVarFp.getV1EmploymentTypes(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の雇用形態情報を取得します。 
         * @summary 取得
         * @param {string} id 雇用形態ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1EmploymentTypesId(id: string, options?: any): AxiosPromise<EmploymentType> {
            return localVarFp.getV1EmploymentTypesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 役職情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1JobTitles(page?: number, perPage?: number, options?: any): AxiosPromise<Array<JobTitle>> {
            return localVarFp.getV1JobTitles(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の役職情報を取得します。 
         * @summary 取得
         * @param {string} id 役職ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1JobTitlesId(id: string, options?: any): AxiosPromise<JobTitle> {
            return localVarFp.getV1JobTitlesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * メールフォーマット情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MailFormats(page?: number, perPage?: number, embed?: 'crew_input_forms', options?: any): AxiosPromise<Array<MailFormat>> {
            return localVarFp.getV1MailFormats(page, perPage, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID のメールフォーマット情報を取得します。 
         * @summary 取得
         * @param {string} id メールフォーマットID
         * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1MailFormatsId(id: string, embed?: 'crew_input_forms', options?: any): AxiosPromise<MailFormat> {
            return localVarFp.getV1MailFormatsId(id, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与支給形態をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PaymentPeriods(page?: number, perPage?: number, options?: any): AxiosPromise<Array<PaymentPeriod>> {
            return localVarFp.getV1PaymentPeriods(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与支給形態情報を取得します。 
         * @summary 取得
         * @param {string} id 給与支給形態のID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PaymentPeriodsId(id: string, options?: any): AxiosPromise<PaymentPeriod> {
            return localVarFp.getV1PaymentPeriodsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Payrolls(page?: number, perPage?: number, options?: any): AxiosPromise<Array<Payroll>> {
            return localVarFp.getV1Payrolls(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与情報を取得します。 
         * @summary 取得
         * @param {string} id 給与ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PayrollsId(id: string, options?: any): AxiosPromise<Payroll> {
            return localVarFp.getV1PayrollsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与明細情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} payrollId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PayrollsPayrollIdPayslips(payrollId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<Payslip>> {
            return localVarFp.getV1PayrollsPayrollIdPayslips(payrollId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与明細情報を取得します。 
         * @summary 取得
         * @param {string} id 給与明細ID
         * @param {string} payrollId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1PayrollsPayrollIdPayslipsId(id: string, payrollId: string, options?: any): AxiosPromise<Payslip> {
            return localVarFp.getV1PayrollsPayrollIdPayslipsId(id, payrollId, options).then((request) => request(axios, basePath));
        },
        /**
         * 源泉徴収情報をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdings(page?: number, perPage?: number, options?: any): AxiosPromise<Array<TaxWithholding>> {
            return localVarFp.getV1TaxWithholdings(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収情報を取得します。 
         * @summary 取得
         * @param {string} id 源泉徴収ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdingsId(id: string, options?: any): AxiosPromise<TaxWithholding> {
            return localVarFp.getV1TaxWithholdingsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 源泉徴収票情報をリストで取得します。 
         * @summary リストの取得
         * @param {string} taxWithholdingId 
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId: string, page?: number, perPage?: number, options?: any): AxiosPromise<Array<TaxWithholdingSlip>> {
            return localVarFp.getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収票情報を取得します。 
         * @summary 取得
         * @param {string} id 源泉徴収票ID
         * @param {string} taxWithholdingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(id: string, taxWithholdingId: string, options?: any): AxiosPromise<TaxWithholdingSlip> {
            return localVarFp.getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(id, taxWithholdingId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザ情報をリストで取得します。  **招待のステータスについて**  ユーザに送信した招待は項目の値によって以下のように判定できます。  - 従業員登録済み     - `invitation_answered_at` に値が入っている - ユーザ登録済み     - `invitation_created_at` が `null` である - 招待メール開封済み     - `invitation_opened_at` に値が入っている - 招待メール送信済み     - `invitation_created_at` に値が入っている  **招待メールの送信エラーについて**  メールフィルタやアドレス不備によって送信されない場合は `suppressed_email_logs` にエラー内容が記載されます。  詳しくは [メールが届かない場合の原因は？](https://knowledge.smarthr.jp/hc/ha/articles/360026264593) をご確認ください。  - bounced     - バウンス - spam_reported     - スパムレポート - blocked     - ブロック - malformed     - 無効なメール 
         * @summary リストの取得
         * @param {string} [sort] 並び順
         * @param {'crew'} [embed] 埋め込むオブジェクト
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Users(sort?: string, embed?: 'crew', page?: number, perPage?: number, options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getV1Users(sort, embed, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID のユーザ情報を取得します。 
         * @summary 取得
         * @param {string} id ユーザーID
         * @param {'crew'} [embed] 埋め込むオブジェクト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1UsersId(id: string, embed?: 'crew', options?: any): AxiosPromise<User> {
            return localVarFp.getV1UsersId(id, embed, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewCustomFieldTemplateGroupsId(id: string, name: string, position?: number, accessType?: string, options?: any): AxiosPromise<CrewCustomFieldTemplateGroup> {
            return localVarFp.patchV1CrewCustomFieldTemplateGroupsId(id, name, position, accessType, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewCustomFieldTemplatesId(id: string, v1CrewCustomFieldTemplates: PatchV1CrewCustomFieldTemplates, options?: any): AxiosPromise<CrewCustomFieldTemplate> {
            return localVarFp.patchV1CrewCustomFieldTemplatesId(id, v1CrewCustomFieldTemplates, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の家族情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"五朗\" } ``` 
         * @summary 部分更新
         * @param {string} crewId 
         * @param {string} id 
         * @param {PatchV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewsCrewIdDependentsId(crewId: string, id: string, v1CrewsCrewIdDependents: PatchV1CrewsCrewIdDependents, options?: any): AxiosPromise<Dependent> {
            return localVarFp.patchV1CrewsCrewIdDependentsId(crewId, id, v1CrewsCrewIdDependents, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  以下の項目が入力済みの従業員に対して、**これらのいずれかを欠けさせる**更新はできません。 - last_name - first_name - last_name_yomi - first_name_yomi - gender - birth_at - address   **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります - 従業員にプリセット雇用形態以外が設定されている場合、`emp_type` パラメータではそれを null にできません  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します - 指定した `template_id` の値がすでにある場合は、それを更新します 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1CrewsId(id: string, v1Crews: PatchV1Crews, options?: any): AxiosPromise<Crew> {
            return localVarFp.patchV1CrewsId(id, v1Crews, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の部署情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
         * @summary 部分更新
         * @param {string} id 
         * @param {PatchV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1DepartmentsId(id: string, v1Departments: PatchV1Departments, options?: any): AxiosPromise<Department> {
            return localVarFp.patchV1DepartmentsId(id, v1Departments, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の雇用形態情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1EmploymentTypesId(id: string, name: string, options?: any): AxiosPromise<EmploymentType> {
            return localVarFp.patchV1EmploymentTypesId(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の役職情報を部分更新します。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1JobTitlesId(id: string, name?: string, rank?: number, options?: any): AxiosPromise<JobTitle> {
            return localVarFp.patchV1JobTitlesId(id, name, rank, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与情報を部分更新します。 更新できるのは  給与明細の名前（管理者向け）(name_for_admin), 給与明細の名前（従業員向け）(name_for_crew) です。 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsId(id: string, nameForAdmin: string, nameForCrew: string, options?: any): AxiosPromise<Payroll> {
            return localVarFp.patchV1PayrollsId(id, nameForAdmin, nameForCrew, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与情報を確定処理します。 
         * @summary 確定処理
         * @param {string} id 
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} status ステータス
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsIdFix(id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options?: any): AxiosPromise<Payroll> {
            return localVarFp.patchV1PayrollsIdFix(id, paymentType, paidAt, periodStartAt, periodEndAt, status, notifyWithPublish, numeralSystemHandleType, nameForAdmin, nameForCrew, publishedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与情報を公開処理します。 公開時刻(published_at) と 公開と同時に通知を行う(notify_with_publish)が未設定の場合は、即時公開、通知なしで公開されます。 公開時刻に過去の日時は登録できません。 公開時刻の予約可能な期間は、1ヶ月以内です。 未来の公開時刻が設定されている場合は、更新可能です。 
         * @summary 公開処理
         * @param {string} id 
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsIdPublish(id: string, notifyWithPublish: boolean, publishedAt?: string, options?: any): AxiosPromise<Payroll> {
            return localVarFp.patchV1PayrollsIdPublish(id, notifyWithPublish, publishedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の給与情報を未確定処理します。 公開済みの場合は、未公開になります。 
         * @summary 確定解除処理
         * @param {string} id 
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} status ステータス
         * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {string} [publishedAt] 公開時刻
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1PayrollsIdUnfix(id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options?: any): AxiosPromise<Payroll> {
            return localVarFp.patchV1PayrollsIdUnfix(id, paymentType, paidAt, periodStartAt, periodEndAt, status, notifyWithPublish, numeralSystemHandleType, nameForAdmin, nameForCrew, publishedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収情報を部分更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 (必要な項目だけにすることで部分更新が可能です）  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {string} name 名前
         * @param {string} status ステータス
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1TaxWithholdingsId(id: string, name: string, status: string, year: string, options?: any): AxiosPromise<TaxWithholding> {
            return localVarFp.patchV1TaxWithholdingsId(id, name, status, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収票情報を部分更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
         * @summary 部分更新
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} id 
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, crewId: string, options?: any): AxiosPromise<TaxWithholdingSlip> {
            return localVarFp.patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, crewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 従業員カスタム項目グループを新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 登録
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1CrewCustomFieldTemplateGroups(name: string, position?: number, accessType?: string, options?: any): AxiosPromise<CrewCustomFieldTemplateGroup> {
            return localVarFp.postV1CrewCustomFieldTemplateGroups(name, position, accessType, options).then((request) => request(axios, basePath));
        },
        /**
         * 従業員カスタム項目を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"name\": \"A型\", \"position\": 1 },     { \"name\": \"B型\", \"position\": 2 },     ...   ] } ``` 
         * @summary 登録
         * @param {PostV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1CrewCustomFieldTemplates(v1CrewCustomFieldTemplates: PostV1CrewCustomFieldTemplates, options?: any): AxiosPromise<CrewCustomFieldTemplate> {
            return localVarFp.postV1CrewCustomFieldTemplates(v1CrewCustomFieldTemplates, options).then((request) => request(axios, basePath));
        },
        /**
         * 従業員情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  新規登録に際して、特に必須項目はありません。  レスポンスヘッダの `Location` には **SmartHR 上でのエンドポイント URL** が含まれます。  **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します 
         * @summary 登録
         * @param {PostV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Crews(v1Crews: PostV1Crews, options?: any): AxiosPromise<Crew> {
            return localVarFp.postV1Crews(v1Crews, options).then((request) => request(axios, basePath));
        },
        /**
         * 家族情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"relation_id\": \"xxxx\",   \"gender\": \"male\",   \"birth_at\": \"1960-01-01\",   \"live_together_type\": \"living_together\" } ``` 
         * @summary 登録
         * @param {string} crewId 
         * @param {PostV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1CrewsCrewIdDependents(crewId: string, v1CrewsCrewIdDependents: PostV1CrewsCrewIdDependents, options?: any): AxiosPromise<Dependent> {
            return localVarFp.postV1CrewsCrewIdDependents(crewId, v1CrewsCrewIdDependents, options).then((request) => request(axios, basePath));
        },
        /**
         * 部署情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  - `name` には `/` を含められません - `position` を指定しなかった場合は、自動で採番されます。 
         * @summary 登録
         * @param {PostV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Departments(v1Departments: PostV1Departments, options?: any): AxiosPromise<Department> {
            return localVarFp.postV1Departments(v1Departments, options).then((request) => request(axios, basePath));
        },
        /**
         * 雇用形態情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ``` 
         * @summary 登録
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1EmploymentTypes(name: string, options?: any): AxiosPromise<EmploymentType> {
            return localVarFp.postV1EmploymentTypes(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 役職情報を新規登録します。 
         * @summary 作成
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1JobTitles(name?: string, rank?: number, options?: any): AxiosPromise<JobTitle> {
            return localVarFp.postV1JobTitles(name, rank, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与情報を新規登録します。 
         * @summary 登録
         * @param {string} paymentType 支給タイプ
         * @param {string} paidAt 支給日
         * @param {string} periodStartAt 対象期間（From）
         * @param {string} periodEndAt 対象期間（To）
         * @param {string} numeralSystemHandleType 記数法
         * @param {string} nameForAdmin 給与明細の名前（管理者向け）
         * @param {string} nameForCrew 給与明細の名前（従業員向け）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Payrolls(paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, options?: any): AxiosPromise<Payroll> {
            return localVarFp.postV1Payrolls(paymentType, paidAt, periodStartAt, periodEndAt, numeralSystemHandleType, nameForAdmin, nameForCrew, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与明細情報を登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 values の配列に給与明細項目の値を設定してください。 ``` {    \"crew_id\": \"従業員ID\",    \"memo\": \"string\",    \"values\": [      { \"key\": \"支給項目1\", \"value\": \"10000\" },      { \"key\": \"支給項目2\", \"value\": \"100000\" },      { \"key\": \"支給項目3\", \"value\": \"200000\" },      { \"key\": \"控除項目1\", \"value\": \"3000\" },      { \"key\": \"控除項目2\", \"value\": \"30000\" },      { \"key\": \"控除項目3\", \"value\": \"4000\" },      { \"key\": \"勤怠項目1\", \"value\": \"160\" },      { \"key\": \"勤怠項目2\", \"value\": \"20\" },      { \"key\": \"勤怠項目3\", \"value\": \"10\" },      { \"key\": \"合計項目1\", \"value\": \"9000000\" },      { \"key\": \"合計項目2\", \"value\": \"5000000\" },      { \"key\": \"合計項目3\", \"value\": \"4000000\" }    ] } ``` 
         * @summary 登録
         * @param {string} payrollId 給与ID
         * @param {PostV1PayrollsPayrollIdPayslips} v1PayrollsPayrollIdPayslips 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1PayrollsPayrollIdPayslips(payrollId: string, v1PayrollsPayrollIdPayslips: PostV1PayrollsPayrollIdPayslips, options?: any): AxiosPromise<Payslip> {
            return localVarFp.postV1PayrollsPayrollIdPayslips(payrollId, v1PayrollsPayrollIdPayslips, options).then((request) => request(axios, basePath));
        },
        /**
         * 給与明細情報を一括登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 paysplipsのkeyに配列で従業員ごとの給与明細情報を設定してください。 最大100件まで一括登録可能です。 ``` {   \"payslips\": [     {        \"crew_id\": \"従業員ID_1\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     },     {        \"crew_id\": \"従業員ID_2\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     }   ] } ``` 
         * @summary 一括登録
         * @param {string} payrollId 給与ID
         * @param {Array<string>} payslips 従業員ごとの給与明細情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1PayrollsPayrollIdPayslipsBulk(payrollId: string, payslips: Array<string>, options?: any): AxiosPromise<Payslip> {
            return localVarFp.postV1PayrollsPayrollIdPayslipsBulk(payrollId, payslips, options).then((request) => request(axios, basePath));
        },
        /**
         * 源泉徴収情報を新規登録します。 ステータスは未確定で登録されます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\" } ``` 
         * @summary 登録
         * @param {string} name 名前
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1TaxWithholdings(name: string, year: string, options?: any): AxiosPromise<TaxWithholding> {
            return localVarFp.postV1TaxWithholdings(name, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 源泉徴収票情報を新規登録します。 ファイルを登録もしくは、源泉徴収票の項目を登録できます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを登録する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を登録する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ```  
         * @summary 登録
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId: string, crewId: string, options?: any): AxiosPromise<TaxWithholdingSlip> {
            return localVarFp.postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId, crewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目グループ情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {string} name カスタム項目グループ名
         * @param {number} [position] ポジション
         * @param {string} [accessType] アクセス種別
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1CrewCustomFieldTemplateGroupsId(id: string, name: string, position?: number, accessType?: string, options?: any): AxiosPromise<CrewCustomFieldTemplateGroup> {
            return localVarFp.putV1CrewCustomFieldTemplateGroupsId(id, name, position, accessType, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員カスタム項目情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。この時、指定されなかった既存の要素はすべて削除されます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1CrewCustomFieldTemplatesId(id: string, v1CrewCustomFieldTemplates: PutV1CrewCustomFieldTemplates, options?: any): AxiosPromise<CrewCustomFieldTemplate> {
            return localVarFp.putV1CrewCustomFieldTemplatesId(id, v1CrewCustomFieldTemplates, options).then((request) => request(axios, basePath));
        },
        /**
         * **このエンドポイントは利用非推奨です**  2020年12月16日より、従業員の更新は「部分更新（PATCH ）」のみの提供となりました。 このエンドポイント自体は利用可能ですが、挙動は部分更新と同等になります。 リクエスト元の制限で PATCH メソッドが使用できないような場合に、エイリアスとしてご利用ください。 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1Crews} v1Crews 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putV1CrewsId(id: string, v1Crews: PutV1Crews, options?: any): AxiosPromise<Crew> {
            return localVarFp.putV1CrewsId(id, v1Crews, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の従業員に設定されているメールアドレスでユーザを招待します。  - 指定した従業員情報収集フォームに紐づくメールフォーマットで招待メールが送信されます - 一度招待した従業員に対する2回目以降の招待リクエストは、再招待扱いになります     - 従業員のメールアドレスが変わっていた場合は、招待中ユーザのメールアドレスが更新されます     - 招待を承認済みの従業員に対しての再招待はできません - 招待者のユーザには管理者権限を持つユーザを指定してください 
         * @summary 招待
         * @param {string} id 従業員ID
         * @param {string} inviterUserId 招待者のユーザーID
         * @param {string} [crewInputFormId] 従業員情報収集フォームID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1CrewsIdInvite(id: string, inviterUserId: string, crewInputFormId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.putV1CrewsIdInvite(id, inviterUserId, crewInputFormId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の部署情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
         * @summary 更新
         * @param {string} id 
         * @param {PutV1Departments} v1Departments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1DepartmentsId(id: string, v1Departments: PutV1Departments, options?: any): AxiosPromise<Department> {
            return localVarFp.putV1DepartmentsId(id, v1Departments, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の雇用形態情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
         * @summary 更新
         * @param {string} id 
         * @param {string} name 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1EmploymentTypesId(id: string, name: string, options?: any): AxiosPromise<EmploymentType> {
            return localVarFp.putV1EmploymentTypesId(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の役職情報を更新します。 
         * @summary 更新
         * @param {string} id 
         * @param {string} [name] 役職の名前
         * @param {number} [rank] 役職のランク (1 ~ 99999)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1JobTitlesId(id: string, name?: string, rank?: number, options?: any): AxiosPromise<JobTitle> {
            return localVarFp.putV1JobTitlesId(id, name, rank, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収情報を更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {string} name 名前
         * @param {string} status ステータス
         * @param {string} year 源泉徴収票に印字される年
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1TaxWithholdingsId(id: string, name: string, status: string, year: string, options?: any): AxiosPromise<TaxWithholding> {
            return localVarFp.putV1TaxWithholdingsId(id, name, status, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の源泉徴収票情報を更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
         * @summary 更新
         * @param {string} taxWithholdingId 源泉徴収ID
         * @param {string} id 
         * @param {string} crewId 従業員ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, crewId: string, options?: any): AxiosPromise<TaxWithholdingSlip> {
            return localVarFp.putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, crewId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 指定した ID の従業員カスタム項目グループ情報を削除します。  **グループに属するカスタム項目テンプレート、及びそれらのテンプレートに対して設定されている値がすべて削除されます。** 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1CrewCustomFieldTemplateGroupsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1CrewCustomFieldTemplateGroupsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目情報を削除します。  **テンプレートに対して設定されている値がすべて削除されます。** 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1CrewCustomFieldTemplatesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1CrewCustomFieldTemplatesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員の部署情報を削除します。 
     * @summary 部署情報の削除
     * @param {string} crewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1CrewsCrewIdDepartments(crewId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1CrewsCrewIdDepartments(crewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の家族情報を削除します。 
     * @summary 削除
     * @param {string} crewId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1CrewsCrewIdDependentsId(crewId: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1CrewsCrewIdDependentsId(crewId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員情報を削除します。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1CrewsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1CrewsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の部署情報を削除します。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1DepartmentsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1DepartmentsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の雇用形態情報を削除します。  なお、従業員と紐付いている雇用形態の削除はできません。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1EmploymentTypesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1EmploymentTypesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の役職情報を削除します。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1JobTitlesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1JobTitlesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与情報を削除します。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1PayrollsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1PayrollsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与明細情報を削除します。 
     * @summary 削除
     * @param {string} payrollId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1PayrollsPayrollIdPayslipsId(payrollId: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1PayrollsPayrollIdPayslipsId(payrollId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収情報を削除します。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1TaxWithholdingsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1TaxWithholdingsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収票情報を削除します。 
     * @summary 削除
     * @param {string} taxWithholdingId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 口座情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1BankAccountSettings(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1BankAccountSettings(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 事業所情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {'soc_ins_owner' | 'lab_ins_owner'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1BizEstablishments(page?: number, perPage?: number, embed?: 'soc_ins_owner' | 'lab_ins_owner', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1BizEstablishments(page, perPage, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 従業員カスタム項目グループをリストで取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
     * @summary リスト取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {'templates'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewCustomFieldTemplateGroups(page?: number, perPage?: number, embed?: 'templates', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewCustomFieldTemplateGroups(page, perPage, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目グループ情報を取得します。  `embed=templates` を指定すると、そのグループに属するカスタム項目テンプレート情報も合わせて取得できます。 
     * @summary 取得
     * @param {string} id 従業員カスタム項目グループID
     * @param {'templates'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewCustomFieldTemplateGroupsId(id: string, embed?: 'templates', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewCustomFieldTemplateGroupsId(id, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 従業員カスタム項目をリストで取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {'group'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewCustomFieldTemplates(page?: number, perPage?: number, embed?: 'group', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewCustomFieldTemplates(page, perPage, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目情報を取得します。  `embed=group` を指定すると、属するカスタム項目グループ情報も合わせて取得できます。（ `group_id` が `group` に置き換わります） 
     * @summary 取得
     * @param {string} id 従業員カスタム項目ID
     * @param {'group'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewCustomFieldTemplatesId(id: string, embed?: 'group', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewCustomFieldTemplatesId(id, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 従業員情報収集フォーム情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {'mail_format'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewInputForms(page?: number, perPage?: number, embed?: 'mail_format', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewInputForms(page, perPage, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員情報収集フォーム情報を取得します。 
     * @summary 取得
     * @param {string} id 従業員情報収集フォームID
     * @param {string} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewInputFormsId(id: string, embed?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewInputFormsId(id, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した条件に合致する従業員をリストで取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン項目の ID（String 型）     - ドロップダウン項目に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
     * @summary リストの取得
     * @param {string} [empCode] 社員番号
     * @param {'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc'} [empType] 雇用形態
     * @param {'employed' | 'absent' | 'retired'} [empStatus] 在籍状況
     * @param {'male' | 'female'} [gender] 戸籍上の性別
     * @param {string} [sort] 並び順
     * @param {string} [enteredAtFrom] 指定した日以降に入社した従業員に絞り込みます
     * @param {string} [enteredAtTo] 指定した日以前に入社した従業員に絞り込みます
     * @param {string} [q] 氏名・ビジネスネーム・部署名・役職名でフリーワード検索をします
     * @param {string} [fields] 取得する項目名（カンマ区切り）
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1Crews(empCode?: string, empType?: 'board_member' | 'full_timer' | 'contract_worker' | 'permatemp' | 'part_timer' | 'outsourcing_contractor' | 'etc', empStatus?: 'employed' | 'absent' | 'retired', gender?: 'male' | 'female', sort?: string, enteredAtFrom?: string, enteredAtTo?: string, q?: string, fields?: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1Crews(empCode, empType, empStatus, gender, sort, enteredAtFrom, enteredAtTo, q, fields, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した従業員に紐づく家族情報をリストで取得します。 
     * @summary リストの取得
     * @param {string} crewId 
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewsCrewIdDependents(crewId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewsCrewIdDependents(crewId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の家族情報を取得します。 
     * @summary 取得
     * @param {string} id 家族ID
     * @param {string} crewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewsCrewIdDependentsId(id: string, crewId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewsCrewIdDependentsId(id, crewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員情報を取得します。  **雇用形態の表現について**  雇用形態データの構造変更に伴い、`emp_type` 項目の利用は非推奨となりました。 今後は `employment_type` 項目をご利用ください。  なお、`emp_type` 項目には、登録されている雇用形態が「プリセット雇用形態」の時のみ、その preset_type の値が入ります。出力形式は従来と変更ありません。  **部署の表現について**  部署データの構造変更に伴い、`department` 項目の利用は非推奨となりました。 今後は `departments` 項目をご利用ください。  なお、`department` 項目には、1番目に登録されている部署について、各階層の名称を `/` で連結した文字列が出力されます。  **カスタム項目の表現について**  `custom_fields` に含まれるカスタム項目設定値は、テンプレート種別によって形式が変わります。  - テキスト（1行）（type: string）     - String 型 - テキスト（複数行）（type: text）     - String 型 - 数値（type: decimal）     - Integer 型 - 日付（type: date）     - `yyyy-MM-dd` 形式の String 型 - ドロップダウン（type: enum）     - ドロップダウン要素の ID（String 型）     - ドロップダウン要素に `physical_name` が設定されている場合は、その値（String 型） - ファイル（type: file）     - アップロードしたファイルへの期限付き URL（String 型） 
     * @summary 取得
     * @param {string} id 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1CrewsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1CrewsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 部署をリストで取得します。 
     * @summary リストの取得
     * @param {string} [code] コード
     * @param {string} [sort] 並び順
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1Departments(code?: string, sort?: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1Departments(code, sort, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の部署情報を取得します。 
     * @summary 取得
     * @param {string} id 部署ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1DepartmentsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1DepartmentsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 続柄のリストを取得します。 
     * @summary リストの取得
     * @param {'spouse'} [filter] フィルター条件
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1DependentRelations(filter?: 'spouse', page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1DependentRelations(filter, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 雇用形態をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1EmploymentTypes(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1EmploymentTypes(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の雇用形態情報を取得します。 
     * @summary 取得
     * @param {string} id 雇用形態ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1EmploymentTypesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1EmploymentTypesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 役職情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1JobTitles(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1JobTitles(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の役職情報を取得します。 
     * @summary 取得
     * @param {string} id 役職ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1JobTitlesId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1JobTitlesId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールフォーマット情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1MailFormats(page?: number, perPage?: number, embed?: 'crew_input_forms', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1MailFormats(page, perPage, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID のメールフォーマット情報を取得します。 
     * @summary 取得
     * @param {string} id メールフォーマットID
     * @param {'crew_input_forms'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1MailFormatsId(id: string, embed?: 'crew_input_forms', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1MailFormatsId(id, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与支給形態をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1PaymentPeriods(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1PaymentPeriods(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与支給形態情報を取得します。 
     * @summary 取得
     * @param {string} id 給与支給形態のID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1PaymentPeriodsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1PaymentPeriodsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1Payrolls(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1Payrolls(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与情報を取得します。 
     * @summary 取得
     * @param {string} id 給与ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1PayrollsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1PayrollsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与明細情報をリストで取得します。 
     * @summary リストの取得
     * @param {string} payrollId 
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1PayrollsPayrollIdPayslips(payrollId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1PayrollsPayrollIdPayslips(payrollId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与明細情報を取得します。 
     * @summary 取得
     * @param {string} id 給与明細ID
     * @param {string} payrollId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1PayrollsPayrollIdPayslipsId(id: string, payrollId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1PayrollsPayrollIdPayslipsId(id, payrollId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 源泉徴収情報をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1TaxWithholdings(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1TaxWithholdings(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収情報を取得します。 
     * @summary 取得
     * @param {string} id 源泉徴収ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1TaxWithholdingsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1TaxWithholdingsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 源泉徴収票情報をリストで取得します。 
     * @summary リストの取得
     * @param {string} taxWithholdingId 
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収票情報を取得します。 
     * @summary 取得
     * @param {string} id 源泉徴収票ID
     * @param {string} taxWithholdingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(id: string, taxWithholdingId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(id, taxWithholdingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザ情報をリストで取得します。  **招待のステータスについて**  ユーザに送信した招待は項目の値によって以下のように判定できます。  - 従業員登録済み     - `invitation_answered_at` に値が入っている - ユーザ登録済み     - `invitation_created_at` が `null` である - 招待メール開封済み     - `invitation_opened_at` に値が入っている - 招待メール送信済み     - `invitation_created_at` に値が入っている  **招待メールの送信エラーについて**  メールフィルタやアドレス不備によって送信されない場合は `suppressed_email_logs` にエラー内容が記載されます。  詳しくは [メールが届かない場合の原因は？](https://knowledge.smarthr.jp/hc/ha/articles/360026264593) をご確認ください。  - bounced     - バウンス - spam_reported     - スパムレポート - blocked     - ブロック - malformed     - 無効なメール 
     * @summary リストの取得
     * @param {string} [sort] 並び順
     * @param {'crew'} [embed] 埋め込むオブジェクト
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1Users(sort?: string, embed?: 'crew', page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1Users(sort, embed, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID のユーザ情報を取得します。 
     * @summary 取得
     * @param {string} id ユーザーID
     * @param {'crew'} [embed] 埋め込むオブジェクト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getV1UsersId(id: string, embed?: 'crew', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getV1UsersId(id, embed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目グループ情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
     * @summary 部分更新
     * @param {string} id 
     * @param {string} name カスタム項目グループ名
     * @param {number} [position] ポジション
     * @param {string} [accessType] アクセス種別
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1CrewCustomFieldTemplateGroupsId(id: string, name: string, position?: number, accessType?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1CrewCustomFieldTemplateGroupsId(id, name, position, accessType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
     * @summary 部分更新
     * @param {string} id 
     * @param {PatchV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1CrewCustomFieldTemplatesId(id: string, v1CrewCustomFieldTemplates: PatchV1CrewCustomFieldTemplates, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1CrewCustomFieldTemplatesId(id, v1CrewCustomFieldTemplates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の家族情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"五朗\" } ``` 
     * @summary 部分更新
     * @param {string} crewId 
     * @param {string} id 
     * @param {PatchV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1CrewsCrewIdDependentsId(crewId: string, id: string, v1CrewsCrewIdDependents: PatchV1CrewsCrewIdDependents, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1CrewsCrewIdDependentsId(crewId, id, v1CrewsCrewIdDependents, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  以下の項目が入力済みの従業員に対して、**これらのいずれかを欠けさせる**更新はできません。 - last_name - first_name - last_name_yomi - first_name_yomi - gender - birth_at - address   **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります - 従業員にプリセット雇用形態以外が設定されている場合、`emp_type` パラメータではそれを null にできません  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します - 指定した `template_id` の値がすでにある場合は、それを更新します 
     * @summary 部分更新
     * @param {string} id 
     * @param {PatchV1Crews} v1Crews 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1CrewsId(id: string, v1Crews: PatchV1Crews, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1CrewsId(id, v1Crews, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の部署情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
     * @summary 部分更新
     * @param {string} id 
     * @param {PatchV1Departments} v1Departments 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1DepartmentsId(id: string, v1Departments: PatchV1Departments, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1DepartmentsId(id, v1Departments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の雇用形態情報を部分更新します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
     * @summary 部分更新
     * @param {string} id 
     * @param {string} name 名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1EmploymentTypesId(id: string, name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1EmploymentTypesId(id, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の役職情報を部分更新します。 
     * @summary 部分更新
     * @param {string} id 
     * @param {string} [name] 役職の名前
     * @param {number} [rank] 役職のランク (1 ~ 99999)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1JobTitlesId(id: string, name?: string, rank?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1JobTitlesId(id, name, rank, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与情報を部分更新します。 更新できるのは  給与明細の名前（管理者向け）(name_for_admin), 給与明細の名前（従業員向け）(name_for_crew) です。 
     * @summary 部分更新
     * @param {string} id 
     * @param {string} nameForAdmin 給与明細の名前（管理者向け）
     * @param {string} nameForCrew 給与明細の名前（従業員向け）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1PayrollsId(id: string, nameForAdmin: string, nameForCrew: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1PayrollsId(id, nameForAdmin, nameForCrew, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与情報を確定処理します。 
     * @summary 確定処理
     * @param {string} id 
     * @param {string} paymentType 支給タイプ
     * @param {string} paidAt 支給日
     * @param {string} periodStartAt 対象期間（From）
     * @param {string} periodEndAt 対象期間（To）
     * @param {string} status ステータス
     * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
     * @param {string} numeralSystemHandleType 記数法
     * @param {string} nameForAdmin 給与明細の名前（管理者向け）
     * @param {string} nameForCrew 給与明細の名前（従業員向け）
     * @param {string} [publishedAt] 公開時刻
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1PayrollsIdFix(id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1PayrollsIdFix(id, paymentType, paidAt, periodStartAt, periodEndAt, status, notifyWithPublish, numeralSystemHandleType, nameForAdmin, nameForCrew, publishedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与情報を公開処理します。 公開時刻(published_at) と 公開と同時に通知を行う(notify_with_publish)が未設定の場合は、即時公開、通知なしで公開されます。 公開時刻に過去の日時は登録できません。 公開時刻の予約可能な期間は、1ヶ月以内です。 未来の公開時刻が設定されている場合は、更新可能です。 
     * @summary 公開処理
     * @param {string} id 
     * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
     * @param {string} [publishedAt] 公開時刻
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1PayrollsIdPublish(id: string, notifyWithPublish: boolean, publishedAt?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1PayrollsIdPublish(id, notifyWithPublish, publishedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の給与情報を未確定処理します。 公開済みの場合は、未公開になります。 
     * @summary 確定解除処理
     * @param {string} id 
     * @param {string} paymentType 支給タイプ
     * @param {string} paidAt 支給日
     * @param {string} periodStartAt 対象期間（From）
     * @param {string} periodEndAt 対象期間（To）
     * @param {string} status ステータス
     * @param {boolean} notifyWithPublish 公開と同時に通知を行なう
     * @param {string} numeralSystemHandleType 記数法
     * @param {string} nameForAdmin 給与明細の名前（管理者向け）
     * @param {string} nameForCrew 給与明細の名前（従業員向け）
     * @param {string} [publishedAt] 公開時刻
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1PayrollsIdUnfix(id: string, paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, status: string, notifyWithPublish: boolean, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, publishedAt?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1PayrollsIdUnfix(id, paymentType, paidAt, periodStartAt, periodEndAt, status, notifyWithPublish, numeralSystemHandleType, nameForAdmin, nameForCrew, publishedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収情報を部分更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 (必要な項目だけにすることで部分更新が可能です）  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
     * @summary 部分更新
     * @param {string} id 
     * @param {string} name 名前
     * @param {string} status ステータス
     * @param {string} year 源泉徴収票に印字される年
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1TaxWithholdingsId(id: string, name: string, status: string, year: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1TaxWithholdingsId(id, name, status, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収票情報を部分更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
     * @summary 部分更新
     * @param {string} taxWithholdingId 源泉徴収ID
     * @param {string} id 
     * @param {string} crewId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, crewId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, crewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 従業員カスタム項目グループを新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
     * @summary 登録
     * @param {string} name カスタム項目グループ名
     * @param {number} [position] ポジション
     * @param {string} [accessType] アクセス種別
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1CrewCustomFieldTemplateGroups(name: string, position?: number, accessType?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1CrewCustomFieldTemplateGroups(name, position, accessType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 従業員カスタム項目を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"name\": \"A型\", \"position\": 1 },     { \"name\": \"B型\", \"position\": 2 },     ...   ] } ``` 
     * @summary 登録
     * @param {PostV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1CrewCustomFieldTemplates(v1CrewCustomFieldTemplates: PostV1CrewCustomFieldTemplates, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1CrewCustomFieldTemplates(v1CrewCustomFieldTemplates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 従業員情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"gender\": \"male\" } ```  新規登録に際して、特に必須項目はありません。  レスポンスヘッダの `Location` には **SmartHR 上でのエンドポイント URL** が含まれます。  **雇用形態の設定について**  雇用形態データの構造変更に伴い、`emp_type` パラメータの利用は非推奨となりました。 今後は `employment_type_id` パラメータをご利用ください。  なお、`emp_type` パラメータに雇用形態種別を指定した場合は、以下のような挙動になります。  - 指定した雇用形態種別を preset_type に持つ雇用形態が設定されます - 存在しない雇用形態種別を指定した場合はリクエストエラーとなります  **部署項目値の設定について**  部署データの構造変更に伴い、`department` パラメータの利用は非推奨となりました。 今後は `department_ids` パラメータをご利用ください。  なお、`department` パラメータに部署名を指定した場合は、以下のような挙動になります。  - 指定した部署名を持つ部署が存在する場合     - 存在する部署を設定します     - トップレベルにある部署のみ検索対象とします - 指定した部署名を持つ部署が存在しない場合     - その部署名で部署を新規登録し、設定します     - 部署の階層はトップレベルになります  **口座情報について**  口座情報データの構造変更に伴い、bank_accounts パラメータのオブジェクトに `bank_account_setting_id` (= 口座設定ID) の指定が可能になりました。  `bank_account_setting_id` を指定した場合は、以下のような挙動になります。  - `bank_account_setting_id` を含まないパラメータが混在している場合、リクエストエラーとなります - 存在しない `bank_account_setting_id` を指定した場合はリクエストエラーとなります  `bank_account_setting_id` を指定しなかった場合は、以下のような挙動になります。  - パラメータの先頭から順にデータを突合し、登録・更新を行います - 有効な口座設定の数を越えたパラメータが指定された場合、リクエストエラーとなります - `bank_account_setting_id` を含むパラメータが混在している場合、リクエストエラーとなります  **カスタム項目値の設定について**  カスタム項目値の設定は `custom_fields` パラメータで行います。 `value` に設定する値は、テンプレート種別に対応させてください。  JSON 例 ``` {   \"custom_fields\": [     {       \"template_id\": 1,       \"value\": \"string\"     },     {       \"template_id\": 2,       \"value\": \"text\"     },     {       \"template_id\": 3,       \"value\": 0     },     {       \"template_id\": 4,       \"value\": \"2017-03-09\"     },     {       \"template_id\": 5,       \"value\": \"enum_element_physical_name\"     },     {       \"template_id\": 6,       \"value\": \"/9j/4AAQSkZJRgABAQAASABIAAD/4QCMRXhpZgAATU0AK...\",       \"file_name\": \"awesome_image.jpg\"     }   ] } ```  - ドロップダウン（type: enum）は、ドロップダウン要素の ID か、`physical_name` の設定値を使って指定します - ファイルは、データを Base64 エンコードした文字列を指定し、かつ `file_name` にデータの名前を拡張子付きで指定します 
     * @summary 登録
     * @param {PostV1Crews} v1Crews 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1Crews(v1Crews: PostV1Crews, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1Crews(v1Crews, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 家族情報を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"last_name\": \"山田\",   \"first_name\": \"太郎\",   \"relation_id\": \"xxxx\",   \"gender\": \"male\",   \"birth_at\": \"1960-01-01\",   \"live_together_type\": \"living_together\" } ``` 
     * @summary 登録
     * @param {string} crewId 
     * @param {PostV1CrewsCrewIdDependents} v1CrewsCrewIdDependents 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1CrewsCrewIdDependents(crewId: string, v1CrewsCrewIdDependents: PostV1CrewsCrewIdDependents, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1CrewsCrewIdDependents(crewId, v1CrewsCrewIdDependents, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 部署情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  - `name` には `/` を含められません - `position` を指定しなかった場合は、自動で採番されます。 
     * @summary 登録
     * @param {PostV1Departments} v1Departments 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1Departments(v1Departments: PostV1Departments, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1Departments(v1Departments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 雇用形態情報を新規登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ``` 
     * @summary 登録
     * @param {string} name 名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1EmploymentTypes(name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1EmploymentTypes(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 役職情報を新規登録します。 
     * @summary 作成
     * @param {string} [name] 役職の名前
     * @param {number} [rank] 役職のランク (1 ~ 99999)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1JobTitles(name?: string, rank?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1JobTitles(name, rank, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与情報を新規登録します。 
     * @summary 登録
     * @param {string} paymentType 支給タイプ
     * @param {string} paidAt 支給日
     * @param {string} periodStartAt 対象期間（From）
     * @param {string} periodEndAt 対象期間（To）
     * @param {string} numeralSystemHandleType 記数法
     * @param {string} nameForAdmin 給与明細の名前（管理者向け）
     * @param {string} nameForCrew 給与明細の名前（従業員向け）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1Payrolls(paymentType: string, paidAt: string, periodStartAt: string, periodEndAt: string, numeralSystemHandleType: string, nameForAdmin: string, nameForCrew: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1Payrolls(paymentType, paidAt, periodStartAt, periodEndAt, numeralSystemHandleType, nameForAdmin, nameForCrew, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与明細情報を登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 values の配列に給与明細項目の値を設定してください。 ``` {    \"crew_id\": \"従業員ID\",    \"memo\": \"string\",    \"values\": [      { \"key\": \"支給項目1\", \"value\": \"10000\" },      { \"key\": \"支給項目2\", \"value\": \"100000\" },      { \"key\": \"支給項目3\", \"value\": \"200000\" },      { \"key\": \"控除項目1\", \"value\": \"3000\" },      { \"key\": \"控除項目2\", \"value\": \"30000\" },      { \"key\": \"控除項目3\", \"value\": \"4000\" },      { \"key\": \"勤怠項目1\", \"value\": \"160\" },      { \"key\": \"勤怠項目2\", \"value\": \"20\" },      { \"key\": \"勤怠項目3\", \"value\": \"10\" },      { \"key\": \"合計項目1\", \"value\": \"9000000\" },      { \"key\": \"合計項目2\", \"value\": \"5000000\" },      { \"key\": \"合計項目3\", \"value\": \"4000000\" }    ] } ``` 
     * @summary 登録
     * @param {string} payrollId 給与ID
     * @param {PostV1PayrollsPayrollIdPayslips} v1PayrollsPayrollIdPayslips 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1PayrollsPayrollIdPayslips(payrollId: string, v1PayrollsPayrollIdPayslips: PostV1PayrollsPayrollIdPayslips, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1PayrollsPayrollIdPayslips(payrollId, v1PayrollsPayrollIdPayslips, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 給与明細情報を一括登録します。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。 paysplipsのkeyに配列で従業員ごとの給与明細情報を設定してください。 最大100件まで一括登録可能です。 ``` {   \"payslips\": [     {        \"crew_id\": \"従業員ID_1\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     },     {        \"crew_id\": \"従業員ID_2\",        \"memo\": \"string\",        \"values\": [          { \"key\": \"支給項目1\", \"value\": \"10000\" },          { \"key\": \"支給項目2\", \"value\": \"100000\" },          { \"key\": \"支給項目3\", \"value\": \"200000\" },          { \"key\": \"控除項目1\", \"value\": \"3000\" },          { \"key\": \"控除項目2\", \"value\": \"30000\" },          { \"key\": \"控除項目3\", \"value\": \"4000\" },          { \"key\": \"勤怠項目1\", \"value\": \"160\" },          { \"key\": \"勤怠項目2\", \"value\": \"20\" },          { \"key\": \"勤怠項目3\", \"value\": \"10\" },          { \"key\": \"合計項目1\", \"value\": \"9000000\" },          { \"key\": \"合計項目2\", \"value\": \"5000000\" },          { \"key\": \"合計項目3\", \"value\": \"4000000\" }        ]     }   ] } ``` 
     * @summary 一括登録
     * @param {string} payrollId 給与ID
     * @param {Array<string>} payslips 従業員ごとの給与明細情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1PayrollsPayrollIdPayslipsBulk(payrollId: string, payslips: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1PayrollsPayrollIdPayslipsBulk(payrollId, payslips, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 源泉徴収情報を新規登録します。 ステータスは未確定で登録されます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\" } ``` 
     * @summary 登録
     * @param {string} name 名前
     * @param {string} year 源泉徴収票に印字される年
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1TaxWithholdings(name: string, year: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1TaxWithholdings(name, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 源泉徴収票情報を新規登録します。 ファイルを登録もしくは、源泉徴収票の項目を登録できます。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを登録する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を登録する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ```  
     * @summary 登録
     * @param {string} taxWithholdingId 源泉徴収ID
     * @param {string} crewId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId: string, crewId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlips(taxWithholdingId, crewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目グループ情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0 } ``` 
     * @summary 更新
     * @param {string} id 
     * @param {string} name カスタム項目グループ名
     * @param {number} [position] ポジション
     * @param {string} [accessType] アクセス種別
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1CrewCustomFieldTemplateGroupsId(id: string, name: string, position?: number, accessType?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1CrewCustomFieldTemplateGroupsId(id, name, position, accessType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員カスタム項目情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"name\": \"身長\",   \"type\": \"decimal\",   \"scale\": 1 } ```  なお、種別がドロップダウン項目（type: enum）の時のみ、 `elements` アトリビュートで要素を指定できます。  既存の elements 要素を更新する場合は `id` を指定してください。この時、指定されなかった既存の要素はすべて削除されます。  JSON 例 ``` {   \"name\": \"血液型\",   \"type\": \"enum\",   \"elements\": [     { \"id\", 1, \"name\": \"A型\", \"position\": 1 },     { \"name\": \"AB型\", \"position\": 3 },     ...   ] } ``` 
     * @summary 更新
     * @param {string} id 
     * @param {PutV1CrewCustomFieldTemplates} v1CrewCustomFieldTemplates 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1CrewCustomFieldTemplatesId(id: string, v1CrewCustomFieldTemplates: PutV1CrewCustomFieldTemplates, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1CrewCustomFieldTemplatesId(id, v1CrewCustomFieldTemplates, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **このエンドポイントは利用非推奨です**  2020年12月16日より、従業員の更新は「部分更新（PATCH ）」のみの提供となりました。 このエンドポイント自体は利用可能ですが、挙動は部分更新と同等になります。 リクエスト元の制限で PATCH メソッドが使用できないような場合に、エイリアスとしてご利用ください。 
     * @summary 更新
     * @param {string} id 
     * @param {PutV1Crews} v1Crews 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1CrewsId(id: string, v1Crews: PutV1Crews, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1CrewsId(id, v1Crews, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の従業員に設定されているメールアドレスでユーザを招待します。  - 指定した従業員情報収集フォームに紐づくメールフォーマットで招待メールが送信されます - 一度招待した従業員に対する2回目以降の招待リクエストは、再招待扱いになります     - 従業員のメールアドレスが変わっていた場合は、招待中ユーザのメールアドレスが更新されます     - 招待を承認済みの従業員に対しての再招待はできません - 招待者のユーザには管理者権限を持つユーザを指定してください 
     * @summary 招待
     * @param {string} id 従業員ID
     * @param {string} inviterUserId 招待者のユーザーID
     * @param {string} [crewInputFormId] 従業員情報収集フォームID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1CrewsIdInvite(id: string, inviterUserId: string, crewInputFormId?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1CrewsIdInvite(id, inviterUserId, crewInputFormId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の部署情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\",   \"position\": 0,   \"parent_id\": 0 } ```  `name` には `/` を含められません 
     * @summary 更新
     * @param {string} id 
     * @param {PutV1Departments} v1Departments 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1DepartmentsId(id: string, v1Departments: PutV1Departments, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1DepartmentsId(id, v1Departments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の雇用形態情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {   \"name\": \"string\" } ```  なお、プリセット雇用形態の更新はできません。 
     * @summary 更新
     * @param {string} id 
     * @param {string} name 名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1EmploymentTypesId(id: string, name: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1EmploymentTypesId(id, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の役職情報を更新します。 
     * @summary 更新
     * @param {string} id 
     * @param {string} [name] 役職の名前
     * @param {number} [rank] 役職のランク (1 ~ 99999)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1JobTitlesId(id: string, name?: string, rank?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1JobTitlesId(id, name, rank, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収情報を更新します。 なお、確定後の源泉徴収の更新はできません。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ``` {  \"name\": \"string\",  \"year\": \"R02\",  \"status\": \"wip\" } ``` 
     * @summary 更新
     * @param {string} id 
     * @param {string} name 名前
     * @param {string} status ステータス
     * @param {string} year 源泉徴収票に印字される年
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1TaxWithholdingsId(id: string, name: string, status: string, year: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1TaxWithholdingsId(id, name, status, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の源泉徴収票情報を更新します。  なお、確定後の源泉徴収票の更新はできません。 ファイルで登録されいる場合はファイルを更新できます。 源泉徴収票の各項目(tax_withholding_slip_attribute)で登録されている場合は各項目を更新できます。 ファイルとtax_withholding_slip_attribute の入れ替え更新をしたい場合は一度削除してから新規登録してください。  以下のスキーマで JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  ファイルを更新する場合  ``` {   \"crew_id\": \"string\",   \"file\": {     \"file_name\": \"file.pdf\",     \"content\": \"base64 content\"   } } ```  源泉徴収票の各項目(tax_withholding_slip_attribute)を更新する場合  ``` {   \"crew_id\": \"string\",   \"crew_address_literal\": \"string\",   \"crew_position\": \"string\",   \"crew_full_name_yomi\": \"string\",   \"crew_full_name\": \"string\",   \"slip_type\": \"string\",   \"payment_amount\": 123456,   \"payment_after_emp_income_deduction_amount\": 1234567,   \"payment_after_income_deduction_amount\": 1234567,   \"withholding_tax_amount\": 123456,   \"spouse_deduction\": \"1\",   \"spouse_deduction_sub\": \"1\",   \"spouse_deduction_elderly\": \"1\",   \"spouse_special_deduction_amount\": 123456,   \"specific_dependent_count\": 9,   \"specific_dependent_sub_count\": 9,   \"elderly_dependent_live_together_count\": 9,   \"elderly_dependent_count\": 9,   \"elderly_dependent_sub_count\": 9,   \"other_dependent_count\": 9,   \"other_dependent_sub_count\": 9,   \"under_16_years_dependent_count\": 9,   \"special_handicapped_dependent_live_together_count\": 9,   \"special_handicapped_dependent_count\": 9,   \"other_handicapped_dependent_count\": 9,   \"non_resident_relative_count\": 9,   \"soc_ins_payment_amount\": 123456,   \"life_ins_deduction_amount\": 123456,   \"earthquake_ins_deduction_amount\": 123456,   \"housing_loan_deduction_amount\": 123456,   \"memo\": \"string\",   \"new_life_ins_payment_amount\": 123456,   \"old_life_ins_payment_amount\": 123456,   \"care_health_payment_amount\": 123456,   \"new_personal_pension_ins_payment_amount\": 123456,   \"old_personal_pension_ins_payment_amount\": 123456,   \"housing_loan_deduction_count\": 9,   \"housing_loan_special_deduction_amount\": 123456,   \"housing_loan_1_started_at\": \"1999-09-23\",   \"housing_loan_1_deduction_type\": \"XXX\",   \"housing_loan_1_deduction_balance_amount\": 123456,   \"housing_loan_2_started_at\": \"1999-09-23\",   \"housing_loan_2_deduction_type\": \"XXX\",   \"housing_loan_2_deduction_balance_amount\": 123456,   \"national_pension_payment_amount\": 123456,   \"old_long_term_property_ins_payment_amount\": 123456,   \"basic_deduction_amount\": 123456,   \"income_adjustment_deduction_amount\": 123456,   \"spouse_full_name_yomi\": \"string\",   \"spouse_full_name\": \"string\",   \"spouse_non_resident\": \"1\",   \"spouse_total_income\": 123456,   \"dependent_1_full_name_yomi\": \"string\",   \"dependent_1_full_name\": \"string\",   \"dependent_1_non_resident\": 1,   \"dependent_under_16_years_1_full_name_yomi\": \"string\",   \"dependent_under_16_years_1_full_name\": \"string\",   \"dependent_under_16_years_1_non_resident\": 1,   \"underage\": \"1\",   \"foreigner\": \"1\",   \"resigned_by_death\": \"1\",   \"disaster_victim\": \"1\",   \"column_b\": \"1\",   \"special_handicapped\": \"1\",   \"other_handicapped\": \"1\",   \"widow\": \"1\",   \"single_parent\": \"1\",   \"working_student\": \"1\",   \"mid_term_entered\": \"1\",   \"mid_term_resigned\": \"1\",   \"mid_term_entered_or_resigned_at\": \"1999-09-23\",   \"crew_birth_at\": \"1980-09-23\",   \"biz_establishment_address_literal\": \"string\",   \"owner_full_name\": \"string\",   \"biz_establishment_tel_number\": \"03-3030-3030\" } ```  以下の項目は源泉徴収の印字される年がR01以前の場合に有効な項目になります  ``` {   \"special_widow\": \"1\",   \"widower\": \"1\" } ```  以下の項目は源泉徴収の印字される年がR02以降の場合に有効な項目になります  ``` {   \"basic_deduction_amount\": 12346,   \"income_adjustment_deduction_amount\": 123456,   \"single_parent\": \"1\" } ``` 
     * @summary 更新
     * @param {string} taxWithholdingId 源泉徴収ID
     * @param {string} id 
     * @param {string} crewId 従業員ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId: string, id: string, crewId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putV1TaxWithholdingsTaxWithholdingIdTaxWithholdingSlipsId(taxWithholdingId, id, crewId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} fcmToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Devices: async (userId: string, fcmToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('postV1Devices', 'userId', userId)
            // verify required parameter 'fcmToken' is not null or undefined
            assertParamExists('postV1Devices', 'fcmToken', fcmToken)
            const localVarPath = `/v1/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (userId !== undefined) { 
                localVarFormParams.set('user_id', userId as any);
            }
    
            if (fcmToken !== undefined) { 
                localVarFormParams.set('fcm_token', fcmToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} fcmToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1Devices(userId: string, fcmToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1Devices(userId, fcmToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {string} fcmToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Devices(userId: string, fcmToken: string, options?: any): AxiosPromise<void> {
            return localVarFp.postV1Devices(userId, fcmToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @param {string} userId 
     * @param {string} fcmToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public postV1Devices(userId: string, fcmToken: string, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).postV1Devices(userId, fcmToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebhookApi - axios parameter creator
 * @export
 */
export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定した ID の Webhook 情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1WebhooksId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteV1WebhooksId', 'id', id)
            const localVarPath = `/v1/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhook をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Webhooks: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の Webhook 情報を取得します。 
         * @summary 取得
         * @param {string} id Webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1WebhooksId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getV1WebhooksId', 'id', id)
            const localVarPath = `/v1/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の Webhook 情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"crew_created\": false,   \"crew_updated\": true } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1WebhooksId: async (id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'id', id)
            // verify required parameter 'crewCreated' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'crewCreated', crewCreated)
            // verify required parameter 'crewUpdated' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'crewUpdated', crewUpdated)
            // verify required parameter 'crewDeleted' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'crewDeleted', crewDeleted)
            // verify required parameter 'crewImported' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'crewImported', crewImported)
            // verify required parameter 'dependentCreated' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'dependentCreated', dependentCreated)
            // verify required parameter 'dependentUpdated' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'dependentUpdated', dependentUpdated)
            // verify required parameter 'dependentDeleted' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'dependentDeleted', dependentDeleted)
            // verify required parameter 'dependentImported' is not null or undefined
            assertParamExists('patchV1WebhooksId', 'dependentImported', dependentImported)
            const localVarPath = `/v1/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (url !== undefined) { 
                localVarFormParams.set('url', url as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
    
            if (secretToken !== undefined) { 
                localVarFormParams.set('secret_token', secretToken as any);
            }
    
            if (crewCreated !== undefined) { 
                localVarFormParams.set('crew_created', crewCreated as any);
            }
    
            if (crewUpdated !== undefined) { 
                localVarFormParams.set('crew_updated', crewUpdated as any);
            }
    
            if (crewDeleted !== undefined) { 
                localVarFormParams.set('crew_deleted', crewDeleted as any);
            }
    
            if (crewImported !== undefined) { 
                localVarFormParams.set('crew_imported', crewImported as any);
            }
    
            if (dependentCreated !== undefined) { 
                localVarFormParams.set('dependent_created', dependentCreated as any);
            }
    
            if (dependentUpdated !== undefined) { 
                localVarFormParams.set('dependent_updated', dependentUpdated as any);
            }
    
            if (dependentDeleted !== undefined) { 
                localVarFormParams.set('dependent_deleted', dependentDeleted as any);
            }
    
            if (dependentImported !== undefined) { 
                localVarFormParams.set('dependent_imported', dependentImported as any);
            }
    
            if (disabledAt !== undefined) { 
                localVarFormParams.set('disabled_at', disabledAt as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Webhook を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
         * @summary 登録
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Webhooks: async (crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crewCreated' is not null or undefined
            assertParamExists('postV1Webhooks', 'crewCreated', crewCreated)
            // verify required parameter 'crewUpdated' is not null or undefined
            assertParamExists('postV1Webhooks', 'crewUpdated', crewUpdated)
            // verify required parameter 'crewDeleted' is not null or undefined
            assertParamExists('postV1Webhooks', 'crewDeleted', crewDeleted)
            // verify required parameter 'crewImported' is not null or undefined
            assertParamExists('postV1Webhooks', 'crewImported', crewImported)
            // verify required parameter 'dependentCreated' is not null or undefined
            assertParamExists('postV1Webhooks', 'dependentCreated', dependentCreated)
            // verify required parameter 'dependentUpdated' is not null or undefined
            assertParamExists('postV1Webhooks', 'dependentUpdated', dependentUpdated)
            // verify required parameter 'dependentDeleted' is not null or undefined
            assertParamExists('postV1Webhooks', 'dependentDeleted', dependentDeleted)
            // verify required parameter 'dependentImported' is not null or undefined
            assertParamExists('postV1Webhooks', 'dependentImported', dependentImported)
            const localVarPath = `/v1/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (url !== undefined) { 
                localVarFormParams.set('url', url as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
    
            if (secretToken !== undefined) { 
                localVarFormParams.set('secret_token', secretToken as any);
            }
    
            if (crewCreated !== undefined) { 
                localVarFormParams.set('crew_created', crewCreated as any);
            }
    
            if (crewUpdated !== undefined) { 
                localVarFormParams.set('crew_updated', crewUpdated as any);
            }
    
            if (crewDeleted !== undefined) { 
                localVarFormParams.set('crew_deleted', crewDeleted as any);
            }
    
            if (crewImported !== undefined) { 
                localVarFormParams.set('crew_imported', crewImported as any);
            }
    
            if (dependentCreated !== undefined) { 
                localVarFormParams.set('dependent_created', dependentCreated as any);
            }
    
            if (dependentUpdated !== undefined) { 
                localVarFormParams.set('dependent_updated', dependentUpdated as any);
            }
    
            if (dependentDeleted !== undefined) { 
                localVarFormParams.set('dependent_deleted', dependentDeleted as any);
            }
    
            if (dependentImported !== undefined) { 
                localVarFormParams.set('dependent_imported', dependentImported as any);
            }
    
            if (disabledAt !== undefined) { 
                localVarFormParams.set('disabled_at', disabledAt as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した ID の Webhook 情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1WebhooksId: async (id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putV1WebhooksId', 'id', id)
            // verify required parameter 'crewCreated' is not null or undefined
            assertParamExists('putV1WebhooksId', 'crewCreated', crewCreated)
            // verify required parameter 'crewUpdated' is not null or undefined
            assertParamExists('putV1WebhooksId', 'crewUpdated', crewUpdated)
            // verify required parameter 'crewDeleted' is not null or undefined
            assertParamExists('putV1WebhooksId', 'crewDeleted', crewDeleted)
            // verify required parameter 'crewImported' is not null or undefined
            assertParamExists('putV1WebhooksId', 'crewImported', crewImported)
            // verify required parameter 'dependentCreated' is not null or undefined
            assertParamExists('putV1WebhooksId', 'dependentCreated', dependentCreated)
            // verify required parameter 'dependentUpdated' is not null or undefined
            assertParamExists('putV1WebhooksId', 'dependentUpdated', dependentUpdated)
            // verify required parameter 'dependentDeleted' is not null or undefined
            assertParamExists('putV1WebhooksId', 'dependentDeleted', dependentDeleted)
            // verify required parameter 'dependentImported' is not null or undefined
            assertParamExists('putV1WebhooksId', 'dependentImported', dependentImported)
            const localVarPath = `/v1/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (url !== undefined) { 
                localVarFormParams.set('url', url as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }
    
            if (secretToken !== undefined) { 
                localVarFormParams.set('secret_token', secretToken as any);
            }
    
            if (crewCreated !== undefined) { 
                localVarFormParams.set('crew_created', crewCreated as any);
            }
    
            if (crewUpdated !== undefined) { 
                localVarFormParams.set('crew_updated', crewUpdated as any);
            }
    
            if (crewDeleted !== undefined) { 
                localVarFormParams.set('crew_deleted', crewDeleted as any);
            }
    
            if (crewImported !== undefined) { 
                localVarFormParams.set('crew_imported', crewImported as any);
            }
    
            if (dependentCreated !== undefined) { 
                localVarFormParams.set('dependent_created', dependentCreated as any);
            }
    
            if (dependentUpdated !== undefined) { 
                localVarFormParams.set('dependent_updated', dependentUpdated as any);
            }
    
            if (dependentDeleted !== undefined) { 
                localVarFormParams.set('dependent_deleted', dependentDeleted as any);
            }
    
            if (dependentImported !== undefined) { 
                localVarFormParams.set('dependent_imported', dependentImported as any);
            }
    
            if (disabledAt !== undefined) { 
                localVarFormParams.set('disabled_at', disabledAt as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定した ID の Webhook 情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteV1WebhooksId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteV1WebhooksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Webhook をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1Webhooks(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Webhook>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1Webhooks(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の Webhook 情報を取得します。 
         * @summary 取得
         * @param {string} id Webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getV1WebhooksId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getV1WebhooksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の Webhook 情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"crew_created\": false,   \"crew_updated\": true } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchV1WebhooksId(id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchV1WebhooksId(id, crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Webhook を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
         * @summary 登録
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postV1Webhooks(crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postV1Webhooks(crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した ID の Webhook 情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putV1WebhooksId(id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putV1WebhooksId(id, crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookApi - factory interface
 * @export
 */
export const WebhookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookApiFp(configuration)
    return {
        /**
         * 指定した ID の Webhook 情報を削除します。 
         * @summary 削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteV1WebhooksId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteV1WebhooksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhook をリストで取得します。 
         * @summary リストの取得
         * @param {number} [page] Page of results to fetch.
         * @param {number} [perPage] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1Webhooks(page?: number, perPage?: number, options?: any): AxiosPromise<Array<Webhook>> {
            return localVarFp.getV1Webhooks(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の Webhook 情報を取得します。 
         * @summary 取得
         * @param {string} id Webhook ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getV1WebhooksId(id: string, options?: any): AxiosPromise<Webhook> {
            return localVarFp.getV1WebhooksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の Webhook 情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"crew_created\": false,   \"crew_updated\": true } ``` 
         * @summary 部分更新
         * @param {string} id 
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchV1WebhooksId(id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: any): AxiosPromise<Webhook> {
            return localVarFp.patchV1WebhooksId(id, crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Webhook を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
         * @summary 登録
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postV1Webhooks(crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: any): AxiosPromise<Webhook> {
            return localVarFp.postV1Webhooks(crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した ID の Webhook 情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
         * @summary 更新
         * @param {string} id 
         * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
         * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
         * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
         * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
         * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
         * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
         * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
         * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
         * @param {string} [url] 通知先URL
         * @param {string} [description] 説明
         * @param {string} [secretToken] 通知に付与される Secret Token
         * @param {string} [disabledAt] 無効化された日時
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putV1WebhooksId(id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: any): AxiosPromise<Webhook> {
            return localVarFp.putV1WebhooksId(id, crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI {
    /**
     * 指定した ID の Webhook 情報を削除します。 
     * @summary 削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public deleteV1WebhooksId(id: string, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).deleteV1WebhooksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhook をリストで取得します。 
     * @summary リストの取得
     * @param {number} [page] Page of results to fetch.
     * @param {number} [perPage] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public getV1Webhooks(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).getV1Webhooks(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の Webhook 情報を取得します。 
     * @summary 取得
     * @param {string} id Webhook ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public getV1WebhooksId(id: string, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).getV1WebhooksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の Webhook 情報を部分更新します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"crew_created\": false,   \"crew_updated\": true } ``` 
     * @summary 部分更新
     * @param {string} id 
     * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
     * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
     * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
     * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
     * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
     * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
     * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
     * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
     * @param {string} [url] 通知先URL
     * @param {string} [description] 説明
     * @param {string} [secretToken] 通知に付与される Secret Token
     * @param {string} [disabledAt] 無効化された日時
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public patchV1WebhooksId(id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).patchV1WebhooksId(id, crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Webhook を新規登録します。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
     * @summary 登録
     * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
     * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
     * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
     * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
     * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
     * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
     * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
     * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
     * @param {string} [url] 通知先URL
     * @param {string} [description] 説明
     * @param {string} [secretToken] 通知に付与される Secret Token
     * @param {string} [disabledAt] 無効化された日時
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public postV1Webhooks(crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).postV1Webhooks(crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した ID の Webhook 情報を更新します。 未指定の属性は情報が削除されます。未指定の属性を消したくない場合は「部分更新」をご利用ください。  BODY SAMPLE と BODY SCHEMA を参考に JSON 文字列を構築してリクエストボディに詰め、リクエストヘッダの `Content-Type` に `application/json` を指定してリクエストしてください。  JSON 例 ``` {   \"url\": \"https://example.com/\",   \"crew_created\": true,   \"crew_updated\": false,   \"crew_deleted\": true,   \"crew_imported\": false } ``` 
     * @summary 更新
     * @param {string} id 
     * @param {boolean} crewCreated 従業員情報が作成されたときに通知するかどうか
     * @param {boolean} crewUpdated 従業員情報が更新されたときに通知するかどうか
     * @param {boolean} crewDeleted 従業員情報が削除されたときに通知するかどうか
     * @param {boolean} crewImported 従業員情報がインポートされたときに通知するかどうか
     * @param {boolean} dependentCreated 家族情報が作成されたときに通知するかどうか
     * @param {boolean} dependentUpdated 家族情報が更新されたときに通知するかどうか
     * @param {boolean} dependentDeleted 家族情報が削除されたときに通知するかどうか
     * @param {boolean} dependentImported 家族情報がインポートされたときに通知するかどうか
     * @param {string} [url] 通知先URL
     * @param {string} [description] 説明
     * @param {string} [secretToken] 通知に付与される Secret Token
     * @param {string} [disabledAt] 無効化された日時
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public putV1WebhooksId(id: string, crewCreated: boolean, crewUpdated: boolean, crewDeleted: boolean, crewImported: boolean, dependentCreated: boolean, dependentUpdated: boolean, dependentDeleted: boolean, dependentImported: boolean, url?: string, description?: string, secretToken?: string, disabledAt?: string, options?: AxiosRequestConfig) {
        return WebhookApiFp(this.configuration).putV1WebhooksId(id, crewCreated, crewUpdated, crewDeleted, crewImported, dependentCreated, dependentUpdated, dependentDeleted, dependentImported, url, description, secretToken, disabledAt, options).then((request) => request(this.axios, this.basePath));
    }
}


